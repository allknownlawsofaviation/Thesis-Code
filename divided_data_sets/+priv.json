[
  {
    "index": 103,
    "id": "CVE-2011-2211",
    "commit_id": "21c5977a836e399fc710ff2c5367845ed5c2527f",
    "added_lines": [
      "if (len > 32",
      "if ((unsigned long)len > (unsigned long)count",
      "if (nbytes > sizeof(*hwrpb",
      "unsigned int status = 0",
      "ret = sys_wait4(pid, (unsigned int __user *) &status, options,",
      "(struct rusage __user *) &r",
      "err |= put_user(status, ustatus"
    ],
    "removed_lines": [
      "if (namelen > 32",
      "if (len > count",
      "if (nbytes < sizeof(*hwrpb",
      "ret = sys_wait4(pid, ustatus, options, (struct rusage __user *) &r"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "incorrect pointer"
    ]
  },
  {
    "index": 162,
    "id": "CVE-2013-4587",
    "commit_id": "338c7dbadd2671189cec7faf64c84d01071b3f96",
    "added_lines": [
      "if (id >= KVM_MAX_VCPUS",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "array index error"
    ]
  },
  {
    "index": 173,
    "id": "CVE-2013-4300",
    "commit_id": "d661684cf6820331feae71146c35da83d794467e",
    "added_lines": [
      "ns_capable(task_active_pid_ns(current)->user_ns, CAP_SYS_ADMIN)) &&"
    ],
    "removed_lines": [
      "ns_capable(current->nsproxy->pid_ns->user_ns, CAP_SYS_ADMIN)) &&"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "performs a capability check in an incorrect namespace"
    ]
  },
  {
    "index": 186,
    "id": "CVE-2013-4136",
    "commit_id": "5483b3292cc2af1c83033eaaadec20dba4dcfd9b",
    "added_lines": [
      "makeDirTree(parentDir + \"/passenger-test.1234\"",
      "makeDirTree(parentDir + \"/passenger-test.5678\""
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 4.4,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "symlink attack"
    ]
  },
  {
    "index": 232,
    "id": "CVE-2013-2094",
    "commit_id": "8176cced706b5e5d15887584150764894e94e02f",
    "added_lines": [
      "u64 event_id = event->attr.config"
    ],
    "removed_lines": [
      "int event_id = event->attr.config"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "incorrect integer data type"
    ]
  },
  {
    "index": 239,
    "id": "CVE-2013-1979",
    "commit_id": "83f1b4ba917db5dc5a061a44b3403ddb6e783494",
    "added_lines": [
      "scm->creds.uid = cred ? cred->uid : INVALID_UID",
      "scm->creds.gid = cred ? cred->gid : INVALID_GID"
    ],
    "removed_lines": [
      "scm->creds.uid = cred ? cred->euid : INVALID_UID",
      "scm->creds.gid = cred ? cred->egid : INVALID_GID"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "uses incorrect uid and gid values during credentials passing"
    ]
  },
  {
    "index": 240,
    "id": "CVE-2013-1959",
    "commit_id": "6708075f104c3c9b04b23336bb0366ca30c3931b",
    "added_lines": [
      "static bool new_idmap_permitted(const struct file *file,",
      "struct user_namespace *ns, int cap_setid,",
      "if (!new_idmap_permitted(file, ns, cap_setid, &new_map",
      "static bool new_idmap_permitted(const struct file *file,",
      "struct user_namespace *ns, int cap_setid,",
      "if (ns_capable(ns->parent, cap_setid) &&",
      "file_ns_capable(file, ns->parent, cap_setid"
    ],
    "removed_lines": [
      "static bool new_idmap_permitted(struct user_namespace *ns, int cap_setid,",
      "if (!new_idmap_permitted(ns, cap_setid, &new_map",
      "static bool new_idmap_permitted(struct user_namespace *ns, int cap_setid,",
      "if (ns_capable(ns->parent, cap_setid"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 3.7,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "does not have appropriate capability requirements for the uid_map and gid_map files"
    ]
  },
  {
    "index": 250,
    "id": "CVE-2013-1858",
    "commit_id": "e66eded8309ebf679d3d3c1f5820d1f2ca332c71",
    "added_lines": [
      "#include <linux/fs_struct.h>",
      "if (current->fs->users != 1",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "does not properly handle a combination of the CLONE_NEWUSER and CLONE_FS flags"
    ]
  },
  {
    "index": 251,
    "id": "CVE-2013-1848",
    "commit_id": "8d0c2d10dd72c5292eda7a06231056a4c972e4cc",
    "added_lines": [
      "ext3_msg(sb, KERN_ERR, \"error: failed to open journal device %s: %ld\",",
      "ext3_msg(sb, KERN_ERR, \"error: invalid sb specification: %s\","
    ],
    "removed_lines": [
      "ext3_msg(sb, \"error: failed to open journal device %s: %ld\",",
      "ext3_msg(sb, \"error: invalid sb specification: %s\","
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "+Priv",
    "score": 6.2,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "incorrect arguments to functions"
    ]
  },
  {
    "index": 252,
    "id": "CVE-2013-1828",
    "commit_id": "726bc6b092da4c093eb74d13c07184b18c1af0f1",
    "added_lines": [
      "len = min_t(size_t, len, sizeof(sas"
    ],
    "removed_lines": [
      "len = min_t(size_t, len, sizeof(sas"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "getsockopt system call"
    ]
  },
  {
    "index": 264,
    "id": "CVE-2013-1763",
    "commit_id": "6e601a53566d84e1ffd25e7b6fe0b6894ffd79c0",
    "added_lines": [
      "if (req->sdiag_family >= AF_MAX",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "array index error"
    ]
  },
  {
    "index": 271,
    "id": "CVE-2013-0871",
    "commit_id": "9899d11f654474d2d54ea52ceaa2a1f4db3abd68",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Race Condition or Concurrency"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "race condition"
    ]
  },
  {
    "index": 280,
    "id": "CVE-2013-0228",
    "commit_id": "13d2b4d11d69a92574a55bfd985cfb0ca77aebdc",
    "added_lines": [
      "movl %ss:TI_cpu(%eax), %eax",
      "movl %ss:__per_cpu_offset(,%eax,4), %eax",
      "mov %ss:xen_vcpu(%eax), %eax",
      "movl %ss:xen_vcpu, %eax",
      "setz %ss:XEN_vcpu_info_mask(%eax",
      "cmpw $0x0001, %ss:XEN_vcpu_info_pending(%eax",
      "movb $1, %ss:XEN_vcpu_info_mask(%eax"
    ],
    "removed_lines": [
      "movl TI_cpu(%eax), %eax",
      "movl __per_cpu_offset(,%eax,4), %eax",
      "mov xen_vcpu(%eax), %eax",
      "movl xen_vcpu, %eax",
      "setz XEN_vcpu_info_mask(%eax",
      "cmpw $0x0001, XEN_vcpu_info_pending(%eax",
      "movb $1, XEN_vcpu_info_mask(%eax"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "+Priv",
    "score": 6.2,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "does not properly handle an invalid value in the DS segment register"
    ]
  },
  {
    "index": 322,
    "id": "CVE-2014-9322",
    "commit_id": "6f442be2fb22be02cafa606f1769fa1e6f894441",
    "added_lines": [
      "set_intr_gate(X86_TRAP_SS, stack_segment"
    ],
    "removed_lines": [
      "#ifdef CONFIG_X86_32",
      "#endif",
      "dotraplinkage void do_stack_segment(struct pt_regs *regs, long error_code",
      "enum ctx_state prev_state",
      "prev_state = exception_enter",
      "if (notify_die(DIE_TRAP, \"stack segment\", regs, error_code,",
      "X86_TRAP_SS, SIGBUS) != NOTIFY_STOP)",
      "preempt_conditional_sti(regs",
      "do_trap(X86_TRAP_SS, SIGBUS, \"stack segment\", regs, error_code, NULL",
      "preempt_conditional_cli(regs",
      "exception_exit(prev_state",
      "set_intr_gate_ist(X86_TRAP_SS, &stack_segment, STACKFAULT_STACK"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "does not properly handle faults associated with the Stack Segment (SS) segment register"
    ]
  },
  {
    "index": 361,
    "id": "CVE-2014-4943",
    "commit_id": "3cf521f7dc87c031617fd47e4b7aa2593c2f3daf",
    "added_lines": [
      "return -EINVAL",
      "return -EINVAL"
    ],
    "removed_lines": [
      "return udp_prot.setsockopt(sk, level, optname, optval, optlen",
      "return udp_prot.getsockopt(sk, level, optname, optval, optlen"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "RETURN",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "RETURN",
      "RETURN"
    ],
    "vuln": "+Priv ",
    "summary": [
      "leveraging data-structure differences between an l2tp socket and an inet socket"
    ]
  },
  {
    "index": 383,
    "id": "CVE-2014-3980",
    "commit_id": "293d9d3f",
    "added_lines": [],
    "removed_lines": [
      "#ifdef __linux__",
      "sun.sun_path[0] = '\\0'",
      "memcpy (sun.sun_path + 1, address, strlen (address",
      "sun_len = offsetof (struct sockaddr_un, sun_path) + strlen (address) + 1",
      "#else",
      "#endif"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 4.6,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 401,
    "id": "CVE-2014-3534",
    "commit_id": "dab6cf55f81a6e16b8147aed9a843e1691dcd318",
    "added_lines": [
      "if ((data ^ PSW_USER_BITS) & ~mask",
      "return -EINVAL",
      "if ((data & PSW_MASK_ASC) == PSW_ASC_HOME",
      "if ((tmp ^ PSW32_USER_BITS) & ~mask",
      "if ((data & PSW32_MASK_ASC) == PSW32_ASC_HOME",
      "return -EINVAL"
    ],
    "removed_lines": [
      "if ((data & ~mask) != PSW_USER_BITS",
      "if ((tmp & ~mask) != PSW32_USER_BITS"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "vuln": "+Priv ",
    "summary": [
      "does not properly restrict address-space control operations in PTRACE_POKEUSR_AREA requests"
    ]
  },
  {
    "index": 413,
    "id": "CVE-2014-3153",
    "commit_id": "e9c243a5a6de0be8e584c604d353412584b592f8",
    "added_lines": [
      "if (uaddr1 == uaddr2",
      "return -EINVAL",
      "if (requeue_pi && match_futex(&key1, &key2))",
      "ret = -EINVAL",
      "goto out_put_keys",
      "if (match_futex(&q.key, &key2))",
      "ret = -EINVAL",
      "goto out_put_keys"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "does not ensure that calls have two different futex addresses"
    ]
  },
  {
    "index": 433,
    "id": "CVE-2014-1737",
    "commit_id": "ef87dbe7614341c2e7bfe8d32fcb7028cc97442c",
    "added_lines": [
      "ptr->kernel_data = NULL",
      "if (ret",
      "return -EFAULT"
    ],
    "removed_lines": [
      "if (ret",
      "return -EFAULT",
      "ptr->kernel_data = NULL"
    ],
    "cause": [
      "Parsing or Interpretation Errors",
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "ioctl call",
      "does not properly handle error conditions during processing of an FDRAWCMD ioctl call"
    ]
  },
  {
    "index": 451,
    "id": "CVE-2014-0185",
    "commit_id": "35ceea928b12373a3b1e3eecdc32ed323223a40d",
    "added_lines": [
      ";                 mode is set to 0660",
      ";listen.mode = 0660"
    ],
    "removed_lines": [
      ";                 mode is set to 0666",
      ";listen.mode = 0666"
    ],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "+Priv ",
    "summary": [
      "permissions"
    ]
  },
  {
    "index": 458,
    "id": "CVE-2014-0038",
    "commit_id": "2def2ef2ae5f3990aabdbe8a755911902707d268",
    "added_lines": [
      "if (compat_get_timespec(&ktspec, timeout",
      "if (datagrams > 0 && compat_put_timespec(&ktspec, timeout"
    ],
    "removed_lines": [
      "if (COMPAT_USE_64BIT_TIME",
      "return __sys_recvmmsg(fd, (struct mmsghdr __user *)mmsg, vlen,",
      "flags | MSG_CMSG_COMPAT,",
      "(struct timespec *) timeout",
      "if (get_compat_timespec(&ktspec, timeout",
      "if (datagrams > 0 && put_compat_timespec(&ktspec, timeout"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "POINTER_OP",
      "RETURN",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "vuln": "+Priv ",
    "summary": [
      "recvmmsg"
    ]
  },
  {
    "index": 468,
    "id": "CVE-2013-6441",
    "commit_id": "f4d5cc8e1f39d132b61e110674528cac727ae0e2",
    "added_lines": [
      "lxc.mount.entry = @LXCTEMPLATEDIR@/lxc-sshd sbin/init none ro,bind 0 0"
    ],
    "removed_lines": [
      "lxc.mount.entry = @LXCTEMPLATEDIR@/lxc-sshd sbin/init none bind 0 0"
    ],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "permissions"
    ]
  },
  {
    "index": 493,
    "id": "CVE-2015-7613",
    "commit_id": "b9a532277938798b53178d5a66af6e2915cb27cf",
    "added_lines": [
      "current_euid_egid(&euid, &egid",
      "new->cuid = new->uid = euid",
      "new->gid = new->cgid = egid"
    ],
    "removed_lines": [
      "current_euid_egid(&euid, &egid",
      "new->cuid = new->uid = euid",
      "new->gid = new->cgid = egid"
    ],
    "cause": [
      "Memory Management",
      "Race Condition or Concurrency"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "race condition",
      "uninitialized data"
    ]
  },
  {
    "index": 496,
    "id": "CVE-2015-6564",
    "commit_id": "5e75f5198769056089fb06c4d738ab0e5abc66f7",
    "added_lines": [
      "int r = sshpam_authok != NULL && sshpam_authok == sshpam_ctxt",
      "sshpam_ctxt = sshpam_authok = NULL",
      "return r"
    ],
    "removed_lines": [
      "return (sshpam_authok == sshpam_ctxt"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "NO_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "RETURN"
    ],
    "vuln": "+Priv ",
    "summary": [
      "use-after-free"
    ]
  },
  {
    "index": 509,
    "id": "CVE-2015-5287",
    "commit_id": "3c1b60cfa62d39e5fff5a53a5bc53dae189e740e",
    "added_lines": [
      "unlink(path",
      "int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_EXCL, 0600"
    ],
    "removed_lines": [
      "int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_TRUNC, 0600"
    ],
    "cause": [
      "Configuration or Permissions Errors",
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "permissions",
      "symlink attack"
    ]
  },
  {
    "index": 513,
    "id": "CVE-2015-5157",
    "commit_id": "9b6e6a8334d56354853f9c255d1395c2ba570e0a",
    "added_lines": [
      "testb\t$3, CS-RIP+8(%rsp",
      "jz\t.Lnmi_from_kernel",
      "SWAPGS",
      "cld",
      "movq\t%rsp, %rdx",
      "movq\tPER_CPU_VAR(cpu_current_top_of_stack), %rsp",
      "pushq\t5*8(%rdx)",
      "pushq\t4*8(%rdx)",
      "pushq\t3*8(%rdx)",
      "pushq\t2*8(%rdx)",
      "pushq\t1*8(%rdx)",
      "pushq   $-1",
      "pushq   %rdi",
      "pushq   %rsi",
      "pushq   (%rdx)",
      "pushq   %rcx",
      "pushq   %rax",
      "pushq   %r8",
      "pushq   %r9",
      "pushq   %r10",
      "pushq   %r11",
      "pushq\t%rbx",
      "pushq\t%rbp",
      "pushq\t%r12",
      "pushq\t%r13",
      "pushq\t%r14",
      "pushq\t%r15",
      "movq\t%rsp, %rdi",
      "movq\t$-1, %rsi",
      "call\tdo_nmi",
      "SWAPGS",
      "jmp\trestore_c_regs_and_iret",
      ".Lnmi_from_kernel:"
    ],
    "removed_lines": [
      "cmpl\t$__KERNEL_CS, 16(%rsp",
      "jne\tfirst_nmi"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "mishandles IRET faults in processing NMIs that occurred during userspace execution"
    ]
  },
  {
    "index": 529,
    "id": "CVE-2015-3339",
    "commit_id": "8b01fc86b9f425899f8a3a8fc1c47d73c2c20543",
    "added_lines": [
      "static void bprm_fill_uid(struct linux_binprm *bprm",
      "struct inode *inode",
      "unsigned int mode",
      "kuid_t uid",
      "kgid_t gid",
      "bprm->cred->euid = current_euid",
      "bprm->cred->egid = current_egid",
      "if (bprm->file->f_path.mnt->mnt_flags & MNT_NOSUID",
      "return",
      "if (task_no_new_privs(current",
      "return",
      "inode = file_inode(bprm->file",
      "mode = READ_ONCE(inode->i_mode",
      "if (!(mode & (S_ISUID|S_ISGID",
      "return",
      "mutex_lock(&inode->i_mutex",
      "mode = inode->i_mode",
      "uid = inode->i_uid",
      "gid = inode->i_gid",
      "mutex_unlock(&inode->i_mutex",
      "if (!kuid_has_mapping(bprm->cred->user_ns, uid) ||",
      "!kgid_has_mapping(bprm->cred->user_ns, gid",
      "return",
      "if (mode & S_ISUID)",
      "bprm->per_clear |= PER_CLEAR_ON_SETID",
      "bprm->cred->euid = uid",
      "if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP))",
      "bprm->per_clear |= PER_CLEAR_ON_SETID",
      "bprm->cred->egid = gid",
      "bprm_fill_uid(bprm"
    ],
    "removed_lines": [
      "struct inode *inode = file_inode(bprm->file",
      "umode_t mode = inode->i_mode",
      "bprm->cred->euid = current_euid",
      "bprm->cred->egid = current_egid",
      "if (!(bprm->file->f_path.mnt->mnt_flags & MNT_NOSUID) &&",
      "!task_no_new_privs(current) &&",
      "kuid_has_mapping(bprm->cred->user_ns, inode->i_uid) &&",
      "kgid_has_mapping(bprm->cred->user_ns, inode->i_gid))",
      "if (mode & S_ISUID)",
      "bprm->per_clear |= PER_CLEAR_ON_SETID",
      "bprm->cred->euid = inode->i_uid",
      "if ((mode & (S_ISGID | S_IXGRP)) == (S_ISGID | S_IXGRP))",
      "bprm->per_clear |= PER_CLEAR_ON_SETID",
      "bprm->cred->egid = inode->i_gid"
    ],
    "cause": [
      "Race Condition or Concurrency"
    ],
    "effect": "+Priv",
    "score": 6.2,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "CONTROL_FLOW",
      "RETURN",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "race condition"
    ]
  },
  {
    "index": 552,
    "id": "CVE-2015-1867",
    "commit_id": "84ac07c",
    "added_lines": [
      "char *path = xml_get_path(xml",
      "if (strcmp(prop_name, XML_ATTR_ID) == 0 && strstr(path, \"/\"XML_CIB_TAG_ACLS\"/\") == NULL)",
      "free(path"
    ],
    "removed_lines": [
      "if (strcmp(prop_name, XML_ATTR_ID) == 0)",
      "char *path = xml_get_path(xml"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "+Priv",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "MEM_FREE",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "does not properly evaluate added nodes"
    ]
  },
  {
    "index": 562,
    "id": "CVE-2015-1344",
    "commit_id": "8ee2a503e102b1a43ec4d83113dc275ab20a869a",
    "added_lines": [
      "bool hostuid_to_ns(uid_t uid, pid_t pid, uid_t *answer",
      "FILE *f",
      "char line[400]",
      "sprintf(line, \"/proc/%d/uid_map\", pid",
      "if ((f = fopen(line, \"r\")) == NULL)",
      "return false",
      "fclose(f",
      "if (*answer == -1",
      "return false",
      "return true",
      "void get_pid_creds(pid_t pid, uid_t *uid, gid_t *gid",
      "char line[400]",
      "uid_t u",
      "gid_t g",
      "FILE *f",
      "sprintf(line, \"/proc/%d/status\", pid",
      "if ((f = fopen(line, \"r\")) == NULL)",
      "fprintf(stderr, \"Error opening %s: %s\\n\", line, strerror(errno",
      "return",
      "while (fgets(line, 400, f))",
      "if (strncmp(line, \"Uid:\", 4) == 0)",
      "if (sscanf(line+4, \"%u\", &u) != 1)",
      "fprintf(stderr, \"bad uid line for pid %u\\n\", pid",
      "fclose(f",
      "return",
      "} else if (strncmp(line, \"Gid:\", 4) == 0)",
      "if (sscanf(line+4, \"%u\", &g) != 1)",
      "fprintf(stderr, \"bad gid line for pid %u\\n\", pid",
      "fclose(f",
      "return",
      "fclose(f",
      "bool may_move_pid(pid_t r, uid_t r_uid, pid_t v",
      "uid_t v_uid, tmpuid",
      "gid_t v_gid",
      "if (r == v",
      "return true",
      "if (r_uid == 0",
      "return true",
      "get_pid_creds(v, &v_uid, &v_gid",
      "if (r_uid == v_uid",
      "return true",
      "if (hostuid_to_ns(r_uid, r, &tmpuid) && tmpuid == 0",
      "&& hostuid_to_ns(v_uid, r, &tmpuid",
      "return true",
      "return false",
      "static bool do_write_pids(pid_t tpid, uid_t tuid, const char *contrl, const char *cg,",
      "const char *file, const char *buf",
      "if (!may_move_pid(tpid, tuid, cred.pid))",
      "fail = true",
      "break",
      "r = do_write_pids(fc->pid, fc->uid, f->controller, f->cgroup, f->file, localbuf"
    ],
    "removed_lines": [
      "static bool do_write_pids(pid_t tpid, const char *contrl, const char *cg, const char *file, const char *buf",
      "r = do_write_pids(fc->pid, f->controller, f->cgroup, f->file, localbuf"
    ],
    "cause": [
      "Configuration or Permissions Errors",
      "Configuration or Permissions Errors"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "FUNC_CALL",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "RETURN",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "RETURN",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "permissions",
      "does not properly check permissions"
    ]
  },
  {
    "index": 563,
    "id": "CVE-2015-1342",
    "commit_id": "a8b6c3e0537e90fba3c55910fd1b7229d54a60a7",
    "added_lines": [
      "#define _GNU_SOURCE",
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "#include <string.h>",
      "#include <unistd.h>",
      "#include <sys/types.h>",
      "#include <sys/socket.h>",
      "#include <linux/un.h>",
      "#include <attr/xattr.h>",
      "#include <utime.h>",
      "#include <sys/stat.h>",
      "#include <sys/mount.h>",
      "#include <libgen.h>",
      "#include <fcntl.h>",
      "#include <errno.h>",
      "void test_open(const char *path",
      "int fd = open(path, O_RDONLY",
      "if (fd >= 0)",
      "fprintf(stderr, \"leak at open of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT)",
      "fprintf(stderr, \"leak at open of %s: errno was %d\\n\", path, errno",
      "exit(1",
      "void test_stat(const char *path",
      "struct stat sb",
      "if (stat(path, &sb) >= 0)",
      "fprintf(stderr, \"leak at stat of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT)",
      "fprintf(stderr, \"leak at stat of %s: errno was %d\\n\", path, errno",
      "exit(1",
      "void test_access(const char *path",
      "if (access(path, O_RDONLY) >= 0)",
      "fprintf(stderr, \"leak at access of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT)",
      "fprintf(stderr, \"leak at access of %s: errno was %d\\n\", path, errno",
      "exit(1",
      "void test_bind(const char *path",
      "int sfd",
      "struct sockaddr_un my_addr, peer_addr",
      "sfd = socket(AF_UNIX, SOCK_STREAM, 0",
      "if (sfd < 0)",
      "fprintf(stderr, \"Failed to open a socket for bind test\\n\"",
      "exit(1",
      "memset(&my_addr, 0, sizeof(struct sockaddr_un",
      "my_addr.sun_family = AF_UNIX",
      "strncpy(my_addr.sun_path, path,",
      "sizeof(my_addr.sun_path) - 1",
      "if (bind(sfd, (struct sockaddr *) &my_addr,",
      "sizeof(struct sockaddr_un)) != -1)",
      "fprintf(stderr, \"leak at bind of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at bind of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "close(sfd",
      "void test_bindmount(const char *path",
      "if (mount(path, path, \"none\", MS_BIND, NULL) == 0)",
      "fprintf(stderr, \"leak at bind mount of %s\\n\", path",
      "exit(1",
      "void test_truncate(const char *path",
      "if (truncate(path, 0) == 0)",
      "fprintf(stderr, \"leak at truncate of %s\\n\", path",
      "exit(1",
      "void test_chdir(const char *path",
      "if (chdir(path) == 0)",
      "fprintf(stderr, \"leak at chdir to %s\\n\", path",
      "exit(1",
      "void test_rename(const char *path",
      "char *d = strdupa(path), *tmpname",
      "d = dirname(d",
      "size_t len = strlen(path) + 30",
      "tmpname = alloca(len",
      "snprintf(tmpname, len, \"%s/%d\", d, (int)getpid",
      "if (rename(path, tmpname) == 0 || errno != ENOENT)",
      "fprintf(stderr, \"leak at rename of %s\\n\", path",
      "exit(1",
      "void test_mkdir(const char *path",
      "size_t len = strlen(path) + 30",
      "char *tmpname = alloca(len",
      "snprintf(tmpname, len, \"%s/%d\", path, (int)getpid",
      "if (mkdir(path, 0755) == 0)",
      "fprintf(stderr, \"leak at mkdir of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT)",
      "fprintf(stderr, \"leak at mkdir of %s, errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "if (mkdir(tmpname, 0755) == 0)",
      "fprintf(stderr, \"leak at mkdir of %s\\n\", tmpname",
      "exit(1",
      "if (errno != ENOENT)",
      "fprintf(stderr, \"leak at mkdir of %s, errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_rmdir(const char *path",
      "size_t len = strlen(path) + 30",
      "char *tmpname = alloca(len",
      "snprintf(tmpname, len, \"%s/%d\", path, (int)getpid",
      "if (rmdir(path) == 0 || errno != ENOENT)",
      "fprintf(stderr, \"leak at rmdir of %s\\n\", path",
      "exit(1",
      "if (rmdir(tmpname) == 0 || errno != ENOENT)",
      "fprintf(stderr, \"leak at rmdir of %s\\n\", tmpname",
      "exit(1",
      "void test_creat(const char *path",
      "if (creat(path, 0755) >= 0)",
      "fprintf(stderr, \"leak at creat of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at creat of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_link(const char *path",
      "char *d = strdupa(path), *tmpname",
      "d = dirname(d",
      "size_t len = strlen(path) + 30",
      "tmpname = alloca(len",
      "snprintf(tmpname, len, \"%s/%d\", d, (int)getpid",
      "if (link(path, tmpname) == 0)",
      "fprintf(stderr, \"leak at link of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at link of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "if (link(tmpname, path) == 0)",
      "fprintf(stderr, \"leak at link (2) of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at link (2) of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_unlink(const char *path",
      "if (unlink(path) == 0)",
      "fprintf(stderr, \"leak at unlink of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at unlink of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_symlink(const char *path",
      "char *d = strdupa(path), *tmpname",
      "d = dirname(d",
      "size_t len = strlen(path) + 30",
      "tmpname = alloca(len",
      "snprintf(tmpname, len, \"%s/%d\", d, (int)getpid",
      "if (symlink(tmpname, path) == 0)",
      "fprintf(stderr, \"leak at symlink of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at symlink of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "if (symlink(path, tmpname) == 0)",
      "fprintf(stderr, \"leak at symlink (2) of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at symlink (2) of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_readlink(const char *path",
      "char *dest = alloca(2 * strlen(path",
      "if (readlink(path, dest, 2 * strlen(path)) >= 0)",
      "fprintf(stderr, \"leak at readlink of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at readlink of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_chmod(const char *path",
      "if (chmod(path, 0755) == 0)",
      "fprintf(stderr, \"leak at chmod of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at chmod of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_chown(const char *path",
      "if (chown(path, 0, 0) == 0)",
      "fprintf(stderr, \"leak at chown of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at chown of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_lchown(const char *path",
      "if (lchown(path, 0, 0) == 0)",
      "fprintf(stderr, \"leak at lchown of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at lchown of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_mknod(const char *path",
      "if (mknod(path, 0755, makedev(0, 0)) == 0)",
      "fprintf(stderr, \"leak at mknod of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at mknod of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_chroot(const char *path",
      "if (chroot(path) == 0)",
      "fprintf(stderr, \"leak at chroot of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at chroot of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_xattrs(const char *path",
      "char value[200]",
      "if (getxattr(path, \"security.selinux\", value, 200) >= 0)",
      "fprintf(stderr, \"leak at getxattr of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at getxattr of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_utimes(const char *path",
      "struct utimbuf times",
      "times.actime = 0",
      "times.modtime = 0",
      "if (utime(path, &times) == 0)",
      "fprintf(stderr, \"leak at utime of %s\\n\", path",
      "exit(1",
      "if (errno != ENOENT && errno != ENOSYS)",
      "fprintf(stderr, \"leak at utime of %s: errno was %s\\n\", path, strerror(errno",
      "exit(1",
      "void test_openat(const char *path",
      "char *d = strdupa(path), *f, *tmpname",
      "int fd, fd2",
      "f = basename(d",
      "d = dirname(d",
      "fd = open(d, O_RDONLY",
      "if (fd < 0)",
      "fprintf(stderr, \"Error in openat test: could not open parent dir\\n\"",
      "fprintf(stderr, \"(this is expected on the second run)\\n\"",
      "return",
      "fd2 = openat(fd, f, O_RDONLY",
      "if (fd2 >= 0 || errno != ENOENT)",
      "fprintf(stderr, \"leak at openat of %s\\n\", f",
      "exit(1",
      "size_t len = strlen(path) + strlen(\"/cgroup.procs\") + 1",
      "tmpname = alloca(len",
      "snprintf(tmpname, len, \"%s/cgroup.procs\", f",
      "fd2 = openat(fd, tmpname, O_RDONLY",
      "if (fd2 >= 0 || errno != ENOENT)",
      "fprintf(stderr, \"leak at openat of %s\\n\", tmpname",
      "exit(1",
      "close(fd",
      "int main(int argc, char *argv[]",
      "char *procspath",
      "size_t len",
      "if (geteuid() != 0)",
      "fprintf(stderr, \"Run me as root\\n\"",
      "exit(1",
      "if (argc != 2)",
      "fprintf(stderr, \"Usage: %s [lxcfs_test_cgroup_path]\\n\", argv[0]",
      "exit(1",
      "len = strlen(argv[1]) + strlen(\"/cgroup.procs\") + 1",
      "procspath = alloca(len",
      "snprintf(procspath, len, \"%s/cgroup.procs\", argv[1]",
      "test_open(argv[1]",
      "test_open(procspath",
      "test_stat(argv[1]",
      "test_stat(procspath",
      "test_access(argv[1]",
      "test_access(procspath",
      "test_bind(argv[1]",
      "test_bind(procspath",
      "test_bindmount(argv[1]",
      "test_bindmount(procspath",
      "test_truncate(argv[1]",
      "test_truncate(procspath",
      "test_chdir(argv[1]",
      "test_chdir(procspath",
      "test_rename(argv[1]",
      "test_rename(procspath",
      "test_mkdir(argv[1]",
      "test_mkdir(procspath",
      "test_rmdir(argv[1]",
      "test_rmdir(procspath",
      "test_creat(argv[1]",
      "test_creat(procspath",
      "test_link(argv[1]",
      "test_link(procspath",
      "test_unlink(argv[1]",
      "test_unlink(procspath",
      "test_symlink(argv[1]",
      "test_symlink(procspath",
      "test_readlink(argv[1]",
      "test_readlink(procspath",
      "test_chmod(argv[1]",
      "test_chmod(procspath",
      "test_chown(argv[1]",
      "test_chown(procspath",
      "test_lchown(argv[1]",
      "test_lchown(procspath",
      "test_mknod(argv[1]",
      "test_mknod(procspath",
      "test_chroot(argv[1]",
      "test_chroot(procspath",
      "test_xattrs(argv[1]",
      "test_xattrs(procspath",
      "test_utimes(argv[1]",
      "test_utimes(procspath",
      "test_openat(argv[1]",
      "printf(\"All tests passed\\n\"",
      "return 0"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "+Priv",
    "score": 4.6,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "does not properly enforce directory escapes"
    ]
  },
  {
    "index": 569,
    "id": "CVE-2015-0856",
    "commit_id": "4cfed6b0a625593fb43876f04badc4dd99799d86",
    "added_lines": [
      "env.insert(QStringLiteral(\"KDE_DEBUG\"), QStringLiteral(\"1\""
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "+Priv",
    "score": 4.6,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "does not properly disable the KDE crash handler"
    ]
  },
  {
    "index": 571,
    "id": "CVE-2015-0278",
    "commit_id": "66ab38918c911bcff025562cf06237d7fedaba0c",
    "added_lines": [
      "if (options->flags & (UV_PROCESS_SETUID | UV_PROCESS_SETGID))",
      "SAVE_ERRNO(setgroups(0, NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 10.0,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 635,
    "id": "CVE-2016-9566",
    "commit_id": "c29557dec91eba2306f5fb11b8da4474ba63f8c4",
    "added_lines": [
      "int fh",
      "struct stat st",
      "if ((fh = open(log_file, O_RDWR|O_APPEND|O_CREAT|O_NOFOLLOW, S_IRUSR|S_IWUSR)) == -1)",
      "if (daemon_mode == FALSE",
      "printf(\"Warning: Cannot open log file '%s' for writing\\n\", log_file",
      "return NULL",
      "log_fp = fdopen(fh, \"a+\"",
      "if (daemon_mode == FALSE",
      "if ((fstat(fh, &st)) == -1)",
      "log_fp = NULL",
      "close(fh",
      "if (daemon_mode == FALSE",
      "printf(\"Warning: Cannot fstat log file '%s'\\n\", log_file",
      "return NULL",
      "if (st.st_nlink != 1 || (st.st_mode & S_IFMT) != S_IFREG)",
      "log_fp = NULL",
      "close(fh",
      "if (daemon_mode == FALSE",
      "printf(\"Warning: log file '%s' has an invalid mode\\n\", log_file",
      "return NULL",
      "int open_debug_log(void",
      "int fh",
      "struct stat st",
      "if ((fh = open(debug_file, O_RDWR|O_APPEND|O_CREAT|O_NOFOLLOW, S_IRUSR|S_IWUSR)) == -1",
      "return ERROR",
      "if((debug_file_fp = fdopen(fh, \"a+\")) == NULL",
      "return ERROR",
      "if ((fstat(fh, &st)) == -1)",
      "debug_file_fp = NULL",
      "close(fh",
      "return ERROR",
      "if (st.st_nlink != 1 || (st.st_mode & S_IFMT) != S_IFREG)",
      "debug_file_fp = NULL",
      "close(fh",
      "(void)fcntl(fh, F_SETFD, FD_CLOEXEC"
    ],
    "removed_lines": [
      "log_fp = fopen(log_file, \"a+\"",
      "if (daemon_mode == FALSE)",
      "int open_debug_log(void)",
      "if((debug_file_fp = fopen(debug_file, \"a+\")) == NULL",
      "(void)fcntl(fileno(debug_file_fp), F_SETFD, FD_CLOEXEC"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "RETURN",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "symlink attack"
    ]
  },
  {
    "index": 667,
    "id": "CVE-2016-7912",
    "commit_id": "38740a5b87d53ceb89eb2c970150f6e94e00373a",
    "added_lines": [
      "bool kiocb_has_eventfd = io_data->kiocb->ki_flags & IOCB_EVENTFD",
      "if (io_data->ffs->ffs_eventfd && !kiocb_has_eventfd"
    ],
    "removed_lines": [
      "if (io_data->ffs->ffs_eventfd &&",
      "!(io_data->kiocb->ki_flags & IOCB_EVENTFD",
      "io_data->kiocb->private = NULL"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "+Priv",
    "score": 9.3,
    "safe_features": [
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "use-after-free"
    ]
  },
  {
    "index": 669,
    "id": "CVE-2016-7910",
    "commit_id": "77da160530dd1dc94f6ae15a981f24e5f0021e84",
    "added_lines": [
      "seqf->private = NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "+Priv",
    "score": 9.3,
    "safe_features": [
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "use-after-free"
    ]
  },
  {
    "index": 697,
    "id": "CVE-2016-7097",
    "commit_id": "073931017b49d9458aa351605b43a7e34598caef",
    "added_lines": [
      "extern int posix_acl_update_mode(struct inode *, umode_t *, struct posix_acl **"
    ],
    "removed_lines": [],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "+Priv",
    "score": 3.6,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "permissions"
    ]
  },
  {
    "index": 700,
    "id": "CVE-2016-6787",
    "commit_id": "f63a8daa5812afef4f06c962351687e1ff9ccb2b",
    "added_lines": [
      "static struct perf_event_context *perf_event_ctx_lock(struct perf_event *event",
      "struct perf_event_context *ctx",
      "again:",
      "rcu_read_lock",
      "ctx = ACCESS_ONCE(event->ctx",
      "if (!atomic_inc_not_zero(&ctx->refcount))",
      "rcu_read_unlock",
      "goto again",
      "rcu_read_unlock",
      "mutex_lock(&ctx->mutex",
      "if (event->ctx != ctx)",
      "mutex_unlock(&ctx->mutex",
      "put_ctx(ctx",
      "goto again",
      "return ctx",
      "static void perf_event_ctx_unlock(struct perf_event *event,",
      "struct perf_event_context *ctx",
      "mutex_unlock(&ctx->mutex",
      "put_ctx(ctx",
      "static void _perf_event_disable(struct perf_event *event",
      "void perf_event_disable(struct perf_event *event",
      "struct perf_event_context *ctx",
      "ctx = perf_event_ctx_lock(event",
      "_perf_event_disable(event",
      "perf_event_ctx_unlock(event, ctx",
      "static void _perf_event_enable(struct perf_event *event",
      "void perf_event_enable(struct perf_event *event",
      "struct perf_event_context *ctx",
      "ctx = perf_event_ctx_lock(event",
      "_perf_event_enable(event",
      "perf_event_ctx_unlock(event, ctx",
      "static int _perf_event_refresh(struct perf_event *event, int refresh",
      "_perf_event_enable(event",
      "int perf_event_refresh(struct perf_event *event, int refresh",
      "struct perf_event_context *ctx",
      "int ret",
      "ctx = perf_event_ctx_lock(event",
      "ret = _perf_event_refresh(event, refresh",
      "perf_event_ctx_unlock(event, ctx",
      "return ret",
      "mutex_lock_nested(&owner->perf_event_mutex, SINGLE_DEPTH_NESTING",
      "int n = 0, size = 0, ret",
      "u64 values[5]",
      "lockdep_assert_held(&ctx->mutex",
      "return -EFAULT",
      "return -EFAULT",
      "struct perf_event_context *ctx",
      "int ret",
      "ctx = perf_event_ctx_lock(event",
      "ret = perf_read_hw(event, buf, count",
      "perf_event_ctx_unlock(event, ctx",
      "return ret",
      "static void _perf_event_reset(struct perf_event *event",
      "lockdep_assert_held(&ctx->mutex",
      "static long _perf_ioctl(struct perf_event *event, unsigned int cmd, unsigned long arg",
      "func = _perf_event_enable",
      "func = _perf_event_disable",
      "func = _perf_event_reset",
      "return _perf_event_refresh(event, arg",
      "static long perf_ioctl(struct file *file, unsigned int cmd, unsigned long arg",
      "struct perf_event *event = file->private_data",
      "struct perf_event_context *ctx",
      "long ret",
      "ctx = perf_event_ctx_lock(event",
      "ret = _perf_ioctl(event, cmd, arg",
      "perf_event_ctx_unlock(event, ctx",
      "return ret",
      "struct perf_event_context *ctx",
      "list_for_each_entry(event, &current->perf_event_list, owner_entry)",
      "ctx = perf_event_ctx_lock(event",
      "perf_event_for_each_child(event, _perf_event_enable",
      "perf_event_ctx_unlock(event, ctx",
      "struct perf_event_context *ctx",
      "list_for_each_entry(event, &current->perf_event_list, owner_entry)",
      "ctx = perf_event_ctx_lock(event",
      "perf_event_for_each_child(event, _perf_event_disable",
      "perf_event_ctx_unlock(event, ctx",
      "static void mutex_lock_double(struct mutex *a, struct mutex *b",
      "if (b < a",
      "swap(a, b",
      "mutex_lock(a",
      "mutex_lock_nested(b, SINGLE_DEPTH_NESTING",
      "struct perf_event_context *ctx, *uninitialized_var(gctx",
      "gctx = group_leader->ctx",
      "mutex_lock_double(&gctx->mutex, &ctx->mutex",
      "} else",
      "mutex_lock(&ctx->mutex",
      "if (move_group)",
      "mutex_unlock(&gctx->mutex",
      "put_ctx(gctx",
      "mutex_lock_double(&src_ctx->mutex, &dst_ctx->mutex",
      "mutex_unlock(&src_ctx->mutex"
    ],
    "removed_lines": [
      "void perf_event_disable(struct perf_event *event",
      "void perf_event_enable(struct perf_event *event",
      "int perf_event_refresh(struct perf_event *event, int refresh",
      "perf_event_enable(event",
      "mutex_lock(&owner->perf_event_mutex",
      "int n = 0, size = 0, ret = -EFAULT",
      "u64 values[5]",
      "mutex_lock(&ctx->mutex",
      "goto unlock",
      "ret = -EFAULT",
      "goto unlock",
      "unlock:",
      "mutex_unlock(&ctx->mutex",
      "return perf_read_hw(event, buf, count",
      "static void perf_event_reset(struct perf_event *event",
      "WARN_ON_ONCE(ctx->parent_ctx",
      "mutex_lock(&ctx->mutex",
      "mutex_unlock(&ctx->mutex",
      "static long perf_ioctl(struct file *file, unsigned int cmd, unsigned long arg",
      "struct perf_event *event = file->private_data",
      "func = perf_event_enable",
      "func = perf_event_disable",
      "func = perf_event_reset",
      "return perf_event_refresh(event, arg",
      "list_for_each_entry(event, &current->perf_event_list, owner_entry",
      "perf_event_for_each_child(event, perf_event_enable",
      "list_for_each_entry(event, &current->perf_event_list, owner_entry",
      "perf_event_for_each_child(event, perf_event_disable",
      "struct perf_event_context *ctx",
      "struct perf_event_context *gctx = group_leader->ctx",
      "mutex_lock(&gctx->mutex",
      "mutex_unlock(&gctx->mutex",
      "put_ctx(gctx",
      "mutex_lock(&ctx->mutex",
      "mutex_lock(&src_ctx->mutex",
      "mutex_unlock(&src_ctx->mutex",
      "mutex_lock(&dst_ctx->mutex"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "RETURN",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "internal bug"
    ]
  },
  {
    "index": 701,
    "id": "CVE-2016-6663",
    "commit_id": "347eeefbfc658c8531878218487d729f4e020805",
    "added_lines": [
      "my_disable_copystat_in_redel= 1"
    ],
    "removed_lines": [],
    "cause": [
      "Race Condition or Concurrency",
      "Configuration or Permissions Errors"
    ],
    "effect": "+Priv",
    "score": 4.4,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "permissions",
      "race condition"
    ]
  },
  {
    "index": 752,
    "id": "CVE-2016-5195",
    "commit_id": "19be0eaffa3ac7d8eb6784ad9bdbc7d67ed8e619",
    "added_lines": [
      "static inline bool can_follow_write_pte(pte_t pte, unsigned int flags",
      "return pte_write(pte) ||",
      "((flags & FOLL_FORCE) && (flags & FOLL_COW) && pte_dirty(pte",
      "if ((flags & FOLL_WRITE) && !can_follow_write_pte(pte, flags))"
    ],
    "removed_lines": [
      "if ((flags & FOLL_WRITE) && !pte_write(pte))"
    ],
    "cause": [
      "Race Condition or Concurrency"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "+Priv ",
    "summary": [
      "race condition"
    ]
  },
  {
    "index": 838,
    "id": "CVE-2016-2069",
    "commit_id": "71b3c126e61177eb693423f2e18a1914205b165e",
    "added_lines": [
      "if (current->active_mm != mm)",
      "smp_mb",
      "smp_mb",
      "if (current->mm)",
      "} else",
      "smp_mb"
    ],
    "removed_lines": [
      "if (current->active_mm != mm",
      "if (current->mm",
      "else"
    ],
    "cause": [
      "Race Condition or Concurrency"
    ],
    "effect": "+Priv",
    "score": 4.4,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "race condition"
    ]
  },
  {
    "index": 845,
    "id": "CVE-2016-1202",
    "commit_id": "9a2e2b365d061ec10cd861391fd5b1344af7194d",
    "added_lines": [
      "'atom/common/lib/reset-search-paths.coffee',"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 5",
      "Uncategorized Cluster 5"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "Untrusted search path vulnerability",
      "untrusted search path vulnerability"
    ]
  },
  {
    "index": 854,
    "id": "CVE-2015-8966",
    "commit_id": "76cc404bfdc0d419c720de4daaf2584542734f42",
    "added_lines": [
      "static long do_locks(unsigned int fd, unsigned int cmd,",
      "struct oabi_flock64 user",
      "mm_segment_t fs",
      "long ret",
      "if (copy_from_user(&user, (struct oabi_flock64 __user *)arg,",
      "sizeof(user",
      "return -EFAULT",
      "kernel.l_type\t= user.l_type",
      "kernel.l_whence\t= user.l_whence",
      "kernel.l_start\t= user.l_start",
      "kernel.l_len\t= user.l_len",
      "kernel.l_pid\t= user.l_pid",
      "fs = get_fs",
      "set_fs(KERNEL_DS",
      "ret = sys_fcntl64(fd, cmd, (unsigned long)&kernel",
      "set_fs(fs",
      "if (!ret && (cmd == F_GETLK64 || cmd == F_OFD_GETLK))",
      "user.l_type\t= kernel.l_type",
      "user.l_whence\t= kernel.l_whence",
      "user.l_start\t= kernel.l_start",
      "user.l_len\t= kernel.l_len",
      "user.l_pid\t= kernel.l_pid",
      "if (copy_to_user((struct oabi_flock64 __user *)arg,",
      "&user, sizeof(user",
      "ret = -EFAULT",
      "return ret",
      "asmlinkage long sys_oabi_fcntl64(unsigned int fd, unsigned int cmd,",
      "unsigned long arg",
      "return do_locks(fd, cmd, arg",
      "default:",
      "return sys_fcntl64(fd, cmd, arg"
    ],
    "removed_lines": [
      "asmlinkage long sys_oabi_fcntl64(unsigned int fd, unsigned int cmd,",
      "struct oabi_flock64 user",
      "mm_segment_t fs = USER_DS;",
      "unsigned long local_arg = arg",
      "int ret",
      "if (copy_from_user(&user, (struct oabi_flock64 __user *)arg,",
      "sizeof(user",
      "return -EFAULT",
      "kernel.l_type\t= user.l_type",
      "kernel.l_whence\t= user.l_whence",
      "kernel.l_start\t= user.l_start",
      "kernel.l_len\t= user.l_len",
      "kernel.l_pid\t= user.l_pid",
      "local_arg = (unsigned long)&kernel",
      "fs = get_fs",
      "set_fs(KERNEL_DS",
      "ret = sys_fcntl64(fd, cmd, local_arg",
      "switch (cmd)",
      "case F_GETLK64:",
      "if (!ret)",
      "user.l_type\t= kernel.l_type",
      "user.l_whence\t= kernel.l_whence",
      "user.l_start\t= kernel.l_start",
      "user.l_len\t= kernel.l_len",
      "user.l_pid\t= kernel.l_pid",
      "if (copy_to_user((struct oabi_flock64 __user *)arg,",
      "&user, sizeof(user",
      "ret = -EFAULT",
      "case F_SETLK64:",
      "case F_SETLKW64:",
      "set_fs(fs",
      "return ret"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "FUNC_CALL",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN",
      "FUNC_CALL",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN"
    ],
    "vuln": "+Priv ",
    "summary": [
      "fcntl64 system call"
    ]
  },
  {
    "index": 908,
    "id": "CVE-2015-2686",
    "commit_id": "4de930efc23b92ddf88ce91c405ee645fe6e27ea",
    "added_lines": [
      "if (unlikely(!access_ok(VERIFY_READ, buff, len",
      "return -EFAULT",
      "if (unlikely(!access_ok(VERIFY_WRITE, ubuf, size",
      "return -EFAULT"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "recvfrom"
    ]
  },
  {
    "index": 915,
    "id": "CVE-2014-9888",
    "commit_id": "0ea1ec713f04bdfac343c9702b21cd3a7c711826",
    "added_lines": [
      "pgprot_t prot = __get_dma_pgprot(attrs, PAGE_KERNEL",
      "pgprot_t prot = __get_dma_pgprot(attrs, PAGE_KERNEL"
    ],
    "removed_lines": [
      "pgprot_t prot = __get_dma_pgprot(attrs, pgprot_kernel",
      "pgprot_t prot = __get_dma_pgprot(attrs, pgprot_kernel"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "internal bug"
    ]
  },
  {
    "index": 916,
    "id": "CVE-2014-9870",
    "commit_id": "a4780adeefd042482f624f5e0d577bf9cdcbb760",
    "added_lines": [
      "thread->tp_value[0] = regs->ARM_r0",
      "regs->uregs[reg] = current_thread_info()->tp_value[0]"
    ],
    "removed_lines": [
      "thread->tp_value = regs->ARM_r0",
      "regs->uregs[reg] = current_thread_info()->tp_value"
    ],
    "cause": [
      "Uncategorized Cluster 4",
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 9.3,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "internal bug",
      "does not properly consider"
    ]
  },
  {
    "index": 917,
    "id": "CVE-2014-9803",
    "commit_id": "5a0fdfada3a2aa50d7b947a2e958bf00cbe0d830",
    "added_lines": [
      "unsigned long vm_flags = VM_READ | VM_WRITE | VM_EXEC"
    ],
    "removed_lines": [
      "unsigned long vm_flags = VM_READ | VM_WRITE"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 9.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "+Priv ",
    "summary": [
      "internal bug"
    ]
  },
  {
    "index": 999,
    "id": "CVE-2017-15868",
    "commit_id": "71bb99a02b32b4cc4265118e85f6035ca72923f0",
    "added_lines": [
      "if (!l2cap_is_socket(sock",
      "return -EBADFD"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "does not ensure that an l2cap socket is available"
    ]
  },
  {
    "index": 1000,
    "id": "CVE-2017-15649",
    "commit_id": "4971613c1639d8e5f102c4e797c3bf8f83a5a69e",
    "added_lines": [
      "if (po->fanout)",
      "ret = -EINVAL",
      "goto out_unlock"
    ],
    "removed_lines": [
      "if (po->fanout",
      "return -EINVAL"
    ],
    "cause": [
      "Memory Management",
      "Race Condition or Concurrency"
    ],
    "effect": "+Priv",
    "score": 4.6,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "use-after-free",
      "race condition"
    ]
  },
  {
    "index": 1011,
    "id": "CVE-2017-15102",
    "commit_id": "2fae9e5a7babada041e2e161699ade2447a01989",
    "added_lines": [
      "usb_set_intfdata (interface, dev",
      "retval = usb_register_dev (interface, &tower_class",
      "if (retval)",
      "dev_err(idev, \"Not able to get a minor for this device.\\n\"",
      "usb_set_intfdata (interface, NULL",
      "goto error",
      "dev->minor = interface->minor",
      "dev_info(&interface->dev, \"LEGO USB Tower #%d now attached to major \"",
      "\"%d minor %d\\n\", (dev->minor - LEGO_USB_TOWER_MINOR_BASE),",
      "USB_MAJOR, dev->minor"
    ],
    "removed_lines": [
      "usb_set_intfdata (interface, dev",
      "retval = usb_register_dev (interface, &tower_class",
      "if (retval)",
      "dev_err(idev, \"Not able to get a minor for this device.\\n\"",
      "usb_set_intfdata (interface, NULL",
      "goto error",
      "dev->minor = interface->minor",
      "dev_info(&interface->dev, \"LEGO USB Tower #%d now attached to major \"",
      "\"%d minor %d\\n\", (dev->minor - LEGO_USB_TOWER_MINOR_BASE),",
      "USB_MAJOR, dev->minor"
    ],
    "cause": [
      "Race Condition or Concurrency",
      "Uncategorized Cluster 10"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "race condition",
      "null pointer dereference"
    ]
  },
  {
    "index": 1189,
    "id": "CVE-2017-12146",
    "commit_id": "6265539776a0810b7ce6398c27866ddb9c6bd154",
    "added_lines": [
      "char *driver_override, *old, *cp",
      "device_lock(dev",
      "old = pdev->driver_override",
      "device_unlock(dev",
      "ssize_t len",
      "device_lock(dev",
      "len = sprintf(buf, \"%s\\n\", pdev->driver_override",
      "device_unlock(dev",
      "return len"
    ],
    "removed_lines": [
      "char *driver_override, *old = pdev->driver_override, *cp",
      "return sprintf(buf, \"%s\\n\", pdev->driver_override"
    ],
    "cause": [
      "Race Condition or Concurrency"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "race condition"
    ]
  },
  {
    "index": 1215,
    "id": "CVE-2017-10663",
    "commit_id": "15d3042a937c13f5d9244241c7a9c8416ff6e82a",
    "added_lines": [
      "unsigned int main_segs, blocks_per_seg",
      "int i",
      "main_segs = le32_to_cpu(raw_super->segment_count_main",
      "blocks_per_seg = sbi->blocks_per_seg",
      "for (i = 0; i < NR_CURSEG_NODE_TYPE; i++)",
      "if (le32_to_cpu(ckpt->cur_node_segno[i]) >= main_segs ||",
      "le16_to_cpu(ckpt->cur_node_blkoff[i]) >= blocks_per_seg",
      "return 1",
      "for (i = 0; i < NR_CURSEG_DATA_TYPE; i++)",
      "if (le32_to_cpu(ckpt->cur_data_segno[i]) >= main_segs ||",
      "le16_to_cpu(ckpt->cur_data_blkoff[i]) >= blocks_per_seg",
      "return 1"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 1216,
    "id": "CVE-2017-10662",
    "commit_id": "b9dd46188edc2f0d1f37328637860bb65a771124",
    "added_lines": [
      "#define F2FS_MAX_SEGMENT       ((16 * 1024 * 1024) / 2"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 1279,
    "id": "CVE-2017-8284",
    "commit_id": "30663fd26c0307e414622c7a8607fbc04f92ec14",
    "added_lines": [
      "if (s->pc - pc_start > 14)",
      "goto illegal_op"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "does not limit the instruction size"
    ]
  },
  {
    "index": 1375,
    "id": "CVE-2017-6001",
    "commit_id": "321027c1fe77f892f4ea07846aeae08cefbbb290",
    "added_lines": [
      "static struct perf_event_context *",
      "__perf_event_ctx_lock_double(struct perf_event *group_leader,",
      "struct perf_event_context *ctx",
      "struct perf_event_context *gctx",
      "again:",
      "rcu_read_lock",
      "gctx = READ_ONCE(group_leader->ctx",
      "if (!atomic_inc_not_zero(&gctx->refcount))",
      "rcu_read_unlock",
      "goto again",
      "rcu_read_unlock",
      "mutex_lock_double(&gctx->mutex, &ctx->mutex",
      "if (group_leader->ctx != gctx)",
      "mutex_unlock(&ctx->mutex",
      "mutex_unlock(&gctx->mutex",
      "put_ctx(gctx",
      "goto again",
      "return gctx",
      "gctx = __perf_event_ctx_lock_double(group_leader, ctx",
      "if (!(group_leader->group_caps & PERF_EV_CAP_SOFTWARE))",
      "if (gctx != ctx)",
      "err = -EINVAL",
      "goto err_locked",
      "} else",
      "perf_event_ctx_unlock(group_leader, gctx",
      "move_group = 0",
      "perf_event_ctx_unlock(group_leader, gctx",
      "perf_event_ctx_unlock(group_leader, gctx"
    ],
    "removed_lines": [
      "gctx = group_leader->ctx",
      "mutex_lock_double(&gctx->mutex, &ctx->mutex",
      "mutex_unlock(&gctx->mutex",
      "mutex_unlock(&gctx->mutex"
    ],
    "cause": [
      "Race Condition or Concurrency"
    ],
    "effect": "+Priv",
    "score": 7.6,
    "safe_features": [
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "race condition"
    ]
  },
  {
    "index": 1392,
    "id": "CVE-2017-5551",
    "commit_id": "497de07d89c1410d76a15bec2bb41f24a2a89f31",
    "added_lines": [
      "error = posix_acl_update_mode(inode,",
      "&inode->i_mode, &acl",
      "if (error",
      "return error"
    ],
    "removed_lines": [
      "error = posix_acl_equiv_mode(acl, &inode->i_mode",
      "if (error < 0",
      "return 0",
      "if (error == 0",
      "acl = NULL"
    ],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "+Priv",
    "score": 3.6,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW"
    ],
    "vuln": "+Priv ",
    "summary": [
      "permissions"
    ]
  },
  {
    "index": 1410,
    "id": "CVE-2017-5207",
    "commit_id": "5d43fdcd215203868d440ffc42036f5f5ffc89fc",
    "added_lines": [
      "arg[0] = \"/bin/sh\""
    ],
    "removed_lines": [
      "if (!cfg.shell",
      "cfg.shell = guess_shell",
      "if (!cfg.shell)",
      "fprintf(stderr, \"Error: no POSIX shell found, please use --shell command line option\\n\"",
      "exit(1",
      "arg[0] = cfg.shell"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARRAY_ACCESS"
    ],
    "vuln": "+Priv ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 1436,
    "id": "CVE-2016-10345",
    "commit_id": "e5b4b0824d6b648525b4bf63d9fa37e5beeae441",
    "added_lines": [
      "require 'tmpdir'",
      "Dir.mktmpdir do |safe_tmpdir|",
      "@pcre_is_installed = begin",
      "File.open(\"#{safe_tmpdir}/passenger-check.c\", 'w') do |f|",
      "f.puts(\"#include <pcre.h>\"",
      "end",
      "Dir.chdir(\"#{safe_tmpdir}\") do",
      "# Nginx checks for PCRE in multiple places...",
      "system(\"(gcc -I/usr/local/include -I/usr/include/pcre \" <<",
      "\"-I/usr/pkg/include -I/opt/local/include \" <<",
      "\"-c passenger-check.c) >/dev/null 2>/dev/null\"",
      "end",
      "ensure",
      "File.unlink(\"#{safe_tmpdir}/passenger-check.c\") rescue nil",
      "File.unlink(\"#{safe_tmpdir}/passenger-check.o\") rescue nil"
    ],
    "removed_lines": [
      "PhusionPassenger.require_passenger_lib 'utils/tmpio'",
      "@pcre_is_installed = begin",
      "File.open('/tmp/passenger-check.c', 'w') do |f|",
      "f.puts(\"#include <pcre.h>\"",
      "end",
      "Dir.chdir('/tmp') do",
      "# Nginx checks for PCRE in multiple places...",
      "system(\"(gcc -I/usr/local/include -I/usr/include/pcre \" <<",
      "\"-I/usr/pkg/include -I/opt/local/include \" <<",
      "\"-c passenger-check.c) >/dev/null 2>/dev/null\"",
      "ensure",
      "File.unlink('/tmp/passenger-check.c') rescue nil",
      "File.unlink('/tmp/passenger-check.o') rescue nil"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "+Priv",
    "score": 4.6,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 1510,
    "id": "CVE-2016-10010",
    "commit_id": "c76fac666ea038753294f2ac94d310f8adece9ce",
    "added_lines": [
      "!no_port_forwarding_flag && !options.disable_forwarding &&",
      "use_privsep)",
      "|| no_port_forwarding_flag || options.disable_forwarding ||",
      "!use_privsep)"
    ],
    "removed_lines": [
      "!no_port_forwarding_flag && !options.disable_forwarding)",
      "|| no_port_forwarding_flag || options.disable_forwarding)"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 6.9,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "+Priv ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 1520,
    "id": "CVE-2016-9754",
    "commit_id": "59643d1535eb220668692a5359de22545af579f6",
    "added_lines": [
      "nr_pages = DIV_ROUND_UP(size, BUF_PAGE_SIZE",
      "if (nr_pages < 2",
      "nr_pages = 2",
      "size = nr_pages * BUF_PAGE_SIZE"
    ],
    "removed_lines": [
      "size = DIV_ROUND_UP(size, BUF_PAGE_SIZE",
      "size *= BUF_PAGE_SIZE",
      "if (size < BUF_PAGE_SIZE * 2",
      "size = BUF_PAGE_SIZE * 2",
      "nr_pages = DIV_ROUND_UP(size, BUF_PAGE_SIZE"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "FUNC_CALL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "mishandles certain integer calculations"
    ]
  },
  {
    "index": 1610,
    "id": "CVE-2015-9004",
    "commit_id": "c3c87e770458aa004bd7ed3f29945ff436fd6511",
    "added_lines": [
      "if (group_leader->ctx->task != ctx->task",
      "goto err_context",
      "if (group_leader->cpu != event->cpu"
    ],
    "removed_lines": [
      "cpuctx->ctx.type = cpu_context",
      "if (group_leader->ctx->type != ctx->type"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "+Priv",
    "score": 9.3,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "mishandles counter grouping"
    ]
  },
  {
    "index": 1634,
    "id": "CVE-2015-3887",
    "commit_id": "9ab7dbeb3baff67a51d0c5e71465c453be0890b5#diff-803c5170888b8642f2a97e5e9423d399",
    "added_lines": [
      "#ifndef SUPER_SECURE",
      "#endif",
      "#ifdef SUPER_SECURE",
      "memcpy(own_dir, \"/dev/null/\", 2",
      "#else",
      "#endif"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 5",
      "Uncategorized Cluster 5"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "Untrusted search path vulnerability",
      "untrusted search path vulnerability"
    ]
  },
  {
    "index": 1648,
    "id": "CVE-2014-9922",
    "commit_id": "69c433ed2ecd2d3264efd7afec4439524b319121",
    "added_lines": [
      "#define FILESYSTEM_MAX_STACK_DEPTH 2",
      "int s_stack_depth"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 9.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "includes an overlayfs layer"
    ]
  },
  {
    "index": 1925,
    "id": "CVE-2018-7738",
    "commit_id": "75f03badd7ed9f1dd951863d75e756883d3acc55",
    "added_lines": [
      "local oldifs=$IFS",
      "IFS=$'\\n'",
      "COMPREPLY=( $( compgen -W '$(findmnt -lno TARGET | sed \"s/\\([[:blank:]]\\)/\\\\\\\\\\1/g\")' -- \"$cur\" )",
      "IFS=$oldifs"
    ],
    "removed_lines": [
      "local DEVS_MPOINTS",
      "DEVS_MPOINTS=\"$(mount | awk '{print $1, $3}')\"",
      "COMPREPLY=( $(compgen -W \"$DEVS_MPOINTS\" -- $cur)",
      "return 0"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITHMETIC",
      "RETURN"
    ],
    "vuln": "+Priv ",
    "summary": [
      "embedding shell commands in a mountpoint name, which is mishandled during a umount command"
    ]
  },
  {
    "index": 2021,
    "id": "CVE-2017-7500",
    "commit_id": "c815822c8bdb138066ff58c624ae83e3a12ebfa9",
    "added_lines": [
      "tf=\"${RPMTEST}\"/opt/foo",
      "rm -rf \"${RPMTEST}\"/opt/*",
      "rm -rf \"${TOPDIR}\"",
      "runroot rpmbuild --quiet -bb \\",
      "--define \"ver 1.0\" \\",
      "--define \"filetype datadir\" \\",
      "--define \"filedata README1\" \\",
      "--define \"user $(id -u -n)\" \\",
      "/data/SPECS/replacetest.spec",
      "runroot rpm -U /build/RPMS/noarch/replacetest-1.0-1.noarch.rpm",
      "mv \"${RPMTEST}\"/opt/foo \"${RPMTEST}\"/opt/was",
      "ln -s was \"${RPMTEST}\"/opt/foo",
      "runroot rpm -Vv replacetest",
      "[.........    /opt/foo",
      ".........    /opt/foo/README1",
      ".........    /opt/goo",
      ".........    /opt/zoo",
      "],",
      "[]",
      "AT_CLEANUP",
      "AT_SETUP([directory replaced with an invalid directory symlink]",
      "AT_KEYWORDS([verify]",
      "AT_CHECK([",
      "RPMDB_CLEAR",
      "RPMDB_INIT",
      "tf=\"${RPMTEST}\"/opt/foo",
      "rm -rf \"${RPMTEST}\"/opt/*",
      "rm -rf \"${TOPDIR}\"",
      "runroot rpmbuild --quiet -bb \\",
      "--define \"ver 1.0\" \\",
      "--define \"filetype datadir\" \\",
      "--define \"filedata README1\" \\",
      "/data/SPECS/replacetest.spec",
      "runroot rpm -U /build/RPMS/noarch/replacetest-1.0-1.noarch.rpm",
      "mv \"${RPMTEST}\"/opt/foo \"${RPMTEST}\"/opt/was",
      "ln -s was \"${RPMTEST}\"/opt/foo",
      "runroot rpm -Vv --nouser --nogroup replacetest",
      "],",
      "[1],",
      "[....L....    /opt/foo",
      ".........    /opt/foo/README1",
      ".........    /opt/goo",
      ".........    /opt/zoo"
    ],
    "removed_lines": [
      "runroot rpm -U --nodeps --noscripts --ignorearch --ignoreos \\",
      "/data/RPMS/hello-1.0-1.i386.rpm",
      "mv \"${RPMTEST}\"/usr/share/doc/hello-1.0 \"${RPMTEST}\"/usr/share/doc/hello-1.0.orig",
      "ln -s hello-1.0.orig \"${RPMTEST}\"/usr/share/doc/hello-1.0",
      "runroot rpm -Vva --nodeps --nouser --nogroup",
      "rm -rf \"${RPMTEST}\"/usr/share/doc/",
      "[.........    /usr/local/bin/hello",
      ".........    /usr/share/doc/hello-1.0",
      ".........  d /usr/share/doc/hello-1.0/FAQ"
    ],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "permissions"
    ]
  },
  {
    "index": 2027,
    "id": "CVE-2016-7035",
    "commit_id": "5d71e65049",
    "added_lines": [
      "if (uid_client != 0)",
      "qb_ipcs_connection_auth_set(c, -1, gid_cluster, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP"
    ],
    "removed_lines": [
      "static uid_t uid_server = 0",
      "uid_server = getuid",
      "if(gid_cluster != 0 && gid_client != 0)",
      "uid_t best_uid = -1;",
      "if(uid_client == 0 || uid_server == 0) {",
      "best_uid = QB_MAX(uid_client, uid_server",
      "crm_trace(\"Allowing user %u to clean up after disconnect\", best_uid",
      "qb_ipcs_connection_auth_set(c, best_uid, gid_cluster, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "authorization flaw"
    ]
  },
  {
    "index": 2321,
    "id": "CVE-2013-1959",
    "commit_id": "e3211c120a85b792978bcb4be7b2886df18d27f0",
    "added_lines": [
      "if (uid_eq(uid, file->f_cred->fsuid",
      "if (gid_eq(gid, file->f_cred->fsgid"
    ],
    "removed_lines": [
      "if (uid_eq(uid, current_fsuid",
      "if (gid_eq(gid, current_fsgid"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "+Priv",
    "score": 3.7,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "vuln": "+Priv ",
    "summary": [
      "does not have appropriate capability requirements for the uid_map and gid_map files"
    ]
  },
  {
    "index": 2358,
    "id": "CVE-2016-6663",
    "commit_id": "4e5473862e6852b0f3802b0cd0c6fa10b5253291",
    "added_lines": [
      "The new file might not be created with the right stats depending",
      "on how myisamchk is run, so we must copy file stats from old to new.",
      "error= mi_repair_by_sort(param, info, filename, rep_quick, FALSE",
      "error= mi_repair_parallel(param, info, filename, rep_quick, FALSE",
      "error= mi_repair(param, info, filename, rep_quick, FALSE",
      "error= mi_repair_by_sort(param, info, filename, 1, FALSE",
      "error= mi_sort_index(param, info, filename, FALSE"
    ],
    "removed_lines": [
      "error=mi_repair_by_sort(param,info,filename,rep_quick",
      "error=mi_repair_parallel(param,info,filename,rep_quick",
      "error=mi_repair(param, info,filename,rep_quick",
      "error=mi_repair_by_sort(param,info,filename,1",
      "error=mi_sort_index(param,info,filename"
    ],
    "cause": [
      "Race Condition or Concurrency",
      "Configuration or Permissions Errors"
    ],
    "effect": "+Priv",
    "score": 4.4,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "permissions",
      "race condition"
    ]
  },
  {
    "index": 2389,
    "id": "CVE-2017-15649",
    "commit_id": "008ba2a13f2d04c947adc536d19debb8fe66f110",
    "added_lines": [
      "spin_lock(&po->bind_lock",
      "if (po->running &&",
      "match->type == type &&",
      "spin_unlock(&po->bind_lock",
      "if (err && !refcount_read(&match->sk_ref))",
      "list_del(&match->list",
      "kfree(match"
    ],
    "removed_lines": [
      "err = -EINVAL",
      "if (!po->running",
      "goto out",
      "if (match->type == type &&"
    ],
    "cause": [
      "Memory Management",
      "Race Condition or Concurrency"
    ],
    "effect": "+Priv",
    "score": 4.6,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "use-after-free",
      "race condition"
    ]
  },
  {
    "index": 2492,
    "id": "CVE-2017-7500",
    "commit_id": "f2d3be2a8741234faaa96f5fd05fdfdc75779a79",
    "added_lines": [
      "--define \"user $(id -u -n)\" \\",
      "--define \"user $(id -u -n)\" \\",
      "AT_SETUP([upgrade invalid locally symlinked directory]",
      "AT_KEYWORDS([install]",
      "AT_CHECK([",
      "RPMDB_CLEAR",
      "RPMDB_INIT",
      "tf=\"${RPMTEST}\"/opt/foo",
      "rm -rf \"${RPMTEST}\"/opt/*",
      "rm -rf \"${TOPDIR}\"",
      "runroot rpmbuild --quiet -bb \\",
      "--define \"ver 1.0\" \\",
      "--define \"filetype datadir\" \\",
      "--define \"filedata README1\" \\",
      "/data/SPECS/replacetest.spec",
      "runroot rpmbuild --quiet -bb \\",
      "--define \"ver 2.0\" \\",
      "--define \"filetype datadir\" \\",
      "--define \"filedata README2\" \\",
      "/data/SPECS/replacetest.spec",
      "mkdir \"${RPMTEST}\"/opt/f00f",
      "ln -s f00f \"${RPMTEST}\"/opt/foo",
      "runroot rpm -U /build/RPMS/noarch/replacetest-1.0-1.noarch.rpm",
      "test -L \"${tf}\" && test -d \"${tf}\" && runroot rpm -U /build/RPMS/noarch/replacetest-2.0-1.noarch.rpm",
      "test -d \"${tf}\"",
      "],",
      "[0],",
      "[],",
      "[]",
      "AT_CLEANUP"
    ],
    "removed_lines": [],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "permissions"
    ]
  },
  {
    "index": 3301,
    "id": "CVE-2012-2764",
    "commit_id": "1ee4f604e68b1e719394df9e8b845aee944d7ef3",
    "added_lines": [
      "TEST_F(ProfileSyncServiceSessionTest, DISABLED_TabNodePoolNonEmpty)",
      "TEST_F(ProfileSyncServiceSessionTest, DISABLED_MissingHeaderAndTab)",
      "TEST_F(ProfileSyncServiceSessionTest, DISABLED_MultipleHeaders)",
      "TEST_F(ProfileSyncServiceSessionTest, DISABLED_CorruptedForeign)"
    ],
    "removed_lines": [
      "TEST_F(ProfileSyncServiceSessionTest, TabNodePoolNonEmpty)",
      "TEST_F(ProfileSyncServiceSessionTest, MissingHeaderAndTab)",
      "TEST_F(ProfileSyncServiceSessionTest, MultipleHeaders)",
      "TEST_F(ProfileSyncServiceSessionTest, CorruptedForeign)"
    ],
    "cause": [
      "Uncategorized Cluster 5",
      "Uncategorized Cluster 5"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "+Priv ",
    "summary": [
      "Untrusted search path vulnerability",
      "untrusted search path vulnerability"
    ]
  },
  {
    "index": 3371,
    "id": "CVE-2011-3098",
    "commit_id": "8a0f990d4a22d1d6a6c1ba37227321b7729f40fe",
    "added_lines": [
      "<message name=\"IDS_GET_HELP_USING_CHROME\" desc=\"Text of the button which takes the user to the Chrome help page.\">",
      "Get help with using Chrome",
      "</message>"
    ],
    "removed_lines": [
      "<if expr=\"pp_ifdef('use_titlecase')\">",
      "<message name=\"IDS_GET_HELP_USING_CHROME\" desc=\"Text of the button which takes the user to the Chrome help page.\">",
      "Get Help With Using Chrome",
      "</message>",
      "</if>",
      "<if expr=\"not pp_ifdef('use_titlecase')\">",
      "<message name=\"IDS_GET_HELP_USING_CHROME\" desc=\"Text of the button which takes the user to the Chrome help page.\">",
      "Get help with using Chrome",
      "</message>",
      "</if>"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "+Priv",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "+Priv ",
    "summary": [
      "incorrect search path for the Windows Media Player plug-in"
    ]
  },
  {
    "index": 3958,
    "id": "CVE-2017-5099",
    "commit_id": "66b99f3fe60dce77f079cc9c07164f6a34dbea37",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "+Priv",
    "score": 6.8,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "+Priv ",
    "summary": [
      "insufficient validation of untrusted input in ppapi plugins"
    ]
  }
]