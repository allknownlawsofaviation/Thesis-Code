[
  {
    "index": 14,
    "id": "CVE-2012-4444",
    "commit_id": "70789d7052239992824628db8133de08dc78e593",
    "added_lines": [
      "if (prev &&",
      "(FRAG6_CB(prev)->offset + prev->len) - offset > 0",
      "goto discard_fq",
      "if (next && FRAG6_CB(next)->offset < end",
      "goto discard_fq",
      "discard_fq:",
      "fq_kill(fq"
    ],
    "removed_lines": [
      "static void frag_kfree_skb(struct netns_frags *nf, struct sk_buff *skb",
      "atomic_sub(skb->truesize, &nf->mem",
      "kfree_skb(skb",
      "if (prev)",
      "int i = (FRAG6_CB(prev)->offset + prev->len) - offset",
      "if (i > 0)",
      "offset += i",
      "if (end <= offset",
      "goto err",
      "if (!pskb_pull(skb, i",
      "goto err",
      "if (skb->ip_summed != CHECKSUM_UNNECESSARY",
      "skb->ip_summed = CHECKSUM_NONE",
      "while (next && FRAG6_CB(next)->offset < end)",
      "int i = end - FRAG6_CB(next)->offset;",
      "if (i < next->len)",
      "if (!pskb_pull(next, i",
      "goto err",
      "FRAG6_CB(next)->offset += i;",
      "fq->q.meat -= i",
      "if (next->ip_summed != CHECKSUM_UNNECESSARY",
      "next->ip_summed = CHECKSUM_NONE",
      "break",
      "} else",
      "struct sk_buff *free_it = next",
      "next = next->next",
      "if (prev",
      "prev->next = next",
      "else",
      "fq->q.fragments = next",
      "fq->q.meat -= free_it->len",
      "frag_kfree_skb(fq->q.net, free_it"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 40,
    "id": "CVE-2012-2123",
    "commit_id": "d52fc5dde171f030170a6cb78034d166b13c9445",
    "added_lines": [
      "if (!cap_issubset(new->cap_permitted, old->cap_permitted",
      "bprm->per_clear |= PER_CLEAR_ON_SETID"
    ],
    "removed_lines": [],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 7.2,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not properly handle the use of file system capabilities (aka fcaps) for implementing a privileged executable file"
    ]
  },
  {
    "index": 77,
    "id": "CVE-2011-4127",
    "commit_id": "ec8013beddd717d1740cfefb1a9b900deef85462",
    "added_lines": [
      "if (!r && ti->len != i_size_read(bdev->bd_inode) >> SECTOR_SHIFT",
      "r = scsi_verify_blk_ioctl(NULL, cmd"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.6,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "ioctl call",
      "does not properly restrict SG_IO ioctl calls"
    ]
  },
  {
    "index": 82,
    "id": "CVE-2011-4080",
    "commit_id": "bfdc0b497faa82a0ba2f9dddcf109231dd519fcc",
    "added_lines": [
      "#ifdef CONFIG_PRINTK",
      "static int proc_dmesg_restrict(struct ctl_table *table, int write,",
      "void __user *buffer, size_t *lenp, loff_t *ppos",
      "#endif",
      ".proc_handler\t= proc_dmesg_restrict,",
      "#ifdef CONFIG_PRINTK",
      "static int proc_dmesg_restrict(struct ctl_table *table, int write,",
      "void __user *buffer, size_t *lenp, loff_t *ppos",
      "if (write && !capable(CAP_SYS_ADMIN",
      "return -EPERM",
      "return proc_dointvec_minmax(table, write, buffer, lenp, ppos",
      "#endif"
    ],
    "removed_lines": [
      ".proc_handler\t= proc_dointvec_minmax,"
    ],
    "cause": [
      "Missing Authentication or Confirmation"
    ],
    "effect": "Bypass",
    "score": 4.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not require the CAP_SYS_ADMIN capability to modify the dmesg_restrict value"
    ]
  },
  {
    "index": 102,
    "id": "CVE-2011-2486",
    "commit_id": "7e4ab8e1189846041f955e6c83f72bc1624e7a98",
    "added_lines": [
      "_(NPPVpluginUrlRequestsDisplayedBool",
      "_(NPPVpluginWantsAllNetworkStreams",
      "_(NPPVpluginNativeAccessibleAtkPlugId",
      "_(NPPVpluginCancelSrcStream",
      "_(NPPVSupportsAdvancedKeyHandling",
      "_(NPNVprivateModeBool",
      "_(NPNVsupportsAdvancedKeyHandling"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not properly provide access to NPNVprivateModeBool variable settings"
    ]
  },
  {
    "index": 107,
    "id": "CVE-2011-1833",
    "commit_id": "764355487ea220fdc2faf128d577d7f679b91f97",
    "added_lines": [
      "ecryptfs_opt_check_dev_ruid,",
      "{ecryptfs_opt_check_dev_ruid, \"ecryptfs_check_dev_ruid\"},",
      "static int ecryptfs_parse_options(struct ecryptfs_sb_info *sbi, char *options,",
      "uid_t *check_ruid",
      "case ecryptfs_opt_check_dev_ruid:",
      "break",
      "uid_t check_ruid",
      "rc = ecryptfs_parse_options(sbi, raw_data, &check_ruid",
      "if (check_ruid && path.dentry->d_inode->i_uid != current_uid())",
      "rc = -EPERM",
      "printk(KERN_ERR \"Mount of device (uid: %d) not owned by \"",
      "\"requested user (uid: %d)\\n\",",
      "path.dentry->d_inode->i_uid, current_uid",
      "goto out_free"
    ],
    "removed_lines": [
      "static int ecryptfs_parse_options(struct ecryptfs_sb_info *sbi, char *options",
      "rc = ecryptfs_parse_options(sbi, raw_data"
    ],
    "cause": [
      "Race Condition or Concurrency",
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 3.3,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "permissions",
      "race condition"
    ]
  },
  {
    "index": 121,
    "id": "CVE-2011-0006",
    "commit_id": "867c20265459d30a01b021a9c1e81fb4c5832aa9",
    "added_lines": [
      "if (!entry->lsm[lsm_rule].rule",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 1.9,
    "safe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "leveraging an administrator's addition of an IMA rule for LSM"
    ]
  },
  {
    "index": 149,
    "id": "CVE-2013-6383",
    "commit_id": "f856567b930dfcdbc3323261bf77240ccdde01f5",
    "added_lines": [
      "if (!capable(CAP_SYS_RAWIO",
      "return -EPERM"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.9,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "ioctl call"
    ]
  },
  {
    "index": 175,
    "id": "CVE-2013-4270",
    "commit_id": "2433c8f094a008895e66f25bd1773cdb01c91d01",
    "added_lines": [
      "uid_eq(root_uid, current_euid()))",
      "if (in_egroup_p(root_gid))"
    ],
    "removed_lines": [
      "uid_eq(root_uid, current_uid()))",
      "if (gid_eq(root_gid, current_gid()))"
    ],
    "cause": [
      "Configuration or Permissions Errors",
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 3.6,
    "safe_features": [
      "FUNC_CALL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "CONTROL_FLOW"
    ],
    "vuln": "Bypass ",
    "summary": [
      "permissions",
      "does not properly determine uid and gid values"
    ]
  },
  {
    "index": 211,
    "id": "CVE-2013-2929",
    "commit_id": "d049f74f2dbe71354d43d393ac3a188947811348",
    "added_lines": [
      "if (dumpable != SUID_DUMP_USER &&",
      "!ptrace_has_cap(__task_cred(task)->user_ns, mode))"
    ],
    "removed_lines": [
      "if (!dumpable && !ptrace_has_cap(__task_cred(task)->user_ns, mode))"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "Bypass +Info",
    "score": 3.3,
    "safe_features": [
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "Bypass +Info ",
    "summary": [
      "does not properly use the get_dumpable function"
    ]
  },
  {
    "index": 241,
    "id": "CVE-2013-1958",
    "commit_id": "92f28d973cce45ef5823209aab3138eb45d8b349",
    "added_lines": [
      "#include <linux/pid_namespace.h>",
      "if ((creds->pid == task_tgid_vnr(current) ||",
      "ns_capable(current->nsproxy->pid_ns->user_ns, CAP_SYS_ADMIN)) &&"
    ],
    "removed_lines": [
      "if ((creds->pid == task_tgid_vnr(current) || nsown_capable(CAP_SYS_ADMIN)) &&"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 1.9,
    "safe_features": [
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly enforce capability requirements for controlling the PID value associated with a UNIX domain socket"
    ]
  },
  {
    "index": 242,
    "id": "CVE-2013-1957",
    "commit_id": "132c94e31b8bca8ea921f9f96a57d684fa4ae0a9",
    "added_lines": [
      "#define CL_UNPRIVILEGED\t\t0x40"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 4.7,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not properly restrict changes to the MNT_READONLY flag"
    ]
  },
  {
    "index": 243,
    "id": "CVE-2013-1956",
    "commit_id": "3151527ee007b73a0ebd296010f1c0454a919c7d",
    "added_lines": [
      "if (current_chrooted",
      "return -EPERM"
    ],
    "removed_lines": [],
    "cause": [
      "Improper Input Validation"
    ],
    "effect": "Bypass",
    "score": 2.1,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not check whether a chroot directory exists that differs from the namespace root directory"
    ]
  },
  {
    "index": 270,
    "id": "CVE-2013-0914",
    "commit_id": "2ca39528c01a933f6689cd6505ce65bd6d68a530",
    "added_lines": [
      "#ifdef SA_RESTORER",
      "ka->sa.sa_restorer = NULL",
      "#endif"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 3.6,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "preserves the value of the sa_restorer field across an exec operation"
    ]
  },
  {
    "index": 279,
    "id": "CVE-2013-0268",
    "commit_id": "c903f0456bc69176912dee6dd25c6a66ee1aed00",
    "added_lines": [
      "if (!capable(CAP_SYS_RAWIO",
      "return -EPERM"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 6.2,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 314,
    "id": "CVE-2011-1585",
    "commit_id": "4ff67b720c02c36e54d55b88c2931879b7db1cd2",
    "added_lines": [
      "cifs_find_smb_ses(struct TCP_Server_Info *server, struct smb_vol *vol",
      "list_for_each_entry(ses, &server->smb_ses_list, smb_ses_list)",
      "switch (server->secType)",
      "case Kerberos:",
      "if (vol->linux_uid != ses->linux_uid",
      "continue",
      "break",
      "default:",
      "if (strncmp(ses->userName, vol->username,",
      "MAX_USERNAME_SIZE",
      "continue",
      "if (strlen(vol->username) != 0 &&",
      "strncmp(ses->password, vol->password,",
      "MAX_PASSWORD_SIZE",
      "continue",
      "ses = cifs_find_smb_ses(server, volume_info"
    ],
    "removed_lines": [
      "cifs_find_smb_ses(struct TCP_Server_Info *server, char *username",
      "struct list_head *tmp",
      "list_for_each(tmp, &server->smb_ses_list)",
      "ses = list_entry(tmp, struct cifsSesInfo, smb_ses_list",
      "if (strncmp(ses->userName, username, MAX_USERNAME_SIZE",
      "continue",
      "ses = cifs_find_smb_ses(server, volume_info->username"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 3.3,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly determine the associations between users and sessions"
    ]
  },
  {
    "index": 317,
    "id": "CVE-2011-1019",
    "commit_id": "8909c9ad8ff03611c9c96c9a92656213e4bb495b",
    "added_lines": [
      "MODULE_ALIAS_NETDEV(\"sit0\""
    ],
    "removed_lines": [
      "MODULE_ALIAS(\"sit0\""
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 1.9,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "leveraging the CAP_NET_ADMIN capability"
    ]
  },
  {
    "index": 320,
    "id": "CVE-2014-9419",
    "commit_id": "f647d7c155f069c1a068030255c300663516420e",
    "added_lines": [
      "savesegment(es, prev->es",
      "if (unlikely(next->es | prev->es",
      "loadsegment(es, next->es",
      "savesegment(ds, prev->ds",
      "if (unlikely(next->ds | prev->ds",
      "loadsegment(ds, next->ds"
    ],
    "removed_lines": [
      "savesegment(es, prev->es",
      "if (unlikely(next->es | prev->es",
      "loadsegment(es, next->es",
      "savesegment(ds, prev->ds",
      "if (unlikely(next->ds | prev->ds",
      "loadsegment(ds, next->ds"
    ],
    "cause": [
      "Parsing or Interpretation Errors",
      "Race Condition or Concurrency"
    ],
    "effect": "Bypass +Info",
    "score": 2.1,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass +Info ",
    "summary": [
      "does not ensure that Thread Local Storage (TLS) descriptors are loaded before proceeding with other steps",
      "Thread Local Storage"
    ]
  },
  {
    "index": 335,
    "id": "CVE-2014-8133",
    "commit_id": "41bdc78544b8a93a9c6814b8bbbfef966272abbe",
    "added_lines": [
      "static bool tls_desc_okay(const struct user_desc *info",
      "if (LDT_empty(info",
      "return true",
      "if (!info->seg_32bit",
      "return false",
      "return true",
      "if (!tls_desc_okay(&info",
      "return -EINVAL",
      "int i",
      "for (i = 0; i < count / sizeof(struct user_desc); i++",
      "if (!tls_desc_okay(info + i",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Race Condition or Concurrency"
    ],
    "effect": "Bypass",
    "score": 2.1,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "RETURN",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "Thread Local Storage"
    ]
  },
  {
    "index": 338,
    "id": "CVE-2014-8109",
    "commit_id": "3f1693d558d0758f829c8b53993f1749ddf6ffcb",
    "added_lines": [
      "typedef struct",
      "lua_authz_provider_spec *spec",
      "apr_array_header_t *args",
      "} lua_authz_provider_func",
      "lua_authz_provider_func *func = apr_pcalloc(cmd->pool, sizeof(lua_authz_provider_func",
      "func->spec = spec",
      "func->args = apr_array_make(cmd->pool, 2, sizeof(const char *",
      "APR_ARRAY_PUSH(func->args, const char *) = arg",
      "const lua_authz_provider_func *prov_func = parsed_require_line",
      "const lua_authz_provider_spec *prov_spec = prov_func->spec",
      "if (prov_func->args)",
      "if (!lua_checkstack(L, prov_func->args->nelts))",
      "for (i = 0; i < prov_func->args->nelts; i++)",
      "const char *arg = APR_ARRAY_IDX(prov_func->args, i, const char *",
      "nargs = prov_func->args->nelts"
    ],
    "removed_lines": [
      "apr_array_header_t *args",
      "spec->args = apr_array_make(cmd->pool, 2, sizeof(const char *",
      "APR_ARRAY_PUSH(spec->args, const char *) = arg",
      "const lua_authz_provider_spec *prov_spec = parsed_require_line",
      "if (prov_spec->args)",
      "if (!lua_checkstack(L, prov_spec->args->nelts))",
      "for (i = 0; i < prov_spec->args->nelts; i++)",
      "const char *arg = APR_ARRAY_IDX(prov_spec->args, i, const char *",
      "nargs = prov_spec->args->nelts"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not support an httpd configuration in which the same Lua authorization provider is used with different arguments within different contexts"
    ]
  },
  {
    "index": 358,
    "id": "CVE-2014-5206",
    "commit_id": "a6138db815df5ee542d848318e5dae681590fccd",
    "added_lines": [
      "#define MNT_USER_SETTABLE_MASK  (MNT_NOSUID | MNT_NODEV | MNT_NOEXEC \\",
      "| MNT_NOATIME | MNT_NODIRATIME | MNT_RELATIME \\",
      "| MNT_READONLY"
    ],
    "removed_lines": [
      "#define MNT_PROPAGATION_MASK\t(MNT_SHARED | MNT_UNBINDABLE"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.2,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not maintain the MNT_LOCK_READONLY bit across a remount of a bind mount"
    ]
  },
  {
    "index": 363,
    "id": "CVE-2014-4668",
    "commit_id": "fbda667221c51f0aa476a02366e0cf66cb012f88",
    "added_lines": [
      "cherokee_buffer_is_empty (&conn->validator->user) ||",
      "cherokee_buffer_is_empty (&conn->validator->passwd"
    ],
    "removed_lines": [
      "cherokee_buffer_is_empty (&conn->validator->user"
    ],
    "cause": [
      "Uncategorized Cluster 4",
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly consider unauthenticated-bind semantics",
      "does not properly consider"
    ]
  },
  {
    "index": 378,
    "id": "CVE-2014-4157",
    "commit_id": "137f7df8cead00688524c82360930845396b8a21",
    "added_lines": [
      "_TIF_SYSCALL_AUDIT | \\",
      "_TIF_SYSCALL_TRACEPOINT | _TIF_SECCOMP"
    ],
    "removed_lines": [
      "_TIF_SYSCALL_AUDIT | _TIF_SYSCALL_TRACEPOINT"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.6,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not configure _TIF_SECCOMP checks on the fast system-call path"
    ]
  },
  {
    "index": 381,
    "id": "CVE-2014-4014",
    "commit_id": "23adbe12ef7d3d4195e80800ab36b37bee28cd03",
    "added_lines": [
      "bool capable_wrt_inode_uidgid(const struct inode *inode, int cap",
      "return ns_capable(ns, cap) && kuid_has_mapping(ns, inode->i_uid) &&",
      "kgid_has_mapping(ns, inode->i_gid",
      "EXPORT_SYMBOL(capable_wrt_inode_uidgid"
    ],
    "removed_lines": [
      "bool inode_capable(const struct inode *inode, int cap",
      "return ns_capable(ns, cap) && kuid_has_mapping(ns, inode->i_uid",
      "EXPORT_SYMBOL(inode_capable"
    ],
    "cause": [
      "Uncategorized Cluster 4",
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 6.2,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly consider that namespaces are inapplicable to inodes",
      "does not properly consider"
    ]
  },
  {
    "index": 425,
    "id": "CVE-2014-2209",
    "commit_id": "851fff90a9b7461df2393af32239ba217bc25946",
    "added_lines": [
      "#include <grp.h>",
      "initgroups(pw->pw_name, pw->pw_gid"
    ],
    "removed_lines": [],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "permissions"
    ]
  },
  {
    "index": 471,
    "id": "CVE-2013-5705",
    "commit_id": "f8d441cd25172fdfe5b613442fedfc0da3cc333d",
    "added_lines": [
      "if ((transfer_encoding != NULL)&&(m_strcasestr(transfer_encoding, \"chunked\") != NULL))"
    ],
    "removed_lines": [
      "if ((transfer_encoding != NULL)&&(strstr(transfer_encoding, \"chunked\") != NULL))"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 473,
    "id": "CVE-2013-2182",
    "commit_id": "15f72c1ee5e0afad20232bdf0fcecab8d62a5d89",
    "added_lines": [
      "if (mk_security_check_url(sr->uri_processed) < 0)"
    ],
    "removed_lines": [
      "if (mk_security_check_url(sr->uri) < 0)"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 5.8,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 483,
    "id": "CVE-2015-8660",
    "commit_id": "acff81ec2c79492b180fade3c2894425cd35a545",
    "added_lines": [
      "err = ovl_copy_up(dentry",
      "if (!err)",
      "upperdentry = ovl_dentry_upper(dentry"
    ],
    "removed_lines": [
      "upperdentry = ovl_dentry_upper(dentry",
      "if (upperdentry)",
      "} else",
      "err = ovl_copy_up_last(dentry, attr, false"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.2,
    "safe_features": [
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "attempts to merge distinct setattr operations"
    ]
  },
  {
    "index": 484,
    "id": "CVE-2015-8569",
    "commit_id": "09ccfd238e5a0e670d8178cf50180ea81ae09ae1",
    "added_lines": [
      "if (sockaddr_len < sizeof(struct sockaddr_pppox",
      "return -EINVAL",
      "if (sockaddr_len < sizeof(struct sockaddr_pppox",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass +Info",
    "score": 1.9,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass +Info ",
    "summary": [
      "do not verify an address length"
    ]
  },
  {
    "index": 534,
    "id": "CVE-2015-3185",
    "commit_id": "cd2b7a26c776b0754fb98426a67804fd48118708",
    "added_lines": [
      "APR_HOOK_LINK(force_authn",
      "AP_IMPLEMENT_HOOK_RUN_FIRST(int,force_authn,",
      "(request_rec *r), (r), DECLINED",
      "AP_DECLARE(int) ap_some_authn_required(request_rec *r",
      "int access_status",
      "switch (ap_satisfies(r))",
      "case SATISFY_ALL:",
      "case SATISFY_NOSPEC:",
      "if ((access_status = ap_run_access_checker(r)) != OK)",
      "break",
      "access_status = ap_run_access_checker_ex(r",
      "if (access_status == DECLINED)",
      "return TRUE",
      "break",
      "case SATISFY_ANY:",
      "if ((access_status = ap_run_access_checker(r)) == OK)",
      "break",
      "access_status = ap_run_access_checker_ex(r",
      "if (access_status == DECLINED)",
      "return TRUE",
      "break",
      "return FALSE",
      "if (access_status == DECLINED",
      "|| (access_status == OK && ap_run_force_authn(r) == OK))",
      "else if (access_status == OK)",
      "ap_log_rerror(APLOG_MARK, APLOG_TRACE3, 0, r,",
      "\"request authorized without authentication by \"",
      "\"access_checker_ex hook: %s\", r->uri",
      "else",
      "return decl_die(access_status, \"check access\", r",
      "if (access_status == DECLINED",
      "|| (access_status == OK && ap_run_force_authn(r) == OK))",
      "else if (access_status == OK)",
      "ap_log_rerror(APLOG_MARK, APLOG_TRACE3, 0, r,",
      "\"request authorized without authentication by \"",
      "\"access_checker_ex hook: %s\", r->uri",
      "else",
      "return decl_die(access_status, \"check access\", r"
    ],
    "removed_lines": [
      "if (access_status == OK)",
      "ap_log_rerror(APLOG_MARK, APLOG_TRACE3, 0, r,",
      "\"request authorized without authentication by \"",
      "\"access_checker_ex hook: %s\", r->uri",
      "else if (access_status != DECLINED)",
      "return decl_die(access_status, \"check access\", r",
      "else",
      "if (access_status == OK)",
      "ap_log_rerror(APLOG_MARK, APLOG_TRACE3, 0, r,",
      "\"request authorized without authentication by \"",
      "\"access_checker_ex hook: %s\", r->uri",
      "else if (access_status != DECLINED)",
      "return decl_die(access_status, \"check access\", r",
      "else"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not consider that a Require directive may be associated with an authorization setting rather than an authentication setting"
    ]
  },
  {
    "index": 536,
    "id": "CVE-2015-2925",
    "commit_id": "397d425dc26da728396e66d392d5dcb8dac30c37",
    "added_lines": [
      "static bool path_connected(const struct path *path",
      "struct vfsmount *mnt = path->mnt",
      "if (mnt->mnt_root == mnt->mnt_sb->s_root",
      "return true",
      "return is_subdir(path->dentry, mnt->mnt_root",
      "if (unlikely(!path_connected(&nd->path",
      "return -ENOENT",
      "static int follow_dotdot(struct nameidata *nd",
      "if (unlikely(!path_connected(&nd->path",
      "return -ENOENT",
      "return 0",
      "return follow_dotdot(nd"
    ],
    "removed_lines": [
      "static void follow_dotdot(struct nameidata *nd",
      "follow_dotdot(nd"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 6.9,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly handle rename actions inside a bind mount"
    ]
  },
  {
    "index": 539,
    "id": "CVE-2015-2830",
    "commit_id": "956421fbb74c3a6261903f3836c0740187cf038b",
    "added_lines": [
      "jmp  int_ret_from_sys_call"
    ],
    "removed_lines": [
      "testl $_TIF_IA32, TI_flags(%rcx)\t# 32-bit compat task needs IRET",
      "jnz  int_ret_from_sys_call",
      "RESTORE_TOP_OF_STACK %rdi, -ARGOFFSET",
      "jmp ret_from_sys_call\t\t\t# go to the SYSRET fastpath"
    ],
    "cause": [
      "Uncategorized Cluster 1"
    ],
    "effect": "Bypass",
    "score": 1.9,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not prevent the TS_COMPAT flag from reaching a user-mode task"
    ]
  },
  {
    "index": 545,
    "id": "CVE-2015-2694",
    "commit_id": "e3b5a5e5267818c97750b266df50b6a3d4649604",
    "added_lines": [
      "(*respond)(arg, EINVAL, NULL, NULL, NULL",
      "(*respond)(arg, EINVAL, NULL, NULL, NULL"
    ],
    "removed_lines": [
      "(*respond)(arg, 0, NULL, NULL, NULL",
      "(*respond)(arg, 0, NULL, NULL, NULL"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 5.8,
    "safe_features": [
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "do not properly track whether a client's request has been validated"
    ]
  },
  {
    "index": 559,
    "id": "CVE-2015-1593",
    "commit_id": "4e7c22d447bb6d7e37bfe39ff658486ae78e8d77",
    "added_lines": [
      "unsigned long random_variable = 0",
      "random_variable = (unsigned long) get_random_int",
      "random_variable &= STACK_RND_MASK"
    ],
    "removed_lines": [
      "unsigned int random_variable = 0",
      "random_variable = get_random_int() & STACK_RND_MASK"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "incorrect data type"
    ]
  },
  {
    "index": 586,
    "id": "CVE-2014-9721",
    "commit_id": "b6e3e0f601e2c1ec1f3aac880ed6a3fe63043e51",
    "added_lines": [
      "Copyright (c) 2007-2014 Contributors as noted in the AUTHORS file",
      "#if defined (ZMQ_HAVE_WINDOWS",
      "#   include <winsock2.h>",
      "#   include <ws2tcpip.h>",
      "#   include <stdexcept>",
      "#   define close closesocket",
      "#else",
      "#   include <sys/socket.h>",
      "#   include <netinet/in.h>",
      "#   include <arpa/inet.h>",
      "#   include <unistd.h>",
      "#endif",
      "struct sockaddr_in ip4addr",
      "int s",
      "ip4addr.sin_family = AF_INET",
      "ip4addr.sin_port = htons (9998",
      "inet_pton (AF_INET, \"127.0.0.1\", &ip4addr.sin_addr",
      "s = socket (AF_INET, SOCK_STREAM, IPPROTO_TCP",
      "rc = connect (s, (struct sockaddr*) &ip4addr, sizeof (ip4addr",
      "assert (rc > -1",
      "send (s, \"\\x01\\x00\", 2, 0",
      "send (s, \"\\x08\\x00sneaky\\0\", 9, 0",
      "int timeout = 150",
      "zmq_setsockopt (server, ZMQ_RCVTIMEO, &timeout, sizeof (timeout",
      "char *buf = s_recv (server",
      "if (buf != NULL)",
      "printf (\"Received unauthenticated message: %s\\n\", buf",
      "assert (buf == NULL",
      "close (s"
    ],
    "removed_lines": [
      "Copyright (c) 2007-2013 Contributors as noted in the AUTHORS file"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 589,
    "id": "CVE-2014-9710",
    "commit_id": "5f5bc6b1e2d5a6f827bc860ef2dc5b6f365d1339",
    "added_lines": [
      "#include \"locking.h\"",
      "struct btrfs_dir_item *di = NULL",
      "path->skip_release_on_error = 1",
      "if (!value)",
      "di = btrfs_lookup_xattr(trans, root, path, btrfs_ino(inode),",
      "name, name_len, -1",
      "if (!di && (flags & XATTR_REPLACE",
      "ret = -ENODATA",
      "else if (di",
      "ret = btrfs_delete_one_dir_name(trans, root, path, di",
      "goto out",
      "ASSERT(mutex_is_locked(&inode->i_mutex",
      "di = btrfs_lookup_xattr(NULL, root, path, btrfs_ino(inode),",
      "name, name_len, 0",
      "if (!di)",
      "di = NULL",
      "ret = btrfs_insert_xattr_item(trans, root, path, btrfs_ino(inode),",
      "name, name_len, value, size",
      "if (ret == -EOVERFLOW)",
      "ret = 0",
      "btrfs_assert_tree_locked(path->nodes[0]",
      "di = btrfs_match_dir_item_name(root, path, name, name_len",
      "if (!di && !(flags & XATTR_REPLACE))",
      "ret = -ENOSPC",
      "} else if (ret == -EEXIST)",
      "ret = 0",
      "di = btrfs_match_dir_item_name(root, path, name, name_len",
      "ASSERT(di);",
      "} else if (ret)",
      "goto out",
      "if (di && (flags & XATTR_CREATE))",
      "goto out",
      "if (di)",
      "const int slot = path->slots[0]",
      "struct extent_buffer *leaf = path->nodes[0]",
      "const u16 old_data_len = btrfs_dir_data_len(leaf, di",
      "const u32 item_size = btrfs_item_size_nr(leaf, slot",
      "const u32 data_size = sizeof(*di) + name_len + size",
      "struct btrfs_item *item",
      "unsigned long data_ptr",
      "char *ptr",
      "if (size > old_data_len)",
      "if (btrfs_leaf_free_space(root, leaf) <",
      "(size - old_data_len))",
      "ret = -ENOSPC",
      "goto out",
      "if (old_data_len + name_len + sizeof(*di) == item_size)",
      "if (size > old_data_len",
      "btrfs_extend_item(root, path,",
      "size - old_data_len",
      "else if (size < old_data_len",
      "btrfs_truncate_item(root, path, data_size, 1",
      "} else",
      "ret = btrfs_delete_one_dir_name(trans, root, path, di",
      "if (ret",
      "goto out",
      "btrfs_extend_item(root, path, data_size",
      "item = btrfs_item_nr(slot",
      "ptr = btrfs_item_ptr(leaf, slot, char",
      "ptr += btrfs_item_size(leaf, item) - data_size",
      "di = (struct btrfs_dir_item *)ptr",
      "btrfs_set_dir_data_len(leaf, di, size",
      "data_ptr = ((unsigned long)(di + 1)) + name_len",
      "write_extent_buffer(leaf, value, data_ptr, size",
      "btrfs_mark_buffer_dirty(leaf",
      "} else"
    ],
    "removed_lines": [
      "struct btrfs_dir_item *di",
      "di = btrfs_lookup_xattr(trans, root, path, btrfs_ino(inode), name,",
      "name_len, -1",
      "if (IS_ERR(di))",
      "ret = PTR_ERR(di",
      "goto out",
      "} else if (!di)",
      "ret = btrfs_delete_one_dir_name(trans, root, path, di",
      "if (ret",
      "goto out",
      "if (!value",
      "goto out",
      "} else",
      "di = btrfs_lookup_xattr(NULL, root, path, btrfs_ino(inode),",
      "name, name_len, 0",
      "if (IS_ERR(di))",
      "ret = PTR_ERR(di",
      "if (!di && !value",
      "goto out",
      "btrfs_release_path(path",
      "again:",
      "ret = btrfs_insert_xattr_item(trans, root, path, btrfs_ino(inode),",
      "name, name_len, value, size",
      "if (ret == -EOVERFLOW",
      "if (ret == -EEXIST)",
      "if (flags & XATTR_CREATE",
      "goto out",
      "btrfs_release_path(path",
      "di = btrfs_lookup_xattr(trans, root, path, btrfs_ino(inode),",
      "name, name_len, -1",
      "if (IS_ERR(di))",
      "ret = PTR_ERR(di",
      "goto out",
      "} else if (!di)",
      "btrfs_release_path(path",
      "goto again",
      "ret = btrfs_delete_one_dir_name(trans, root, path, di",
      "if (ret",
      "goto out",
      "if (value)",
      "btrfs_release_path(path",
      "goto again"
    ],
    "cause": [
      "Race Condition or Concurrency"
    ],
    "effect": "+Priv Bypass",
    "score": 6.9,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITHMETIC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "FUNC_CALL"
    ],
    "vuln": "+Priv Bypass ",
    "summary": [
      "race condition"
    ]
  },
  {
    "index": 604,
    "id": "CVE-2014-9422",
    "commit_id": "6609658db0799053fbef0d7d0aa2f1fd68ef32d8",
    "added_lines": [
      "#include <k5-int.h>",
      "success = data_eq_string(*realm, handle->params.realm) &&",
      "data_eq_string(*c1, \"kadmin\") && !data_eq_string(*c2, \"history\""
    ],
    "removed_lines": [
      "#include <k5-platform.h>",
      "if (strncmp(handle->params.realm, realm->data, realm->length) == 0",
      "&& strncmp(\"kadmin\", c1->data, c1->length) == 0)",
      "if (strncmp(\"history\", c2->data, c2->length) == 0",
      "goto fail_princ",
      "else",
      "success = 1"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.1,
    "safe_features": [
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "leveraging access to a two-component principal with an initial *kadmind* substring"
    ]
  },
  {
    "index": 610,
    "id": "CVE-2014-8160",
    "commit_id": "db29a9508a9246e77087c5531e45b2c88ec6988b",
    "added_lines": [
      "static bool nf_generic_should_process(u8 proto",
      "switch (proto)",
      "#ifdef CONFIG_NF_CT_PROTO_SCTP_MODULE",
      "case IPPROTO_SCTP:",
      "return false",
      "#endif",
      "#ifdef CONFIG_NF_CT_PROTO_DCCP_MODULE",
      "case IPPROTO_DCCP:",
      "return false",
      "#endif",
      "#ifdef CONFIG_NF_CT_PROTO_GRE_MODULE",
      "case IPPROTO_GRE:",
      "return false",
      "#endif",
      "#ifdef CONFIG_NF_CT_PROTO_UDPLITE_MODULE",
      "case IPPROTO_UDPLITE:",
      "return false",
      "#endif",
      "default:",
      "return true",
      "return nf_generic_should_process(nf_ct_protonum(ct"
    ],
    "removed_lines": [
      "return true"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "RETURN",
      "RETURN",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [
      "RETURN"
    ],
    "vuln": "Bypass ",
    "summary": [
      "incorrect conntrack entries during handling of certain iptables rule sets for the SCTP, DCCP, GRE, and UDP-Lite protocols"
    ]
  },
  {
    "index": 717,
    "id": "CVE-2016-6136",
    "commit_id": "43761473c254b45883a64441dd0bc85a42f3645c",
    "added_lines": [
      "#include <linux/uaccess.h>",
      "static void audit_log_execve_info(struct audit_context *context,",
      "struct audit_buffer **ab",
      "long len_max",
      "long len_rem",
      "long len_full",
      "long len_buf",
      "long len_abuf",
      "long len_tmp",
      "bool require_data",
      "bool encode",
      "unsigned int iter",
      "unsigned int arg",
      "char *buf_head",
      "char *buf",
      "const char __user *p = (const char __user *)current->mm->arg_start",
      "char abuf[96]",
      "WARN_ON_ONCE(MAX_EXECVE_AUDIT_LEN > 7500",
      "len_max = MAX_EXECVE_AUDIT_LEN",
      "buf_head = kmalloc(MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL",
      "if (!buf_head)",
      "audit_panic(\"out of memory for argv string\"",
      "return",
      "buf = buf_head",
      "audit_log_format(*ab, \"argc=%d\", context->execve.argc",
      "len_rem = len_max",
      "len_buf = 0",
      "len_full = 0",
      "require_data = true",
      "encode = false",
      "iter = 0",
      "arg = 0",
      "if (len_full == 0",
      "len_full = strnlen_user(p, MAX_ARG_STRLEN) - 1",
      "if (require_data)",
      "if (buf != buf_head)",
      "memmove(buf_head, buf, len_buf",
      "buf = buf_head",
      "len_tmp = strncpy_from_user(&buf_head[len_buf], p,",
      "len_max - len_buf",
      "if (len_tmp == -EFAULT)",
      "send_sig(SIGKILL, current, 0",
      "goto out",
      "} else if (len_tmp == (len_max - len_buf))",
      "require_data = true",
      "encode = true",
      "len_full = len_full * 2",
      "p += len_tmp",
      "} else",
      "require_data = false",
      "if (!encode",
      "encode = audit_string_contains_control",
      "buf, len_tmp",
      "if (len_full < len_max",
      "len_full = (encode ?",
      "len_tmp * 2 : len_tmp",
      "p += len_tmp + 1",
      "len_buf += len_tmp",
      "buf_head[len_buf] = '\\0'",
      "len_abuf = (encode ? len_buf * 2 : len_buf + 2",
      "if (len_buf > 0)",
      "if ((sizeof(abuf) + 8) > len_rem)",
      "len_rem = len_max",
      "audit_log_end(*ab",
      "GFP_KERNEL, AUDIT_EXECVE",
      "if (!*ab",
      "goto out",
      "len_tmp = 0",
      "if (require_data || (iter > 0) ||",
      "((len_abuf + sizeof(abuf)) > len_rem))",
      "if (iter == 0)",
      "len_tmp += snprintf(&abuf[len_tmp],",
      "sizeof(abuf) - len_tmp,",
      "\" a%d_len=%lu\",",
      "arg, len_full",
      "len_tmp += snprintf(&abuf[len_tmp],",
      "sizeof(abuf) - len_tmp,",
      "\" a%d[%d]=\", arg, iter++",
      "} else",
      "len_tmp += snprintf(&abuf[len_tmp],",
      "sizeof(abuf) - len_tmp,",
      "\" a%d=\", arg",
      "WARN_ON(len_tmp >= sizeof(abuf",
      "abuf[sizeof(abuf) - 1] = '\\0'",
      "audit_log_format(*ab, \"%s\", abuf",
      "len_rem -= len_tmp",
      "len_tmp = len_buf",
      "if (encode)",
      "if (len_abuf > len_rem",
      "len_tmp = len_rem / 2;",
      "audit_log_n_hex(*ab, buf, len_tmp",
      "len_rem -= len_tmp * 2",
      "len_abuf -= len_tmp * 2",
      "} else",
      "if (len_abuf > len_rem",
      "len_tmp = len_rem - 2;",
      "audit_log_n_string(*ab, buf, len_tmp",
      "len_rem -= len_tmp + 2",
      "len_abuf -= len_tmp",
      "len_buf -= len_tmp",
      "buf += len_tmp",
      "if ((len_buf == 0) && !require_data)",
      "arg++",
      "iter = 0",
      "len_full = 0",
      "require_data = true",
      "encode = false",
      "} while (arg < context->execve.argc",
      "out:",
      "kfree(buf_head"
    ],
    "removed_lines": [
      "static int audit_log_single_execve_arg(struct audit_context *context,",
      "struct audit_buffer **ab,",
      "int arg_num,",
      "size_t *len_sent,",
      "const char __user *p,",
      "char *buf",
      "char arg_num_len_buf[12]",
      "const char __user *tmp_p = p",
      "size_t arg_num_len = snprintf(arg_num_len_buf, 12, \"%d\", arg_num) + 5",
      "size_t len, len_left, to_send",
      "size_t max_execve_audit_len = MAX_EXECVE_AUDIT_LEN",
      "unsigned int i, has_cntl = 0, too_long = 0",
      "int ret",
      "len_left = len = strnlen_user(p, MAX_ARG_STRLEN) - 1",
      "if (WARN_ON_ONCE(len < 0 || len > MAX_ARG_STRLEN - 1))",
      "send_sig(SIGKILL, current, 0",
      "return -1",
      "if (len_left > MAX_EXECVE_AUDIT_LEN",
      "to_send = MAX_EXECVE_AUDIT_LEN",
      "else",
      "to_send = len_left",
      "ret = copy_from_user(buf, tmp_p, to_send",
      "if (ret)",
      "WARN_ON(1",
      "send_sig(SIGKILL, current, 0",
      "return -1",
      "buf[to_send] = '\\0'",
      "has_cntl = audit_string_contains_control(buf, to_send",
      "if (has_cntl)",
      "max_execve_audit_len = MAX_EXECVE_AUDIT_LEN / 2",
      "break",
      "len_left -= to_send",
      "tmp_p += to_send",
      "} while (len_left > 0",
      "len_left = len",
      "if (len > max_execve_audit_len",
      "too_long = 1",
      "for (i = 0; len_left > 0; i++)",
      "int room_left",
      "if (len_left > max_execve_audit_len",
      "to_send = max_execve_audit_len",
      "else",
      "to_send = len_left",
      "room_left = MAX_EXECVE_AUDIT_LEN - arg_num_len - *len_sent",
      "if (has_cntl",
      "room_left -= (to_send * 2",
      "else",
      "room_left -= to_send",
      "if (room_left < 0)",
      "audit_log_end(*ab",
      "if (!*ab",
      "return 0",
      "if ((i == 0) && (too_long",
      "audit_log_format(*ab, \" a%d_len=%zu\", arg_num,",
      "has_cntl ? 2*len : len",
      "if (len >= max_execve_audit_len",
      "ret = copy_from_user(buf, p, to_send",
      "else",
      "ret = 0",
      "if (ret)",
      "WARN_ON(1",
      "send_sig(SIGKILL, current, 0",
      "return -1",
      "buf[to_send] = '\\0'",
      "audit_log_format(*ab, \" a%d\", arg_num",
      "if (too_long",
      "audit_log_format(*ab, \"[%d]\", i",
      "audit_log_format(*ab, \"=\"",
      "if (has_cntl",
      "audit_log_n_hex(*ab, buf, to_send",
      "else",
      "audit_log_string(*ab, buf",
      "p += to_send",
      "len_left -= to_send",
      "if (has_cntl",
      "else",
      "return len + 1",
      "static void audit_log_execve_info(struct audit_context *context,",
      "struct audit_buffer **ab",
      "int i, len",
      "size_t len_sent = 0",
      "const char __user *p",
      "char *buf",
      "p = (const char __user *)current->mm->arg_start",
      "audit_log_format(*ab, \"argc=%d\", context->execve.argc",
      "buf = kmalloc(MAX_EXECVE_AUDIT_LEN + 1, GFP_KERNEL",
      "if (!buf)",
      "audit_panic(\"out of memory for argv string\"",
      "return",
      "for (i = 0; i < context->execve.argc; i++)",
      "len = audit_log_single_execve_arg(context, ab, i,",
      "&len_sent, p, buf",
      "if (len <= 0",
      "break",
      "p += len",
      "kfree(buf"
    ],
    "cause": [
      "Race Condition or Concurrency",
      "Uncategorized Cluster 7"
    ],
    "effect": "Bypass",
    "score": 1.9,
    "safe_features": [
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "*double fetch* vulnerability",
      "race condition"
    ]
  },
  {
    "index": 756,
    "id": "CVE-2016-5104",
    "commit_id": "df1f5c4d70d0c19ad40072f5246ca457e7f9849e",
    "added_lines": [
      "saddr.sin_addr.s_addr = htonl(INADDR_LOOPBACK",
      "addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK"
    ],
    "removed_lines": [
      "saddr.sin_addr.s_addr = htonl(INADDR_ANY",
      "addr.sin_addr.s_addr = htonl(INADDR_ANY"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 763,
    "id": "CVE-2016-4979",
    "commit_id": "2d0e4eff04ea963128a41faaef21f987272e05a2",
    "added_lines": [
      "SSL_set_verify(ssl, verify_old, ssl_callback_SSLVerify"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not properly recognize the *SSLVerifyClient require* directive for HTTP/2 request authorization"
    ]
  },
  {
    "index": 795,
    "id": "CVE-2016-3699",
    "commit_id": "a4a5ed2835e8ea042868b7401dced3f517cafa76",
    "added_lines": [
      "if (get_securelevel() > 0)",
      "pr_notice(PREFIX",
      "\"securelevel enabled, ignoring table override\\n\"",
      "return"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized"
    ],
    "effect": "ExecCode Bypass",
    "score": 6.9,
    "safe_features": [
      "CONTROL_FLOW",
      "FUNC_CALL",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 798,
    "id": "CVE-2016-3672",
    "commit_id": "8b8addf891de8a00e4d39fc32f93f7c5eb8feceb",
    "added_lines": [
      "mm->mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor"
    ],
    "removed_lines": [
      "static unsigned long mmap_legacy_base(unsigned long rnd",
      "if (mmap_is_ia32",
      "return TASK_UNMAPPED_BASE",
      "else",
      "return TASK_UNMAPPED_BASE + rnd",
      "mm->mmap_legacy_base = mmap_legacy_base(random_factor"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 4.6,
    "safe_features": [
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly randomize the legacy base address"
    ]
  },
  {
    "index": 844,
    "id": "CVE-2016-1237",
    "commit_id": "999653786df6954a31044528ac3f7a5dadca08f4",
    "added_lines": [
      "fh_lock(fhp",
      "host_error = set_posix_acl(inode, ACL_TYPE_ACCESS, pacl",
      "goto out_drop_lock",
      "host_error = set_posix_acl(inode, ACL_TYPE_DEFAULT, dpacl",
      "out_drop_lock:",
      "fh_unlock(fhp"
    ],
    "removed_lines": [
      "if (!inode->i_op->set_acl || !IS_POSIXACL(inode",
      "return nfserr_attrnotsupp",
      "host_error = inode->i_op->set_acl(inode, pacl, ACL_TYPE_ACCESS",
      "goto out_release",
      "host_error = inode->i_op->set_acl(inode, dpacl,",
      "ACL_TYPE_DEFAULT",
      "out_release:"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 4.9,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 847,
    "id": "CVE-2016-0821",
    "commit_id": "8a5e5e02fc83aaf67053ab53b359af08c6c49aaf",
    "added_lines": [
      "#define LIST_POISON1  ((void *) 0x100 + POISON_POINTER_DELTA",
      "#define LIST_POISON2  ((void *) 0x200 + POISON_POINTER_DELTA"
    ],
    "removed_lines": [
      "#define LIST_POISON1  ((void *) 0x00100100 + POISON_POINTER_DELTA",
      "#define LIST_POISON2  ((void *) 0x00200200 + POISON_POINTER_DELTA"
    ],
    "cause": [
      "Uncategorized Cluster 4",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "internal bug",
      "does not properly consider"
    ]
  },
  {
    "index": 853,
    "id": "CVE-2015-8967",
    "commit_id": "c623b33b4e9599c6ac5076f7db7369eb9869aa04",
    "added_lines": [
      "void * const sys_call_table[__NR_syscalls] __aligned(4096) ="
    ],
    "removed_lines": [
      "void *sys_call_table[__NR_syscalls] __aligned(4096) ="
    ],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "+Priv Bypass",
    "score": 9.3,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "+Priv Bypass ",
    "summary": [
      "permissions"
    ]
  },
  {
    "index": 893,
    "id": "CVE-2015-8575",
    "commit_id": "5233252fce714053f0151680933571a2da9cbfb4",
    "added_lines": [
      "if (addr_len < sizeof(struct sockaddr_sco",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass +Info",
    "score": 2.1,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass +Info ",
    "summary": [
      "does not verify an address length"
    ]
  },
  {
    "index": 921,
    "id": "CVE-2014-9717",
    "commit_id": "ce07d891a0891d3c0d0c2d73d577490486b809e1",
    "added_lines": [
      "#define IS_MNT_LOCKED_AND_LAZY(m) \\",
      "(((m)->mnt.mnt_flags & (MNT_LOCKED|MNT_SYNC_UMOUNT)) == MNT_LOCKED"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 3.6,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "processes MNT_DETACH umount2 system calls without verifying that the MNT_LOCKED flag is unset"
    ]
  },
  {
    "index": 1016,
    "id": "CVE-2017-14954",
    "commit_id": "6c85501f2fabcfc4fc6ed976543d252c4eaf4be9",
    "added_lines": [
      "if (uru)",
      "if (COMPAT_USE_64BIT_TIME",
      "err = copy_to_user(uru, &ru, sizeof(ru",
      "else",
      "err = put_compat_rusage(&ru, uru",
      "if (err",
      "return -EFAULT"
    ],
    "removed_lines": [
      "if (!err)",
      "if (!err && uru)",
      "if (COMPAT_USE_64BIT_TIME",
      "err = copy_to_user(uru, &ru, sizeof(ru",
      "else",
      "err = put_compat_rusage(&ru, uru",
      "if (err",
      "return -EFAULT"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass +Info",
    "score": 2.1,
    "safe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "vuln": "Bypass +Info ",
    "summary": [
      "accesses rusage data structures in unintended cases"
    ]
  },
  {
    "index": 1043,
    "id": "CVE-2017-14169",
    "commit_id": "9d00fb9d70ee8c0cc7002b89318c5be00f1bbdad",
    "added_lines": [
      "if (item_num > 65536 || item_num < 0)"
    ],
    "removed_lines": [
      "if (item_num > 65536)"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "Bypass ",
    "summary": [
      "integer signedness error"
    ]
  },
  {
    "index": 1060,
    "id": "CVE-2017-14032",
    "commit_id": "d15795acd5074e0b44e71f7ede8bdfe1b48591fc",
    "added_lines": [
      "mbedtls_x509_crt_verify_max:\"data_files/dir-maxpath/00.crt\":\"data_files/dir-maxpath\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_CERT_VERIFY_FAILED:-1"
    ],
    "removed_lines": [
      "mbedtls_x509_crt_verify_max:\"data_files/dir-maxpath/00.crt\":\"data_files/dir-maxpath\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_CERT_VERIFY_FAILED:0"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 1063,
    "id": "CVE-2017-13695",
    "commit_id": "37f2c716f2c6ab14c3ba557a539c3ee3224931b5",
    "added_lines": [
      "else if (ACPI_FAILURE(Status",
      "if (Info->ReturnObject",
      "AcpiUtRemoveReference (Info->ReturnObject",
      "Info->ReturnObject = NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass +Info",
    "score": 2.1,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass +Info ",
    "summary": [
      "does not flush the operand cache",
      "kernel stack dump"
    ]
  },
  {
    "index": 1064,
    "id": "CVE-2017-13694",
    "commit_id": "4a0243ecb4c94e2d73510d096c5ea4d0711fc6c0",
    "added_lines": [
      "ACPI_STATUS             ReturnStatus = AE_OK",
      "BOOLEAN                 Ascending = TRUE",
      "if (Ascending && WalkState->AscendingCallback != NULL",
      "Ascending = FALSE",
      "ReturnStatus = AE_CTRL_TERMINATE",
      "Ascending = FALSE",
      "ReturnStatus = Status",
      "Status = AcpiPsCompleteThisOp (WalkState, Op",
      "if (ACPI_FAILURE (Status",
      "Ascending = FALSE",
      "if (ACPI_SUCCESS (ReturnStatus) ||",
      "ReturnStatus == AE_CTRL_TERMINATE",
      "ReturnStatus = Status",
      "return_ACPI_STATUS (ReturnStatus"
    ],
    "removed_lines": [
      "ACPI_STATUS             Status2",
      "if (WalkState->AscendingCallback != NULL",
      "Status = AE_OK",
      "do",
      "if (Op",
      "Status2 = AcpiPsCompleteThisOp (WalkState, Op",
      "if (ACPI_FAILURE (Status2",
      "return_ACPI_STATUS (Status2",
      "AcpiPsPopScope (&(WalkState->ParserState), &Op,",
      "&WalkState->ArgTypes, &WalkState->ArgCount",
      "} while (Op",
      "return_ACPI_STATUS (Status",
      "(void) AcpiPsCompleteThisOp (WalkState, Op",
      "return_ACPI_STATUS (Status",
      "Status2 = AcpiPsCompleteThisOp (WalkState, Op",
      "if (ACPI_FAILURE (Status2",
      "return_ACPI_STATUS (Status2",
      "return_ACPI_STATUS (Status"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "Bypass +Info",
    "score": 2.1,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "Bypass +Info ",
    "summary": [
      "kernel stack dump"
    ]
  },
  {
    "index": 1065,
    "id": "CVE-2017-13693",
    "commit_id": "987a3b5cf7175916e2a4b6ea5b8e70f830dfe732",
    "added_lines": [
      "UINT32                  PrevNumOperands = WalkState->NumOperands",
      "UINT32                  NewNumOperands",
      "NewNumOperands = Index",
      "WalkState->NumOperands = i",
      "AcpiDsObjStackPopAndDelete (NewNumOperands, WalkState",
      "WalkState->NumOperands = PrevNumOperands"
    ],
    "removed_lines": [
      "AcpiDsObjStackPopAndDelete (ArgCount, WalkState"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass +Info",
    "score": 4.9,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "Bypass +Info ",
    "summary": [
      "does not flush the operand cache",
      "kernel stack dump"
    ]
  },
  {
    "index": 1196,
    "id": "CVE-2017-11472",
    "commit_id": "3b2d69114fefa474fca542e51119036dceb4aa6f",
    "added_lines": [
      "union acpi_operand_object *prev",
      "union acpi_operand_object *next",
      "next = acpi_gbl_module_code_list",
      "while (next)",
      "prev = next",
      "next = next->method.mutex",
      "prev->method.mutex = NULL;",
      "acpi_ut_remove_reference(prev"
    ],
    "removed_lines": [
      "#ifdef ACPI_EXEC_APP",
      "union acpi_operand_object *prev",
      "union acpi_operand_object *next",
      "next = acpi_gbl_module_code_list",
      "while (next)",
      "prev = next",
      "next = next->method.mutex",
      "prev->method.mutex = NULL;",
      "acpi_ut_remove_reference(prev",
      "#endif"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass +Info",
    "score": 3.6,
    "safe_features": [
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "vuln": "Bypass +Info ",
    "summary": [
      "does not flush the operand cache",
      "kernel stack dump"
    ]
  },
  {
    "index": 1296,
    "id": "CVE-2017-7889",
    "commit_id": "a4866aa812518ed1a37d8ea0c881dc946409de94",
    "added_lines": [
      "static inline int page_is_allowed(unsigned long pfn",
      "return devmem_is_allowed(pfn",
      "static inline int page_is_allowed(unsigned long pfn",
      "return 1",
      "int allowed",
      "allowed = page_is_allowed(p >> PAGE_SHIFT",
      "if (!allowed",
      "if (allowed == 2)",
      "remaining = clear_user(buf, sz",
      "} else",
      "ptr = xlate_dev_mem_ptr(p",
      "if (!ptr",
      "return -EFAULT",
      "remaining = copy_to_user(buf, ptr, sz",
      "unxlate_dev_mem_ptr(p, ptr",
      "int allowed",
      "allowed = page_is_allowed(p >> PAGE_SHIFT",
      "if (!allowed",
      "if (allowed == 1)",
      "ptr = xlate_dev_mem_ptr(p",
      "if (!ptr)",
      "if (written",
      "break",
      "return -EFAULT",
      "copied = copy_from_user(ptr, buf, sz",
      "unxlate_dev_mem_ptr(p, ptr",
      "if (copied)",
      "written += sz - copied",
      "if (written",
      "break",
      "return -EFAULT"
    ],
    "removed_lines": [
      "if (!range_is_allowed(p >> PAGE_SHIFT, count",
      "ptr = xlate_dev_mem_ptr(p",
      "if (!ptr",
      "return -EFAULT",
      "remaining = copy_to_user(buf, ptr, sz",
      "unxlate_dev_mem_ptr(p, ptr",
      "if (!range_is_allowed(p >> PAGE_SHIFT, sz",
      "ptr = xlate_dev_mem_ptr(p",
      "if (!ptr)",
      "if (written",
      "break",
      "return -EFAULT",
      "copied = copy_from_user(ptr, buf, sz",
      "unxlate_dev_mem_ptr(p, ptr",
      "if (copied)",
      "written += sz - copied",
      "if (written",
      "break",
      "return -EFAULT"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 7.2,
    "safe_features": [
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly enforce the CONFIG_STRICT_DEVMEM protection mechanism"
    ]
  },
  {
    "index": 1316,
    "id": "CVE-2017-7418",
    "commit_id": "349addc3be4fcdad9bd4ec01ad1ccd916c898ed8",
    "added_lines": [
      "my $symlink_dst = File::Spec->rel2abs(\"$tmpdir/real\"",
      "unless (chdir($tmpdir))",
      "die(\"Can't chdir to $tmpdir: $!\"",
      "unless (symlink(\"./real\", \"./home.d\"))",
      "die(\"Can't symlink './real' to './home.d': $!\"",
      "mkpath(File::Spec->rel2abs(\"$tmpdir/real/symlinks/$user\"",
      "my $setup = test_setup($tmpdir, 'config', $user, undef, undef, $uid, $gid,",
      "$home_dir",
      "PidFile => $setup->{pid_file},",
      "ScoreboardFile => $setup->{scoreboard_file},",
      "SystemLog => $setup->{log_file},",
      "AuthUserFile => $setup->{auth_user_file},",
      "AuthGroupFile => $setup->{auth_group_file},",
      "my ($port, $config_user, $config_group) = config_write($setup->{config_file},",
      "$config",
      "eval { $client->login($user, $setup->{passwd})",
      "\"Expected response code $expected, got $resp_code\"",
      "\"Expected response message '$expected', got '$resp_msg'\"",
      "eval { server_wait($setup->{config_file}, $rfh)",
      "server_stop($setup->{pid_file",
      "test_cleanup($setup->{log_file}, $ex"
    ],
    "removed_lines": [
      "my $config_file = \"$tmpdir/config.conf\"",
      "my $pid_file = File::Spec->rel2abs(\"$tmpdir/config.pid\"",
      "my $scoreboard_file = File::Spec->rel2abs(\"$tmpdir/config.scoreboard\"",
      "my $log_file = test_get_logfile",
      "my $auth_user_file = File::Spec->rel2abs(\"$tmpdir/config.passwd\"",
      "my $auth_group_file = File::Spec->rel2abs(\"$tmpdir/config.group\"",
      "my $passwd = 'test'",
      "my $group = 'ftpd'",
      "my $intermed_dir = File::Spec->rel2abs(\"$tmpdir/home.d/symlinks\"",
      "mkpath($intermed_dir",
      "my $symlink_dst = File::Spec->rel2abs(\"$tmpdir/real/$user\"",
      "mkpath($symlink_dst",
      "unless (chdir($intermed_dir))",
      "die(\"Can't chdir to $intermed_dir: $!\"",
      "unless (symlink(\"../../real/$user\", \"./$user\"))",
      "die(\"Can't symlink '../../real/$user' to './$user': $!\"",
      "# Make sure that, if we're running as root, that the home directory has",
      "# permissions/privs set for the account we create",
      "if ($< == 0)",
      "unless (chmod(0755, $symlink_dst))",
      "die(\"Can't set perms on $symlink_dst to 0755: $!\"",
      "unless (chown($uid, $gid, $symlink_dst))",
      "die(\"Can't set owner of $symlink_dst to $uid/$gid: $!\"",
      "auth_user_write($auth_user_file, $user, $passwd, $uid, $gid, $home_dir,",
      "'/bin/bash'",
      "auth_group_write($auth_group_file, $group, $gid, $user",
      "PidFile => $pid_file,",
      "ScoreboardFile => $scoreboard_file,",
      "SystemLog => $log_file,",
      "AuthUserFile => $auth_user_file,",
      "AuthGroupFile => $auth_group_file,",
      "my ($port, $config_user, $config_group) = config_write($config_file, $config",
      "eval { $client->login($user, $passwd)",
      "test_msg(\"Expected response code $expected, got $resp_code\"",
      "test_msg(\"Expected response message '$expected', got '$resp_msg'\"",
      "eval { server_wait($config_file, $rfh)",
      "server_stop($pid_file",
      "if ($ex)",
      "test_append_logfile($log_file, $ex",
      "unlink($log_file",
      "die($ex",
      "unlink($log_file"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 2.1,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "AllowChrootSymlinks"
    ]
  },
  {
    "index": 1341,
    "id": "CVE-2017-6594",
    "commit_id": "b1e699103f08d6a0ca46a122193c9da65f6cf837",
    "added_lines": [
      "SOME-REALM8.UK =",
      "kdc = localhost:@port@",
      "SOME-REALM8.UK = SOME-REALM6.US"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "leveraging failure to add the previous hop realm to the transit path of issued tickets"
    ]
  },
  {
    "index": 1359,
    "id": "CVE-2017-6413",
    "commit_id": "21e3728a825c41ab41efa75e664108051bb9665e",
    "added_lines": [
      "oidc_scrub_headers(r"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not skip OIDC_CLAIM_ and OIDCAuthNHeader headers in an *AuthType oauth20* configuration"
    ]
  },
  {
    "index": 1384,
    "id": "CVE-2017-5669",
    "commit_id": "e1d35d4dc7f089e6c9c080d556feedf9c706f0c7",
    "added_lines": [
      "long do_shmat(int shmid, char __user *shmaddr, int shmflg,",
      "ulong *raddr, unsigned long shmlba",
      "if ((shmflg & SHM_RND) && addr >= shmlba",
      "addr &= ~(shmlba - 1"
    ],
    "removed_lines": [
      "long do_shmat(int shmid, char __user *shmaddr, int shmflg, ulong *raddr,",
      "unsigned long shmlba",
      "if (shmflg & SHM_RND",
      "addr &= ~(shmlba - 1);"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 4.6,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not restrict the address calculated by a certain rounding operation"
    ]
  },
  {
    "index": 1411,
    "id": "CVE-2017-5206",
    "commit_id": "6b8dba29d73257311564ee7f27b9b14758cc693e",
    "added_lines": [
      "Allow tools such as strace and gdb inside the sandbox. This option is only available",
      "when running on Linux kernels 4.8 or newer - a kernel bug in ptrace system call allows a full",
      "bypass of the seccomp filter."
    ],
    "removed_lines": [
      "Allow tools such as strace and gdb inside the sandbox."
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 1506,
    "id": "CVE-2016-10044",
    "commit_id": "22f6b4d34fcf039c63a94e7670e0da24f8575a5a",
    "added_lines": [
      "struct dentry *root = mount_pseudo(fs_type, \"aio:\", NULL, &ops,",
      "AIO_RING_MAGIC",
      "if (!IS_ERR(root",
      "root->d_sb->s_iflags |= SB_I_NOEXEC",
      "return root"
    ],
    "removed_lines": [
      "return mount_pseudo(fs_type, \"aio:\", NULL, &ops, AIO_RING_MAGIC"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "+Priv Bypass",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN"
    ],
    "unsafe_features": [
      "RETURN"
    ],
    "vuln": "+Priv Bypass ",
    "summary": [
      "does not properly restrict execute access"
    ]
  },
  {
    "index": 1557,
    "id": "CVE-2016-7798",
    "commit_id": "8108e0a6db133f3375608303fdd2083eb5115062",
    "added_lines": [
      "@c1.random_key",
      "def test_update_raise_if_key_not_set",
      "assert_raise(OpenSSL::Cipher::CipherError) do",
      "# it caused OpenSSL SEGV by uninitialized key [Bug #2768]",
      "OpenSSL::Cipher::AES128.new(\"ECB\").update \".\" * 17",
      "def test_aes_gcm_key_iv_order_issue",
      "pt = \"[ruby/openssl#49]\"",
      "cipher = OpenSSL::Cipher.new(\"aes-128-gcm\").encrypt",
      "cipher.key = \"x\" * 16",
      "cipher.iv = \"a\" * 12",
      "ct1 = cipher.update(pt) << cipher.final",
      "tag1 = cipher.auth_tag",
      "cipher = OpenSSL::Cipher.new(\"aes-128-gcm\").encrypt",
      "cipher.iv = \"a\" * 12",
      "cipher.key = \"x\" * 16",
      "ct2 = cipher.update(pt) << cipher.final",
      "tag2 = cipher.auth_tag",
      "assert_equal ct1, ct2",
      "assert_equal tag1, tag2",
      "end if has_cipher?(\"aes-128-gcm\""
    ],
    "removed_lines": [
      "def test_AES_crush",
      "500.times do",
      "assert_nothing_raised(\"[Bug #2768]\") do",
      "# it caused OpenSSL SEGV by uninitialized key",
      "OpenSSL::Cipher::AES128.new(\"ECB\").update \".\" * 17",
      "end"
    ],
    "cause": [
      "Cryptographic Weakness"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "uses the same initialization vector"
    ]
  },
  {
    "index": 1621,
    "id": "CVE-2015-7837",
    "commit_id": "4b2b64d5a6ebc84214755ebccd599baef7c1b798",
    "added_lines": [
      "params->secure_boot = boot_params.secure_boot"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 2.1,
    "safe_features": [
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "improper handling of secure_boot flag"
    ]
  },
  {
    "index": 1681,
    "id": "CVE-2018-1000118",
    "commit_id": "ce361a12e355f9e1e99c989f1ea056c9e502dbe7",
    "added_lines": [
      "std::string switch_name =",
      "base::ToLowerASCII(base::StringPiece(a, strcspn(a, \"=\""
    ],
    "removed_lines": [
      "std::string switch_name(a, strcspn(a, \"=\""
    ],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "ExecCode Bypass",
    "score": 9.3,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "Exec Code Bypass ",
    "summary": [
      "command injection vulnerability"
    ]
  },
  {
    "index": 1697,
    "id": "CVE-2018-20145",
    "commit_id": "9097577b49b7fdcf45d30975976dd93808ccc0c4",
    "added_lines": [
      "config->listeners[config->listener_count-1].security_options.acl_file = config->default_listener.security_options.acl_file"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 0.0,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 1713,
    "id": "CVE-2018-18955",
    "commit_id": "d2f007dbe7e4c9583eea6eb04d60001e85c6f1bd",
    "added_lines": [
      "ret = sort_idmaps(&new_map",
      "if (ret < 0",
      "goto out"
    ],
    "removed_lines": [
      "ret = sort_idmaps(&new_map",
      "if (ret < 0",
      "goto out"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "Bypass",
    "score": 4.4,
    "safe_features": [
      "FUNC_CALL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "CONTROL_FLOW"
    ],
    "vuln": "Bypass ",
    "summary": [
      "because it mishandles nested user namespaces with more than 5 UID or GID ranges"
    ]
  },
  {
    "index": 1796,
    "id": "CVE-2018-14568",
    "commit_id": "843d0b7a10bb45627f94764a6c5d468a24143345",
    "added_lines": [
      "static int StreamTcpStateDispatch(ThreadVars *tv, Packet *p,",
      "StreamTcpThread *stt, TcpSession *ssn, PacketQueue *pq,",
      "uint8_t state",
      "ssn->pstate = ssn->state",
      "SCLogDebug(\"ssn->server.flags |= STREAMTCP_STREAM_FLAG_RST_RECV\"",
      "ssn->server.flags |= STREAMTCP_STREAM_FLAG_RST_RECV",
      "ssn->client.flags |= STREAMTCP_STREAM_FLAG_RST_RECV",
      "SCLogDebug(\"ssn->client.flags |= STREAMTCP_STREAM_FLAG_RST_RECV\"",
      "static int StreamTcpPacketStateClosed(ThreadVars *tv, Packet *p,",
      "StreamTcpThread *stt, TcpSession *ssn, PacketQueue *pq",
      "if (ssn == NULL",
      "return -1",
      "if (p->tcph->th_flags & TH_RST)",
      "SCLogDebug(\"RST on closed state\"",
      "return 0",
      "TcpStream *stream = NULL, *ostream = NULL",
      "if (PKT_IS_TOSERVER(p))",
      "stream = &ssn->client",
      "ostream = &ssn->server",
      "} else",
      "stream = &ssn->server",
      "ostream = &ssn->client",
      "SCLogDebug(\"stream %s ostream %s\",",
      "stream->flags & STREAMTCP_STREAM_FLAG_RST_RECV?\"true\":\"false\",",
      "ostream->flags & STREAMTCP_STREAM_FLAG_RST_RECV ? \"true\":\"false\"",
      "if ((stream->flags & STREAMTCP_STREAM_FLAG_RST_RECV) == 0)",
      "if (ostream->flags & STREAMTCP_STREAM_FLAG_RST_RECV)",
      "if (StreamTcpStateDispatch(tv, p, stt, ssn, &stt->pseudo_queue, ssn->pstate) < 0",
      "return -1",
      "return 0",
      "static void StreamTcpPacketCheckPostRst(TcpSession *ssn, Packet *p",
      "if (p->flags & PKT_PSEUDO_STREAM_END)",
      "return",
      "if ((p->tcph->th_flags & (TH_RST)) != 0)",
      "return",
      "TcpStream *ostream = NULL",
      "if (PKT_IS_TOSERVER(p))",
      "ostream = &ssn->server",
      "} else",
      "ostream = &ssn->client",
      "if (ostream->flags & STREAMTCP_STREAM_FLAG_RST_RECV)",
      "SCLogDebug(\"regular packet %\"PRIu64\" from same sender as \"",
      "\"the previous RST. Looks like it injected!\", p->pcap_cnt",
      "ostream->flags &= ~STREAMTCP_STREAM_FLAG_RST_RECV",
      "StreamTcpSetEvent(p, STREAM_SUSPECTED_RST_INJECT",
      "return",
      "return",
      "static inline int StreamTcpStateDispatch(ThreadVars *tv, Packet *p,",
      "StreamTcpThread *stt, TcpSession *ssn, PacketQueue *pq,",
      "const uint8_t state",
      "switch (state)",
      "case TCP_SYN_SENT:",
      "if (StreamTcpPacketStateSynSent(tv, p, stt, ssn, pq))",
      "return -1",
      "break",
      "case TCP_SYN_RECV:",
      "if (StreamTcpPacketStateSynRecv(tv, p, stt, ssn, pq))",
      "return -1",
      "break",
      "case TCP_ESTABLISHED:",
      "if (StreamTcpPacketStateEstablished(tv, p, stt, ssn, pq))",
      "return -1",
      "break",
      "case TCP_FIN_WAIT1:",
      "if (StreamTcpPacketStateFinWait1(tv, p, stt, ssn, pq))",
      "return -1",
      "break",
      "case TCP_FIN_WAIT2:",
      "if (StreamTcpPacketStateFinWait2(tv, p, stt, ssn, pq))",
      "return -1",
      "break",
      "case TCP_CLOSING:",
      "if (StreamTcpPacketStateClosing(tv, p, stt, ssn, pq))",
      "return -1",
      "break",
      "case TCP_CLOSE_WAIT:",
      "if (StreamTcpPacketStateCloseWait(tv, p, stt, ssn, pq))",
      "return -1",
      "break",
      "case TCP_LAST_ACK:",
      "if (StreamTcpPacketStateLastAck(tv, p, stt, ssn, pq))",
      "return -1",
      "break",
      "case TCP_TIME_WAIT:",
      "if (StreamTcpPacketStateTimeWait(tv, p, stt, ssn, pq))",
      "return -1",
      "break",
      "case TCP_CLOSED:",
      "SCLogDebug(\"packet received on closed state\"",
      "if (StreamTcpPacketStateClosed(tv, p, stt, ssn, pq))",
      "return -1",
      "break",
      "default:",
      "SCLogDebug(\"packet received on default state\"",
      "break",
      "return 0",
      "if (StreamTcpStateDispatch(tv, p, stt, ssn, &stt->pseudo_queue, ssn->state) < 0",
      "goto error",
      "StreamTcpPacketCheckPostRst(ssn, p"
    ],
    "removed_lines": [
      "switch (ssn->state)",
      "case TCP_SYN_SENT:",
      "if(StreamTcpPacketStateSynSent(tv, p, stt, ssn, &stt->pseudo_queue))",
      "goto error",
      "break",
      "case TCP_SYN_RECV:",
      "if(StreamTcpPacketStateSynRecv(tv, p, stt, ssn, &stt->pseudo_queue))",
      "goto error",
      "break",
      "case TCP_ESTABLISHED:",
      "if(StreamTcpPacketStateEstablished(tv, p, stt, ssn, &stt->pseudo_queue))",
      "goto error",
      "break",
      "case TCP_FIN_WAIT1:",
      "if(StreamTcpPacketStateFinWait1(tv, p, stt, ssn, &stt->pseudo_queue))",
      "goto error",
      "break",
      "case TCP_FIN_WAIT2:",
      "if(StreamTcpPacketStateFinWait2(tv, p, stt, ssn, &stt->pseudo_queue))",
      "goto error",
      "break",
      "case TCP_CLOSING:",
      "if(StreamTcpPacketStateClosing(tv, p, stt, ssn, &stt->pseudo_queue))",
      "goto error",
      "break",
      "case TCP_CLOSE_WAIT:",
      "if(StreamTcpPacketStateCloseWait(tv, p, stt, ssn, &stt->pseudo_queue))",
      "goto error",
      "break",
      "case TCP_LAST_ACK:",
      "if(StreamTcpPacketStateLastAck(tv, p, stt, ssn, &stt->pseudo_queue))",
      "goto error",
      "break",
      "case TCP_TIME_WAIT:",
      "if(StreamTcpPacketStateTimeWait(tv, p, stt, ssn, &stt->pseudo_queue))",
      "goto error",
      "break",
      "case TCP_CLOSED:",
      "SCLogDebug(\"packet received on closed state\"",
      "break",
      "default:",
      "SCLogDebug(\"packet received on default state\"",
      "break"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC",
      "RETURN",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "stops TCP stream inspection upon a TCP RST"
    ]
  },
  {
    "index": 1936,
    "id": "CVE-2018-6794",
    "commit_id": "e1ef57c848bbe4e567d5d4b66d346a742e3f77a1",
    "added_lines": [
      "DecodeSetNoPayloadInspectionFlag(p"
    ],
    "removed_lines": [],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "HTTP detection bypass vulnerability"
    ]
  },
  {
    "index": 1967,
    "id": "CVE-2018-1129",
    "commit_id": "8f396cf35a3826044b089141667a196454c0a587",
    "added_lines": [
      "if (!HAVE_FEATURE(features, CEPHX_V2))",
      "struct",
      "__u8 v",
      "__le64 magic",
      "__le32 len",
      "__le32 header_crc",
      "__le32 front_crc",
      "__le32 middle_crc",
      "__le32 data_crc",
      "} __attribute__ ((packed)) sigblock =",
      "1, mswab(AUTH_ENC_MAGIC), mswab<uint32_t>(4*4),",
      "mswab<uint32_t>(header.crc), mswab<uint32_t>(footer.front_crc),",
      "mswab<uint32_t>(footer.middle_crc), mswab<uint32_t>(footer.data_crc",
      "char exp_buf[CryptoKey::get_max_outbuf_size(sizeof(sigblock))]",
      "try",
      "const CryptoKey::in_slice_t in",
      "sizeof(sigblock),",
      "reinterpret_cast<const unsigned char*>(&sigblock",
      "const CryptoKey::out_slice_t out",
      "sizeof(exp_buf),",
      "reinterpret_cast<unsigned char*>(&exp_buf",
      "key.encrypt(cct, in, out",
      "} catch (std::exception& e)",
      "lderr(cct) << __func__ << \" failed to encrypt signature block\" << dendl",
      "return -1",
      "} else",
      "struct",
      "__le32 header_crc",
      "__le32 front_crc",
      "__le32 front_len",
      "__le32 middle_crc",
      "__le32 middle_len",
      "__le32 data_crc",
      "__le32 data_len",
      "__le32 seq_lower_word",
      "} __attribute__ ((packed)) sigblock =",
      "mswab<uint32_t>(header.crc),",
      "mswab<uint32_t>(footer.front_crc),",
      "mswab<uint32_t>(header.front_len),",
      "mswab<uint32_t>(footer.middle_crc),",
      "mswab<uint32_t>(header.middle_len),",
      "mswab<uint32_t>(footer.data_crc),",
      "mswab<uint32_t>(header.data_len),",
      "mswab<uint32_t>(header.seq",
      "char exp_buf[CryptoKey::get_max_outbuf_size(sizeof(sigblock))]",
      "try",
      "const CryptoKey::in_slice_t in",
      "sizeof(sigblock),",
      "reinterpret_cast<const unsigned char*>(&sigblock",
      "const CryptoKey::out_slice_t out",
      "sizeof(exp_buf),",
      "reinterpret_cast<unsigned char*>(&exp_buf",
      "key.encrypt(cct, in, out",
      "} catch (std::exception& e)",
      "lderr(cct) << __func__ << \" failed to encrypt signature block\" << dendl",
      "return -1",
      "struct enc",
      "__le64 a, b, c, d",
      "} *penc = reinterpret_cast<enc*>(exp_buf"
    ],
    "removed_lines": [
      "struct",
      "__u8 v",
      "__le64 magic",
      "__le32 len",
      "__le32 header_crc",
      "__le32 front_crc",
      "__le32 middle_crc",
      "__le32 data_crc",
      "} __attribute__ ((packed)) sigblock =",
      "1, mswab(AUTH_ENC_MAGIC), mswab<uint32_t>(4*4),",
      "mswab<uint32_t>(header.crc), mswab<uint32_t>(footer.front_crc),",
      "mswab<uint32_t>(footer.middle_crc), mswab<uint32_t>(footer.data_crc",
      "char exp_buf[CryptoKey::get_max_outbuf_size(sizeof(sigblock))]",
      "try",
      "const CryptoKey::in_slice_t in",
      "sizeof(sigblock),",
      "reinterpret_cast<const unsigned char*>(&sigblock",
      "const CryptoKey::out_slice_t out",
      "sizeof(exp_buf),",
      "reinterpret_cast<unsigned char*>(&exp_buf",
      "key.encrypt(cct, in, out",
      "} catch (std::exception& e)",
      "lderr(cct) << __func__ << \" failed to encrypt signature block\" << dendl",
      "return -1"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 3.3,
    "safe_features": [
      "CONTROL_FLOW",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 2014,
    "id": "CVE-2017-15365",
    "commit_id": "0b5a5258abbeaf8a0c3a18c7e753699787fdf46e",
    "added_lines": [
      "This code is processing event execution and does not have client",
      "connection. Here, event execution will now execute a prepared",
      "DROP EVENT statement, but thd->lex->sql_command is set to",
      "SQLCOM_CREATE_PROCEDURE",
      "DROP EVENT will be logged in binlog, and we have to",
      "replicate it to make all nodes have consistent event definitions",
      "Wsrep DDL replication is triggered inside Events::drop_event(),",
      "and here we need to prepare the THD so that DDL replication is",
      "possible, essentially it requires setting sql_command to",
      "SQLCOMM_DROP_EVENT, we will switch sql_command for the duration",
      "of DDL replication only.",
      "const enum_sql_command sql_command_save= thd->lex->sql_command",
      "const bool sql_command_set= WSREP(thd",
      "if (sql_command_set",
      "if (sql_command_set",
      "WSREP_TO_ISOLATION_END",
      "thd->lex->sql_command = sql_command_save"
    ],
    "removed_lines": [
      "if (WSREP(thd",
      "WSREP_TO_ISOLATION_BEGIN(WSREP_MYSQL_DB, NULL, NULL",
      "WSREP_TO_ISOLATION_END",
      "#ifdef WITH_WSREP",
      "error:",
      "#endif"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 6.5,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "leveraging incorrect ordering of DDL replication and ACL checking"
    ]
  },
  {
    "index": 2020,
    "id": "CVE-2017-7562",
    "commit_id": "b7af544e50a4d8291524f590e20dd44430bf627d",
    "added_lines": [
      "generic_p12 = os.path.join(certs, 'generic.p12'",
      "p12_generic_identity = 'PKCS12:%s' % generic_p12",
      "# Authorize a client cert with no PKINIT extensions using subject and",
      "# issuer.  (Relies on EKU checking being turned off.",
      "rule = '&&<SUBJECT>CN=user$<ISSUER>O=MIT,'",
      "realm.run([kadminl, 'setstr', realm.user_princ, 'pkinit_cert_match', rule]",
      "realm.kinit(realm.user_princ,",
      "flags=['-X', 'X509_user_identity=%s' % p12_generic_identity]",
      "realm.klist(realm.user_princ"
    ],
    "removed_lines": [],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 4.0,
    "safe_features": [
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "authentication bypass"
    ]
  },
  {
    "index": 2205,
    "id": "CVE-2019-10639",
    "commit_id": "355b98553789b646ed97ad801a619ff898471b92",
    "added_lines": [
      "get_random_bytes(&net->hash_mix, sizeof(u32"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass +Info",
    "score": 5.0,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass +Info ",
    "summary": [
      "hash collisions"
    ]
  },
  {
    "index": 2226,
    "id": "CVE-2019-3877",
    "commit_id": "62041428a32de402e0be6ba45fe12df6a83bedb8",
    "added_lines": [
      "if (*i == '\\\\')",
      "AM_LOG_RERROR(APLOG_MARK, APLOG_ERR, HTTP_BAD_REQUEST, r,",
      "\"Backslash character detected in URL.\"",
      "return HTTP_BAD_REQUEST"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "backslash"
    ]
  },
  {
    "index": 2259,
    "id": "CVE-2018-20685",
    "commit_id": "6010c0303a422a9c5fa8860c061bf7105eb7f8b2",
    "added_lines": [
      "if (*cp == '\\0' || strchr(cp, '/') != NULL ||",
      "strcmp(cp, \".\") == 0 || strcmp(cp, \"..\") == 0)"
    ],
    "removed_lines": [
      "if ((strchr(cp, '/') != NULL) || (strcmp(cp, \"..\") == 0))"
    ],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 2.6,
    "safe_features": [
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "permissions"
    ]
  },
  {
    "index": 2315,
    "id": "CVE-2011-4127",
    "commit_id": "0bfc96cb77224736dfa35c3c555d37b3646ef35e",
    "added_lines": [
      "extern int scsi_verify_blk_ioctl(struct block_device *, unsigned int"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.6,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "ioctl call",
      "does not properly restrict SG_IO ioctl calls"
    ]
  },
  {
    "index": 2348,
    "id": "CVE-2015-2925",
    "commit_id": "cde93be45a8a90d8c264c776fab63487b5038a65",
    "added_lines": [
      "if (dentry != vfsmnt->mnt_root)",
      "bptr = *buffer",
      "blen = *buflen",
      "error = 3",
      "break"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 6.9,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not properly handle rename actions inside a bind mount"
    ]
  },
  {
    "index": 2368,
    "id": "CVE-2016-5104",
    "commit_id": "4397b3376dc4e4cb1c991d0aed61ce6482614196",
    "added_lines": [
      "saddr.sin_addr.s_addr = htonl(INADDR_LOOPBACK",
      "addr.sin_addr.s_addr = htonl(INADDR_LOOPBACK"
    ],
    "removed_lines": [
      "saddr.sin_addr.s_addr = htonl(INADDR_ANY",
      "addr.sin_addr.s_addr = htonl(INADDR_ANY"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 2393,
    "id": "CVE-2017-14032",
    "commit_id": "31458a18788b0cf0b722acda9bb2f2fe13a3fb32",
    "added_lines": [
      "mbedtls_x509_crt_verify_max:\"data_files/dir-maxpath/00.crt\":\"data_files/dir-maxpath\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_FATAL_ERROR:-1"
    ],
    "removed_lines": [
      "mbedtls_x509_crt_verify_max:\"data_files/dir-maxpath/00.crt\":\"data_files/dir-maxpath\":MBEDTLS_X509_MAX_INTERMEDIATE_CA+1:MBEDTLS_ERR_X509_CERT_VERIFY_FAILED:-1"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 2413,
    "id": "CVE-2017-11472",
    "commit_id": "a23325b2e583556eae88ed3f764e457786bf4df6",
    "added_lines": [
      "ACPI_OPERAND_OBJECT     *Prev",
      "ACPI_OPERAND_OBJECT     *Next",
      "Next = AcpiGbl_ModuleCodeList",
      "while (Next",
      "Prev = Next",
      "Next = Next->Method.Mutex",
      "Prev->Method.Mutex = NULL;",
      "AcpiUtRemoveReference (Prev"
    ],
    "removed_lines": [
      "#ifdef ACPI_EXEC_APP",
      "ACPI_OPERAND_OBJECT     *Prev",
      "ACPI_OPERAND_OBJECT     *Next",
      "Next = AcpiGbl_ModuleCodeList",
      "while (Next",
      "Prev = Next",
      "Next = Next->Method.Mutex",
      "Prev->Method.Mutex = NULL;",
      "AcpiUtRemoveReference (Prev",
      "#endif"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass +Info",
    "score": 3.6,
    "safe_features": [
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "vuln": "Bypass +Info ",
    "summary": [
      "does not flush the operand cache",
      "kernel stack dump"
    ]
  },
  {
    "index": 2425,
    "id": "CVE-2017-7418",
    "commit_id": "ecff21e0d0e84f35c299ef91d7fda088e516d4ed",
    "added_lines": [
      "static int is_symlink_path(pool *p, const char *path, size_t pathlen)",
      "int res, xerrno = 0",
      "struct stat st",
      "char *ptr",
      "if (pathlen == 0)",
      "return 0",
      "pr_fs_clear_cache",
      "res = pr_fsio_lstat(path, &st",
      "if (res < 0)",
      "xerrno = errno",
      "pr_log_pri(PR_LOG_WARNING, \"error: unable to check %s: %s\", path,",
      "strerror(xerrno",
      "errno = xerrno",
      "return -1",
      "if (S_ISLNK(st.st_mode))",
      "errno = EPERM",
      "return -1",
      "ptr = strrchr(path, '/'",
      "if (ptr != NULL)",
      "char *new_path",
      "size_t new_pathlen",
      "pr_signals_handle",
      "new_pathlen = ptr - path",
      "if (new_pathlen == pathlen)",
      "return 0",
      "new_path = pstrndup(p, path, new_pathlen",
      "pr_log_debug(DEBUG10,",
      "\"AllowChrootSymlink: path '%s' not a symlink, checking '%s'\", path,",
      "new_path",
      "res = is_symlink_path(p, new_path, new_pathlen",
      "if (res < 0)",
      "return -1",
      "return 0",
      "res = is_symlink_path(p, path, pathlen",
      "if (errno == EPERM)",
      "pr_log_pri(PR_LOG_WARNING, \"error: DefaultRoot %s is a symlink \"",
      "\"(denied by AllowChrootSymlinks config)\", path"
    ],
    "removed_lines": [
      "struct stat st",
      "pr_fs_clear_cache",
      "res = pr_fsio_lstat(path, &st",
      "xerrno = errno",
      "pr_log_pri(PR_LOG_WARNING, \"error: unable to check %s: %s\", path,",
      "strerror(xerrno",
      "errno = xerrno",
      "return -1",
      "if (S_ISLNK(st.st_mode))",
      "pr_log_pri(PR_LOG_WARNING,",
      "\"error: DefaultRoot %s is a symlink (denied by AllowChrootSymlinks \"",
      "\"config)\", path"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 2.1,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITHMETIC",
      "RETURN",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "NO_OP",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "AllowChrootSymlinks"
    ]
  },
  {
    "index": 2426,
    "id": "CVE-2017-7418",
    "commit_id": "f59593e6ff730b832dbe8754916cb5c821db579f",
    "added_lines": [
      "my $symlink_dst = File::Spec->rel2abs(\"$tmpdir/real\"",
      "unless (chdir($tmpdir))",
      "die(\"Can't chdir to $tmpdir: $!\"",
      "unless (symlink(\"./real\", \"./home.d\"))",
      "die(\"Can't symlink './real' to './home.d': $!\"",
      "mkpath(File::Spec->rel2abs(\"$tmpdir/real/symlinks/$user\"",
      "my $setup = test_setup($tmpdir, 'config', $user, undef, undef, $uid, $gid,",
      "$home_dir",
      "PidFile => $setup->{pid_file},",
      "ScoreboardFile => $setup->{scoreboard_file},",
      "SystemLog => $setup->{log_file},",
      "AuthUserFile => $setup->{auth_user_file},",
      "AuthGroupFile => $setup->{auth_group_file},",
      "my ($port, $config_user, $config_group) = config_write($setup->{config_file},",
      "$config",
      "eval { $client->login($user, $setup->{passwd})",
      "\"Expected response code $expected, got $resp_code\"",
      "\"Expected response message '$expected', got '$resp_msg'\"",
      "eval { server_wait($setup->{config_file}, $rfh)",
      "server_stop($setup->{pid_file",
      "test_cleanup($setup->{log_file}, $ex"
    ],
    "removed_lines": [
      "my $config_file = \"$tmpdir/config.conf\"",
      "my $pid_file = File::Spec->rel2abs(\"$tmpdir/config.pid\"",
      "my $scoreboard_file = File::Spec->rel2abs(\"$tmpdir/config.scoreboard\"",
      "my $log_file = test_get_logfile",
      "my $auth_user_file = File::Spec->rel2abs(\"$tmpdir/config.passwd\"",
      "my $auth_group_file = File::Spec->rel2abs(\"$tmpdir/config.group\"",
      "my $passwd = 'test'",
      "my $group = 'ftpd'",
      "my $intermed_dir = File::Spec->rel2abs(\"$tmpdir/home.d/symlinks\"",
      "mkpath($intermed_dir",
      "my $symlink_dst = File::Spec->rel2abs(\"$tmpdir/real/$user\"",
      "mkpath($symlink_dst",
      "unless (chdir($intermed_dir))",
      "die(\"Can't chdir to $intermed_dir: $!\"",
      "unless (symlink(\"../../real/$user\", \"./$user\"))",
      "die(\"Can't symlink '../../real/$user' to './$user': $!\"",
      "# Make sure that, if we're running as root, that the home directory has",
      "# permissions/privs set for the account we create",
      "if ($< == 0)",
      "unless (chmod(0755, $symlink_dst))",
      "die(\"Can't set perms on $symlink_dst to 0755: $!\"",
      "unless (chown($uid, $gid, $symlink_dst))",
      "die(\"Can't set owner of $symlink_dst to $uid/$gid: $!\"",
      "auth_user_write($auth_user_file, $user, $passwd, $uid, $gid, $home_dir,",
      "'/bin/bash'",
      "auth_group_write($auth_group_file, $group, $gid, $user",
      "PidFile => $pid_file,",
      "ScoreboardFile => $scoreboard_file,",
      "SystemLog => $log_file,",
      "AuthUserFile => $auth_user_file,",
      "AuthGroupFile => $auth_group_file,",
      "my ($port, $config_user, $config_group) = config_write($config_file, $config",
      "eval { $client->login($user, $passwd)",
      "test_msg(\"Expected response code $expected, got $resp_code\"",
      "test_msg(\"Expected response message '$expected', got '$resp_msg'\"",
      "eval { server_wait($config_file, $rfh)",
      "server_stop($pid_file",
      "if ($ex)",
      "test_append_logfile($log_file, $ex",
      "unlink($log_file",
      "die($ex",
      "unlink($log_file"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 2.1,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "AllowChrootSymlinks"
    ]
  },
  {
    "index": 2490,
    "id": "CVE-2017-7562",
    "commit_id": "1de6ca2f2eb1fdbab51f1549a25a6903aefcc196",
    "added_lines": [
      "b3RoZXJ3aXNlMB4XDTE3MDgyNTE4MzIxMVoXDTI4MDgwNzE4MzIxMVowSjELMAkG",
      "CgKCAQEAvwcVP/5SJr9NxIUgkl3tntkW8w5guESQLKpGFbWCAOnTGsgCiH9/LGri",
      "oh1Lx/sC6t/f2TPJL020MPaycrB+gtpmm6chc0sK6OuWup2Eqxl22XxpguaMiFMu",
      "7ius3lZkhFBQtuQuK6pzpkU6M5nGRHQ2QL8LJ9BMk7lrZNoyvB4uzCZjSTkqUCh6",
      "+myH4s9ewsLrqyqBi5YMPxzVn0aUjx1bZptE+35ZQqyQSAepgmsKSO88hmBLtQMD",
      "OlQ4JeikMOv+pD12cBjO33yv+kLHrbX/ZHgm21lt2xdANtBoeFXr2ImoAKpkHSUv",
      "Io4prhjZTnPLf763ql3egaVYKv3oPQIDAQABo4IBZDCCAWAwHQYDVR0OBBYEFK8S",
      "4FdU0q0iiYKQtzGmwqn0CD2rMIHUBgNVHSMEgcwwgcmAFK8S4FdU0q0iiYKQtzGm",
      "wqn0CD2roYGtpIGqMIGnMQswCQYDVQQGEwJVUzEWMBQGA1UECAwNTWFzc2FjaHVz",
      "AgMEMA0GCSqGSIb3DQEBCwUAA4IBAQClwfj6ACfmDie1YoKzr3zSWZJKZimv7wG1",
      "iZMNPE6bw22ZmE+P+Vq6WrY5M5e4u7ZdvFmkVq3rUA0HoU6bk3YLGapgsEAG6W1R",
      "LVzxwoYDf4poOMqjCL34eLFdlVeRDADiulROE8bJGrPLJIiqeii0c7Kzxxuh5nxl",
      "QHDgNV0fHQQJlejgJssOqgGErsCXCq7k6kkqB8MnKVMErRjsYuY3YI2tpjxBq9nA",
      "A9dXgIU1zEUVzfpxzBjL9+2pMctbL1y4/ePpTP1+PlfI81TwrQNvMGYjxKNZM1ab",
      "lZt37n8GQUZQyZ2TacR4JyY+w20ivE/JPN0L3Ncmem6bO1CULpwO"
    ],
    "removed_lines": [
      "b3RoZXJ3aXNlMB4XDTE2MTIxMjE0NDYzOVoXDTI3MTEyNTE0NDYzOVowSjELMAkG",
      "CgKCAQEA05a9cPK5tn8p/xBh09JGT+uyiDOpLSvJw0Qmn/qs+lNLjRTEZp7kzIsd",
      "+Y2XaZJ69GgdKqFvtx9Pqf2RHaRvccHSqGGF5wd7LiwbB36btYyEFCBW1hqJaS4R",
      "AMLv9JaRFjOZhfwnjW+tC6VdTb/ak5AKYbg0o+w2j69wqhPZIeXqqveV+VRogbTA",
      "O7hsWtazOTFy5KRTtJJcN/bFNNMnxB+07pZBjeDT50CFuNkUrFE7m6KnFRF7PkR6",
      "ZWxF7zq9cQguRrzm2JVLiZoKfeXcVYypwEdEU1r7+ixNvQn86a+91DdvO+xwbsoN",
      "G0xtFSelYKWvlH4BsZW8qhyPkjX4bQIDAQABo4IBZDCCAWAwHQYDVR0OBBYEFGvA",
      "yQ58yg3eh+Oi1JaMrRzbt9hiMIHUBgNVHSMEgcwwgcmAFGvAyQ58yg3eh+Oi1JaM",
      "rRzbt9hioYGtpIGqMIGnMQswCQYDVQQGEwJVUzEWMBQGA1UECAwNTWFzc2FjaHVz",
      "AgMEMA0GCSqGSIb3DQEBCwUAA4IBAQAzbpwzIFJk3a1BsrL7KT3B6aYNs5Z4bnwm",
      "9dG3D2S1OFSQAbQt/ap5Tjz1RWabqWaSb6ufAKudQ6Ab2uKT8QhtmVByQYKDLYvn",
      "bIGgoSeAcvWHWsTeReSADr2b0E9+UT8znvBDQGED39C1AgiVUWHgIExYU0kBrP3G",
      "1CgWQLb7nZC5rKOkcK/Nm4XL7Oe+neiCr4j9adbGxeNHmt8HPuLuNL9TWkMAkcFo",
      "5INHHFzNmW2aHdvO+7lDbK8/E0QwiES6UbBvQOkTyhC4W5u2Yy7qbpsQleu6jOEz",
      "l8b05sf4FxhHevHtYUVuyhMOg8DPmfclnGX0Dms7aLf0s3oeSVt+"
    ],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 4.0,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "authentication bypass"
    ]
  },
  {
    "index": 2491,
    "id": "CVE-2017-7562",
    "commit_id": "50fe4074f188c2d4da0c421e96553acea8378db2",
    "added_lines": [
      "if (retval)",
      "if (princs == NULL && upns == NULL)",
      "TRACE_PKINIT_SERVER_NO_SAN(context",
      "retval = ENOENT",
      "goto out",
      "return KRB5_PLUGIN_NO_HANDLE"
    ],
    "removed_lines": [
      "if (retval == ENOENT)",
      "TRACE_PKINIT_SERVER_NO_SAN(context",
      "goto out",
      "} else if (retval)",
      "return 0"
    ],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 4.0,
    "safe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "RETURN"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "FUNC_CALL",
      "RETURN"
    ],
    "vuln": "Bypass ",
    "summary": [
      "authentication bypass"
    ]
  },
  {
    "index": 3043,
    "id": "CVE-2011-2878",
    "commit_id": "b844a4c59562f28e4ae52d14565b4b6b4fbfccb0",
    "added_lines": [
      "\"skia_revision\": \"2051\","
    ],
    "removed_lines": [
      "\"skia_revision\": \"2034\","
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3073,
    "id": "CVE-2011-2856",
    "commit_id": "249475512632ab5f41c2a55aa40865f4666671a7",
    "added_lines": [
      "_log.error(\"Could not find apache. Not installed or unknown path.\""
    ],
    "removed_lines": [
      "_log.error(\"Could not find apache. Not installed or unknown path.\""
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3088,
    "id": "CVE-2011-2826",
    "commit_id": "80d94e9f6b103bcf391731f324c935beba9d2e4f",
    "added_lines": [
      "AC_MSG_RESULT([$enable_iframe_seamless]"
    ],
    "removed_lines": [
      "AC_MSG_RESULT([$enable_sandbox]"
    ],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "bypass the Same Origin Policy via vectors related to empty origins."
    ]
  },
  {
    "index": 3097,
    "id": "CVE-2011-2782",
    "commit_id": "20d1c99d9b53a0b2b419aae0075494a9d0b86daf",
    "added_lines": [
      "class TestTabContentsDelegate : public TabContentsDelegate",
      "public:",
      "explicit TestTabContentsDelegate() :",
      "navigation_state_change_count_(0)",
      "int navigation_state_change_count()",
      "return navigation_state_change_count_",
      "virtual void OpenURLFromTab(TabContents* source,",
      "const GURL& url, const GURL& referrer,",
      "WindowOpenDisposition disposition,",
      "PageTransition::Type transition)",
      "virtual void NavigationStateChanged(const TabContents* source,",
      "unsigned changed_flags)",
      "navigation_state_change_count_++",
      "virtual void AddNewContents(TabContents* source,",
      "TabContents* new_contents,",
      "WindowOpenDisposition disposition,",
      "const gfx::Rect& initial_pos,",
      "bool user_gesture)",
      "virtual void ActivateContents(TabContents* contents)",
      "virtual void DeactivateContents(TabContents* contents)",
      "virtual void LoadingStateChanged(TabContents* source)",
      "virtual void CloseContents(TabContents* source)",
      "virtual void MoveContents(TabContents* source, const gfx::Rect& pos)",
      "virtual void ToolbarSizeChanged(TabContents* source, bool is_animating)",
      "virtual void UpdateTargetURL(TabContents* source, const GURL& url)",
      "private:",
      "int navigation_state_change_count_",
      "TEST_F(NavigationControllerTest, LoadURL_IgnorePreemptsPending)",
      "TestNotificationTracker notifications",
      "RegisterForAllNavNotifications(&notifications, &controller",
      "scoped_ptr<TestTabContentsDelegate> delegate(new TestTabContentsDelegate",
      "EXPECT_FALSE(contents()->delegate",
      "contents()->set_delegate(delegate.get",
      "const GURL kExistingURL(\"about:blank\"",
      "const GURL kNewURL(\"http://eh\"",
      "controller().LoadURL(kNewURL, GURL(), PageTransition::TYPED",
      "EXPECT_EQ(0U, notifications.size",
      "EXPECT_EQ(-1, controller().pending_entry_index",
      "EXPECT_TRUE(controller().pending_entry",
      "EXPECT_EQ(-1, controller().last_committed_entry_index",
      "EXPECT_EQ(1, delegate->navigation_state_change_count",
      "rvh()->SendNavigate(-1, kExistingURL",
      "EXPECT_EQ(-1, controller().pending_entry_index",
      "EXPECT_FALSE(controller().pending_entry",
      "EXPECT_EQ(-1, controller().last_committed_entry_index",
      "EXPECT_EQ(2, delegate->navigation_state_change_count",
      "contents()->set_delegate(NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Configuration or Permissions Errors",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "permissions",
      "unspecified vectors"
    ]
  },
  {
    "index": 3110,
    "id": "CVE-2011-2795",
    "commit_id": "73edae623529f04c668268de49d00324b96166a2",
    "added_lines": [
      "2012-05-24  Ryosuke Niwa  <rniwa@webkit.org>",
      "There are too many poorly named functions to create a fragment from markup",
      "https://bugs.webkit.org/show_bug.cgi?id=87339",
      "Reviewed by Eric Seidel.",
      "Replace calls to Range::createDocumentFragmentForElement by calls to",
      "createContextualDocumentFragment.",
      "(QWebElement::appendInside):",
      "(QWebElement::prependInside):",
      "(QWebElement::prependOutside):",
      "(QWebElement::appendOutside):",
      "(QWebElement::encloseContentsWith):",
      "(QWebElement::encloseWith):"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 5.8,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not prevent calls to functions in other frames"
    ]
  },
  {
    "index": 3121,
    "id": "CVE-2011-2805",
    "commit_id": "3652e6bc1b90a1dddc22e491c2c0221b2d6f5bd0",
    "added_lines": [
      "# DCHECKs firing in Debug build. crbug.com/86456",
      "'-autofill.AutofillTest.testWhitespacesAndSeparatorCharsStrippedForValidCCNums',",
      "'-autofill.AutofillTest.testAggregatesMinValidProfile',",
      "'-autofill.AutofillTest.testCCInfoNotStoredWhenAutocompleteOff',",
      "'-autofill.AutofillTest.testInvalidCreditCardNumberIsNotAggregated',",
      "'-autofill.AutofillTest.testProfileWithEmailInOtherFieldNotSaved',",
      "'-autofill.AutofillTest.testProfilesNotAggregatedWithInvalidEmail',",
      "'-autofill.AutofillTest.testProfilesNotAggregatedWithNoAddress',"
    ],
    "removed_lines": [
      "'-autofill.AutofillTest.testWhitespacesAndSeparatorCharsStrippedForValidCCNums',",
      "'-autofill.AutofillTest.testAggregatesMinValidProfile',"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3122,
    "id": "CVE-2011-2819",
    "commit_id": "b0ce1496c71721bebd69de4b1a842c5977708d12",
    "added_lines": [
      "if (!(\"bind\" in Function.prototype))",
      "Function.prototype.bind = function(thisObject",
      "var func = this",
      "var args = Array.prototype.slice.call(arguments, 1",
      "return function bound",
      "return func.apply(thisObject, args.concat(Array.prototype.slice.call(arguments, 0"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "vectors related to handling of the base URI."
    ]
  },
  {
    "index": 3245,
    "id": "CVE-2012-2892",
    "commit_id": "3db59050895db1f36314b71893872f0b3bde82c3",
    "added_lines": [
      "ImageEditor.Mode.Crop.prototype.getDoubleTapAction = function(x, y)",
      "return this.cropRect_.getDoubleTapAction(x, y",
      "DraggableRect.prototype.getDoubleTapAction = function(x, y, touch)",
      "x = this.viewport_.screenToImageX(x",
      "y = this.viewport_.screenToImageY(y",
      "var clipRect = this.viewport_.getImageClipped",
      "if (clipRect.inside(x, y",
      "return ImageBuffer.DoubleTapAction.COMMIT",
      "else",
      "return ImageBuffer.DoubleTapAction.NOTHING"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 5"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unknown vectors",
      "Unspecified vulnerability"
    ]
  },
  {
    "index": 3309,
    "id": "CVE-2011-3080",
    "commit_id": "91a3a6fd03fb2427c9f3f3844137cfa955c80c01",
    "added_lines": [
      "define => \"ENABLE_STYLE_SCOPED\", default => isBlackBerry(), value => \\$styleScopedSupport },"
    ],
    "removed_lines": [
      "define => \"ENABLE_STYLE_SCOPED\", default => 0, value => \\$styleScopedSupport },"
    ],
    "cause": [
      "Race Condition or Concurrency",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "race condition",
      "unspecified vectors"
    ]
  },
  {
    "index": 3316,
    "id": "CVE-2011-3956",
    "commit_id": "04915c26ea193247b8a29aa24bfa34578ef5d39e",
    "added_lines": [
      "return (((pixel << 16) | (pixel >> 16)) & 0x00ff00ff) | (pixel & 0xff00ff00"
    ],
    "removed_lines": [
      "return ((pixel << 16) & 0xff0000) | ((pixel >> 16) & 0xff) | (pixel & 0xff00ff00"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "RETURN"
    ],
    "unsafe_features": [
      "RETURN"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly handle sandboxed origins"
    ]
  },
  {
    "index": 3357,
    "id": "CVE-2011-3084",
    "commit_id": "744c2a2d90c3c9a33c818e1ea4b7ccb5010663a0",
    "added_lines": [
      "virtual void AddBindings(int bindings)",
      "virtual int GetEnabledBindings() const { return 0;"
    ],
    "removed_lines": [],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not use a dedicated process for the loading of links found on an internal page"
    ]
  },
  {
    "index": 3381,
    "id": "CVE-2011-3054",
    "commit_id": "8ae91350332f188ef711228aa61b7809b74aa3a7",
    "added_lines": [
      "#include \"content/public/common/bindings_policy.h\"",
      "TEST_F(RenderViewHostTest, DontGrantBindingsToSharedProcess)",
      "scoped_ptr<TestTabContents> new_tab",
      "new TestTabContents(browser_context(), rvh()->GetSiteInstance",
      "rvh()->AllowBindings(content::BINDINGS_POLICY_WEB_UI",
      "EXPECT_FALSE(rvh()->GetEnabledBindings() & content::BINDINGS_POLICY_WEB_UI"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3383,
    "id": "CVE-2011-3056",
    "commit_id": "8fe074eec64f6942976acdd9dcd499bea36da2bd",
    "added_lines": [
      "2012-05-17  Kentaro Hara  <haraken@chromium.org>",
      "[perf-test] Add a binding benchmark for div.getAttribute",
      "https://bugs.webkit.org/show_bug.cgi?id=86814",
      "Reviewed by Ryosuke Niwa.",
      "We should remove Bindings/dom-attributes.html and instead add more",
      "reasonable micro benchmarks by classifying DOM binding call paths.",
      "This patch adds a benchmark for div.getAttribute(). This benchmark",
      "covers 'getAttribute' in Dromaeo/dom-attr.html, and other DOM methods",
      "that return a String.",
      "Test results in my Linux desktop:",
      "RESULT Bindings: get-attribute= 250.088158538 runs/s",
      "median= 250.469728765 runs/s, stdev= 4.66551901315 runs/s, min= 240.673886883 runs/s, max= 256.739409499 runs/s",
      "RESULT Bindings: get-attribute= 250.209764698 runs/s",
      "median= 250.626959986 runs/s, stdev= 4.12030002477 runs/s, min= 241.254523522 runs/s, max= 255.102040816 runs/s",
      "RESULT Bindings: get-attribute= 248.907532887 runs/s",
      "median= 250.312891114 runs/s, stdev= 3.23173125874 runs/s, min= 240.673886883 runs/s, max= 251.572327044 runs/s",
      "RESULT Bindings: get-attribute= 250.243680844 runs/s",
      "median= 250.783797637 runs/s, stdev= 4.19327170024 runs/s, min= 240.963855422 runs/s, max= 255.102040816 runs/s",
      "RESULT Bindings: get-attribute= 245.329046608 runs/s",
      "median= 244.948040416 runs/s, stdev= 2.24314248534 runs/s, min= 240.384615385 runs/s, max= 248.756218905 runs/s"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "Same Origin Policy via vectors involving a *magic iframe.*"
    ]
  },
  {
    "index": 3438,
    "id": "CVE-2013-2881",
    "commit_id": "d1617103b0fb2c6cf29f5c7ca491e03cbf2fcfd0",
    "added_lines": [
      "<script>",
      "if (window.testRunner",
      "testRunner.dumpAsText",
      "window[0] =",
      "a: \"1\",",
      "f: function()",
      "alert(\"FAIL: Child called parent.f()\"",
      "</script>",
      "<iframe src=\"data:text/html,<script>alert(parent[0].a);</script><script>parent[0].f();</script>\"></iframe><br>",
      "This test passes if the access is forbidden."
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 5.8,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not properly handle frames"
    ]
  },
  {
    "index": 3455,
    "id": "CVE-2013-2874",
    "commit_id": "c0da7c1c6e9ffe5006e146b6426f987238d4bf2e",
    "added_lines": [
      "intercepted_page_beforeunload_ = false"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 3470,
    "id": "CVE-2013-2859",
    "commit_id": "4801ff6578b3976731b13657715dcbe916c6a221",
    "added_lines": [
      "v8::Handle<v8::String> keyString = key->ToString",
      "if (type == v8::ACCESS_GET",
      "&& childFrame",
      "&& !host->HasRealNamedProperty(keyString",
      "&& !window->HasRealNamedProperty(keyString",
      "&& name != nameOfProtoProperty"
    ],
    "removed_lines": [
      "if (type == v8::ACCESS_GET && childFrame && !host->HasRealNamedProperty(key->ToString()) && name != nameOfProtoProperty"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3511,
    "id": "CVE-2013-0921",
    "commit_id": "e9841fbdaf41b4a2baaa413f94d5c0197f9261f4",
    "added_lines": [
      "virtual bool ShouldSwapProcessesForNavigation(SiteInstance* site_instance,",
      "const GURL& current_url,"
    ],
    "removed_lines": [
      "virtual bool ShouldSwapProcessesForNavigation(const GURL& current_url,"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly enforce the use of separate processes"
    ]
  },
  {
    "index": 3529,
    "id": "CVE-2013-0910",
    "commit_id": "ac8bd041b81e46e4e4fcd5021aaa5499703952e6",
    "added_lines": [
      "virtual bool IsPluginAvailable(int render_process_id,",
      "int render_view_id,",
      "const void* context,",
      "const GURL& url,",
      "const GURL& policy_url,",
      "webkit::WebPluginInfo* plugin) = 0"
    ],
    "removed_lines": [
      "virtual bool IsPluginEnabled(int render_process_id,",
      "int render_view_id,",
      "const void* context,",
      "const GURL& url,",
      "const GURL& policy_url,",
      "webkit::WebPluginInfo* plugin) = 0"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly manage the interaction between the browser process and renderer processes during authorization of the loading of a plug-in"
    ]
  },
  {
    "index": 3539,
    "id": "CVE-2012-5146",
    "commit_id": "74aaa70032784e7cf00256821f29b2b53edb6589",
    "added_lines": [
      "if (!p.is_valid())",
      "GURL reconstructed_url(p.possibly_invalid_spec",
      "if (reconstructed_url.is_valid())",
      "DLOG(WARNING) << \"GURL string \" << p.possibly_invalid_spec",
      "<< \" (marked invalid) but parsed as valid.\"",
      "m->WriteString(std::string",
      "return"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "CONTROL_FLOW",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 3548,
    "id": "CVE-2012-5155",
    "commit_id": "0d7717faeaef5b72434632c95c78bee4883e2573",
    "added_lines": [],
    "removed_lines": [
      "#if defined(OS_MACOS",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_OPEN_CURRENT_URL",
      "EXPECT_FALSE(chrome::IsCommandEnabled(browser(), IDC_SHOW_AS_TAB",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_FOCUS_TOOLBAR",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_FOCUS_LOCATION",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_FOCUS_SEARCH",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_FOCUS_MENU_BAR",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_FOCUS_NEXT_PANE",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_FOCUS_PREVIOUS_PANE",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_FOCUS_BOOKMARKS",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_DEVELOPER_MENU",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_FEEDBACK",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_OPTIONS",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_IMPORT_SETTINGS",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_EDIT_SEARCH_ENGINES",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_VIEW_PASSWORDS",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_ABOUT",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_SHOW_APP_MENU",
      "EXPECT_TRUE(chrome::IsCommandEnabled(browser(), IDC_FULLSCREEN",
      "#else",
      "#endif  // defined(OS_MACOS"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3553,
    "id": "CVE-2013-0829",
    "commit_id": "d123966ec156cd2f92fdada36be39694641b479e",
    "added_lines": [
      "const fileapi::FileSystemURL& url,"
    ],
    "removed_lines": [
      "const FilePath& virtual_path,"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.4,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3569,
    "id": "CVE-2014-7905",
    "commit_id": "0d77de2f5334b6d560487c5fd696178a3bfc3551",
    "added_lines": [
      "#include \"base/threading/thread_checker.h\"",
      "base::ThreadChecker thread_checker_"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not prevent navigation to a URL in cases where an intent for the URL lacks CATEGORY_BROWSABLE"
    ]
  },
  {
    "index": 3590,
    "id": "CVE-2014-3196",
    "commit_id": "fa16e7990bcbe4c1234bc62df0330f8bcece07fe",
    "added_lines": [
      "@SmallTest",
      "@Feature({\"Sync\"",
      "public void testOpeningSettingsDoesntStartBackend() throws Exception",
      "setupTestAccountAndSignInToSync(CLIENT_ID",
      "stopSync",
      "startSyncCustomizationFragment",
      "ThreadUtils.runOnUiThreadBlocking(new Runnable()",
      "@Override",
      "public void run()",
      "assertFalse(mProfileSyncService.isSyncRequested",
      "assertFalse(mProfileSyncService.isSyncInitialized"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3603,
    "id": "CVE-2014-3172",
    "commit_id": "684a212a93141908bcc10f4bc57f3edb53d2d21f",
    "added_lines": [
      "static bool IsValidSchemeForExtensions(const std::string& scheme"
    ],
    "removed_lines": [],
    "cause": [
      "Improper Input Validation"
    ],
    "effect": "Bypass",
    "score": 6.4,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not validate a tab's URL before an attach operation"
    ]
  },
  {
    "index": 3610,
    "id": "CVE-2014-3160",
    "commit_id": "ee281f7cac9df44fe241a37f188b28be8845ded0",
    "added_lines": [
      "#include \"core/svg/graphics/SVGImageChromeClient.h\"",
      "if (type != Resource::MainResource)",
      "if (frame() && frame()->chromeClient().isSVGImageChromeClient() && !url.protocolIsData",
      "return false"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not properly restrict subresource requests associated with SVG files"
    ]
  },
  {
    "index": 3655,
    "id": "CVE-2014-1703",
    "commit_id": "0ebe983f1cfdd383a4954127f564b83a4fe4992f",
    "added_lines": [],
    "removed_lines": [
      "int interface_id_"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "use-after-free"
    ]
  },
  {
    "index": 3678,
    "id": "CVE-2013-6661",
    "commit_id": "23cbfc1d685fa7389e88588584e02786820d4d26",
    "added_lines": [
      "<histogram name=\"SBClientDownload.DmgFileHasExecutable\" enum=\"Boolean\">",
      "<owner>rsesek@chromium.org</owner>",
      "<summary>",
      "For each DMG file analyzed by the SafeBrowsing download service, records if",
      "the DMG contained an executable file.",
      "</summary>",
      "</histogram>",
      "<histogram name=\"SBClientDownload.DmgFileSuccess\" enum=\"BooleanSuccess\">",
      "<owner>rsesek@chromium.org</owner>",
      "<summary>",
      "For each DMG file analyzed by the SafeBrowsing download service, records",
      "true if the analysis was successful, or false if there was an error",
      "analyzing the file.",
      "</summary>",
      "</histogram>",
      "<histogram name=\"SBClientDownload.ExtractDmgFeaturesTime\" units=\"milliseconds\">",
      "<owner>rsesek@chromium.org</owner>",
      "<summary>",
      "Records the time it takes for the SafeBrowsing download service to extract",
      "info from a downloaded DMG file.",
      "</summary>",
      "</histogram>"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "Multiple unspecified vulnerabilities",
      "unknown vectors"
    ]
  },
  {
    "index": 3703,
    "id": "CVE-2015-6768",
    "commit_id": "4c8b008f055f79e622344627fed7f820375a4f01",
    "added_lines": [
      "RELEASE_ASSERT(!m_frame || m_frame->tree().childCount() == 0"
    ],
    "removed_lines": [
      "ASSERT(!m_frame || m_frame->tree().childCount() == 0"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3704,
    "id": "CVE-2015-6769",
    "commit_id": "33c5e0a9db05dbd2f7793c23ac23b7aa6a556c05",
    "added_lines": [
      "<int value=\"-283388027\" label=\"ManualFallbacksFilling:disabled\"/>",
      "<int value=\"1169418814\" label=\"ManualFallbacksFilling:enabled\"/>"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "delay in window proxy clearing"
    ]
  },
  {
    "index": 3705,
    "id": "CVE-2015-6770",
    "commit_id": "a539348351ac085469042d099ddf61e148caa770",
    "added_lines": [
      "Var('webrtc_git') + '/src.git' + '@' + '12eb85881c865a67be07d04856383fea22890d6a', # commit position 21742"
    ],
    "removed_lines": [
      "Var('webrtc_git') + '/src.git' + '@' + '8d9dcb1c89354356df4e5c7623a907c05a3cc35a', # commit position 21742"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3707,
    "id": "CVE-2015-6772",
    "commit_id": "0b1b7baa4695c945a1b0bea1f0636f1219139e8e",
    "added_lines": [
      "env, ConvertUTF8ToJavaString(env, item.page_url.spec()), offline_id,",
      "offline_pages::ShouldOfflinePagesInDownloadHomeOpenInCct"
    ],
    "removed_lines": [
      "env, ConvertUTF8ToJavaString(env, item.page_url.spec()), offline_id"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "implementation in blink"
    ]
  },
  {
    "index": 3715,
    "id": "CVE-2015-6779",
    "commit_id": "1eefa26e1795192c5a347a1e1e7a99e88c47f9c4",
    "added_lines": [
      "render_view_host->GetProcess()->GetID(), url::kFileScheme"
    ],
    "removed_lines": [
      "content::RenderProcessHost* process = render_view_host->GetProcess",
      "if (type == Manifest::TYPE_EXTENSION ||",
      "type == Manifest::TYPE_LEGACY_PACKAGED_APP ||",
      "(type == Manifest::TYPE_PLATFORM_APP &&",
      "extension->location() == Manifest::COMPONENT))",
      "content::ChildProcessSecurityPolicy::GetInstance()->GrantScheme",
      "process->GetID(), content::kChromeUIScheme",
      "process->GetID(), url::kFileScheme"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      ", does not properly restrict use of chrome: URLs"
    ]
  },
  {
    "index": 3719,
    "id": "CVE-2015-6783",
    "commit_id": "d9e316238aee59acf665d80b544cf4e1edfd3349",
    "added_lines": [
      "const uint32_t kEndOfCentralDirectoryRecordSize =",
      "4 + 2 + 2 + 2 + 2 + 4 + 4 + 2",
      "int off = stat_buf.st_size - kEndOfCentralDirectoryRecordSize",
      "for (; off >= 0; --off)"
    ],
    "removed_lines": [
      "int off",
      "for (off = stat_buf.st_size - sizeof(kEndOfCentralDirectoryMarker",
      "off >= 0; --off)"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      ", improperly searches for an EOCD record"
    ]
  },
  {
    "index": 3721,
    "id": "CVE-2015-6785",
    "commit_id": "9e7ccfa5678bd4f7e12b46b1480f8b924360fb47",
    "added_lines": [
      "'MessageLoop::QuitWhenIdleClosure is deprecated. Please use a',",
      "'QuitWhenIdleClosure obtained from a specific RunLoop instance.',",
      "False,"
    ],
    "removed_lines": [
      "'MessageLoop::QuitWhenIdleClosure is deprecated. Please migrate to',",
      "'Runloop.',",
      "True,"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "accepts an x.y hostname as a match for a *.x.y pattern"
    ]
  },
  {
    "index": 3722,
    "id": "CVE-2015-6786",
    "commit_id": "5d0e9f824e05523e03dabc0e341b9f8f17a72bb0",
    "added_lines": [
      "TEST_F(CSPSourceListTest, BasicMatchingStar",
      "KURL base",
      "String sources = \"*\"",
      "CSPSourceList sourceList(csp.get(), \"script-src\"",
      "parseSourceList(sourceList, sources",
      "EXPECT_TRUE(sourceList.matches(KURL(base, \"http://example.com/\"",
      "EXPECT_TRUE(sourceList.matches(KURL(base, \"https://example.com/\"",
      "EXPECT_TRUE(sourceList.matches(KURL(base, \"http://example.com/bar\"",
      "EXPECT_TRUE(sourceList.matches(KURL(base, \"http://foo.example.com/\"",
      "EXPECT_TRUE(sourceList.matches(KURL(base, \"http://foo.example.com/bar\"",
      "EXPECT_FALSE(sourceList.matches(KURL(base, \"data:https://example.test/\"",
      "EXPECT_FALSE(sourceList.matches(KURL(base, \"blob:https://example.test/\"",
      "EXPECT_FALSE(sourceList.matches(KURL(base, \"filesystem:https://example.test/\""
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "accepts a blob:, data:, or filesystem: URL as a match for a * pattern"
    ]
  },
  {
    "index": 3724,
    "id": "CVE-2015-6755",
    "commit_id": "c71a21e6dda9025c2bf823c5aab791c2ae8cdfc2",
    "added_lines": [
      "if (nextChild.parentNode() != this",
      "return"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      " proceeds with a DOM tree insertion in certain cases where a parent node no longer contains a child node"
    ]
  },
  {
    "index": 3732,
    "id": "CVE-2015-6762",
    "commit_id": "c0c5c85acca945eb3399fb000b6b1bbdb5b2ab4e",
    "added_lines": [
      "# crbug.com/751738 Service worker subresource loader doesn't yet support request bodies.",
      "# crbug.com/778821 Null response body is given to NavigationURLLoaderDelegate::OnResponseStarted() as parameter.",
      "-WebRtcBrowserTest.RunsAudioVideoWebRTCCallInTwoTabsVP8",
      "-WebRtcBrowserTest.RunsAudioVideoWebRTCCallInTwoTabsVP9",
      "-WebrtcEventLogApiTest.TestStartStopWebRtcEventLogging",
      "-WebrtcEventLogApiTest.TestStartTimedWebRtcEventLogging",
      "# crbug.com/778814 Null NavigationData is given to NavigationURLLoaderDelegate::OnResponseStarted() as parameter.",
      "-ChromeResourceDispatcherHostDelegateBrowserTest.NavigationDataProcessed",
      "# crbug.com/778842 CHECK_EQ(num_bytes, output_size) failed in ReadData() at web_ui_url_loader_factory.cc.",
      "-DevToolsReattachAfterCrashTest.TestReattachAfterCrashOnNetwork",
      "-DevToolsReattachAfterCrashTest.TestReattachAfterCrashOnTimeline",
      "# crbug.com/778846 DCHECK() failed at URLDataManagerBackend::CheckURLIsValid().",
      "-CrSettingsPeoplePageTest.All",
      "-DomDistillerTabUtilsBrowserTest.TestDistillIntoWebContents",
      "-DomDistillerViewerSourceBrowserTest.DistillerJavaScriptExposed",
      "-DomDistillerViewerSourceBrowserTest.DistillerJavaScriptNotInMainWorld",
      "-DomDistillerViewerSourceBrowserTest.EarlyTemplateLoad",
      "-DomDistillerViewerSourceBrowserTest.MultiPageArticle",
      "-DomDistillerViewerSourceBrowserTest.NoWebUIBindingsArticleExists",
      "-DomDistillerViewerSourceBrowserTest.NoWebUIBindingsArticleNotFound",
      "-DomDistillerViewerSourceBrowserTest.PrefPersist",
      "-PrintPreviewDialogControllerBrowserTest.PdfPluginDisabled",
      "-PrintPreviewDialogControllerBrowserTest.PrintPreviewPdfAccessibility",
      "# crbug.com/778860 SecurityStyleExplanations::info_explanations is empty.",
      "-BrowserTestNonsecureURLRequest.DidChangeVisibleSecurityStateObserverObsoleteTLSSettings",
      "# crbug.com/778862 The URL of the extension to navigate to contains non utf-8 character.",
      "-ChromeSitePerProcessPDFTest.EmbeddedPDFInsideCrossOriginFrame",
      "-PDFExtensionTest.EnsureCrossOriginRepliesBlocked",
      "-PDFExtensionTest.PostMessageForZeroSizedEmbed",
      "-PDFExtensionTest.TabTitleWithEmbeddedPdf",
      "-SaveType/SavePageOriginalVsSavedComparisonTest.ObjectElementsViaFile/0",
      "-SaveType/SavePageOriginalVsSavedComparisonTest.ObjectElementsViaHttp/0",
      "# crbug.com/779115 The |devtools_extension_panel_rfh| is nullptr.",
      "-DevToolsExtensionTest.HttpIframeInDevToolsExtensionPanel",
      "# crbug.com/779121 The |url_chain_| contains one empty string at DownloadUrlSBClient::StartCheck().",
      "-DownloadTest.SaveLinkAsReferrerPolicyOrigin",
      "# crbug.com/779153 DCHECK(browser->IsActive()) fails at GetAppMenuButton().",
      "-IncognitoWindowTrackerBrowserTest.ShowPromo",
      "# crbug.com/779160 BrowserView::GetBrowserViewForBrowser(browser())->tabstrip()->new_tab_button()->new_tab_promo() is nullptr.",
      "-NewTabTrackerBrowserTest.TestShowPromo",
      "# crbug.com/779178 The |interstitial_page| is nullptr.",
      "-SSLUITest.TestInterstitialJavaScriptGoesBack",
      "-SSLUITest.TestInterstitialJavaScriptProceeds",
      "-SSLUITestWithExtendedReporting.TestBadClockReportingWithNoOptIn",
      "-SSLUITestWithExtendedReporting.TestBadClockReportingWithOptIn",
      "# crbug.com/779181 The |ip_map->at(test_server_host)| is empty.",
      "-SBNavigationObserverBrowserTest.AddIPMapping",
      "# crbug.com/779197 The |state_| is actualy CANCELLED_INTERNAL.",
      "-SBNavigationObserverBrowserTest.DownloadViaHTML5FileApiWithUserGesture",
      "-SBNavigationObserverBrowserTest.DownloadViaHTML5FileApiWithoutUserGesture",
      "# crbug.com/779210 NOTREACHED() reached at SaveFileManager::OnSaveURL().",
      "-SavePageBrowserTest.SavePageBrowserTest_NonMHTML",
      "# crbug.com/779215 The extension hasn't been installed when the test runs.",
      "-WebstoreInlineInstallerListenerTest.BothListenersTest",
      "# crbug.com/779217 The NetworkContext is not created when the network service is enabled.",
      "-HotwordInstallerBrowserTest.AbortInstallOnShutdown",
      "-SpellingMenuObserverTest.SuggestionsForceTopSeparator",
      "# crbug.com/779236 DCHECK(!params->url.is_empty()) fails at chrome::Navigate().",
      "-ReferrerPolicyTest.ContextMenuRedirect",
      "-ReferrerPolicyTest.HttpsContextMenuOrigin",
      "-ReferrerPolicyTest.HttpsContextMenuRedirect"
    ],
    "removed_lines": [
      "-BrowserTestNonsecureURLRequest.DidChangeVisibleSecurityStateObserverObsoleteTLSSettings",
      "-ChromeResourceDispatcherHostDelegateBrowserTest.NavigationDataProcessed",
      "-ChromeServiceWorkerFetchTest.EmbedPdfOtherOrigin",
      "-ChromeSitePerProcessPDFTest.EmbeddedPDFInsideCrossOriginFrame",
      "-CrSettingsPeoplePageTest.All",
      "-DevToolsExtensionTest.HttpIframeInDevToolsExtensionPanel",
      "-DevToolsReattachAfterCrashTest.TestReattachAfterCrashOnNetwork",
      "-DevToolsReattachAfterCrashTest.TestReattachAfterCrashOnTimeline",
      "-DomDistillerTabUtilsBrowserTest.TestDistillIntoWebContents",
      "-DomDistillerViewerSourceBrowserTest.DistillerJavaScriptExposed",
      "-DomDistillerViewerSourceBrowserTest.DistillerJavaScriptNotInMainWorld",
      "-DomDistillerViewerSourceBrowserTest.EarlyTemplateLoad",
      "-DomDistillerViewerSourceBrowserTest.MultiPageArticle",
      "-DomDistillerViewerSourceBrowserTest.NoWebUIBindingsArticleExists",
      "-DomDistillerViewerSourceBrowserTest.NoWebUIBindingsArticleNotFound",
      "-DomDistillerViewerSourceBrowserTest.PrefPersist",
      "-DownloadTest.SaveLinkAsReferrerPolicyOrigin",
      "-HotwordInstallerBrowserTest.AbortInstallOnShutdown",
      "-IncognitoWindowTrackerBrowserTest.ShowPromo",
      "-NewTabTrackerBrowserTest.TestShowPromo",
      "-PDFExtensionTest.EnsureCrossOriginRepliesBlocked",
      "-PDFExtensionTest.PostMessageForZeroSizedEmbed",
      "-PDFExtensionTest.TabTitleWithEmbeddedPdf",
      "-PrintPreviewDialogControllerBrowserTest.PdfPluginDisabled",
      "-PrintPreviewDialogControllerBrowserTest.PrintPreviewPdfAccessibility",
      "-ReferrerPolicyTest.ContextMenuRedirect",
      "-ReferrerPolicyTest.HttpsContextMenuOrigin",
      "-ReferrerPolicyTest.HttpsContextMenuRedirect",
      "-SBNavigationObserverBrowserTest.AddIPMapping",
      "-SBNavigationObserverBrowserTest.DownloadViaHTML5FileApiWithUserGesture",
      "-SBNavigationObserverBrowserTest.DownloadViaHTML5FileApiWithoutUserGesture",
      "-SSLUITest.TestInterstitialJavaScriptGoesBack",
      "-SSLUITest.TestInterstitialJavaScriptProceeds",
      "-SSLUITestWithExtendedReporting.TestBadClockReportingWithNoOptIn",
      "-SSLUITestWithExtendedReporting.TestBadClockReportingWithOptIn",
      "-SavePageBrowserTest.SavePageBrowserTest_NonMHTML",
      "-SaveType/SavePageOriginalVsSavedComparisonTest.ObjectElementsViaFile/0",
      "-SaveType/SavePageOriginalVsSavedComparisonTest.ObjectElementsViaHttp/0",
      "-SpellingMenuObserverTest.SuggestionsForceTopSeparator",
      "-WebRtcBrowserTest.RunsAudioVideoWebRTCCallInTwoTabsVP8",
      "-WebRtcBrowserTest.RunsAudioVideoWebRTCCallInTwoTabsVP9",
      "-WebrtcEventLogApiTest.TestStartStopWebRtcEventLogging",
      "-WebrtcEventLogApiTest.TestStartTimedWebRtcEventLogging",
      "-WebstoreInlineInstallerListenerTest.BothListenersTest"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "implementation in blink"
    ]
  },
  {
    "index": 3736,
    "id": "CVE-2015-1292",
    "commit_id": "7ee897723127d0b8fecc5e67d45e20179c760e6e",
    "added_lines": [
      "[RaisesException, CallWith=ExecutionContext] readonly attribute ServiceWorkerContainer serviceWorker"
    ],
    "removed_lines": [
      "[RaisesException] readonly attribute ServiceWorkerContainer serviceWorker"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS"
    ],
    "vuln": "Bypass ",
    "summary": [
      "service worker"
    ]
  },
  {
    "index": 3737,
    "id": "CVE-2015-1293",
    "commit_id": "d8fcf77c1946a7c5eaa8907f50a7e5df163a1a41",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors",
      "implementation in blink"
    ]
  },
  {
    "index": 3741,
    "id": "CVE-2015-1297",
    "commit_id": "86154b409eed6ea7f9177f6bf576e76533ab2f7b",
    "added_lines": [
      "0 ,",
      "if (web_view_instance_id == 0)",
      "DCHECK(embedder_process_id == 0 || that.embedder_process_id == 0",
      "return false",
      "if (embedder_process_id != that.embedder_process_id",
      "return embedder_process_id < that.embedder_process_id",
      "if (is_request_from_extension &&",
      "it->embedder_process_id != render_process_host_id",
      "continue",
      "int embedder_process_id = ipc_sender ? ipc_sender->render_process_id() : 0"
    ],
    "removed_lines": [
      "0 ,",
      "if (embedder_process_id != that.embedder_process_id",
      "return embedder_process_id < that.embedder_process_id",
      "int embedder_process_id =",
      "ipc_sender.get() && web_view_instance_id > 0 ?",
      "ipc_sender->render_process_id() : 0"
    ],
    "cause": [
      "Uncategorized Cluster 4",
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "RETURN",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly consider a request's source before accepting the request",
      "does not properly consider"
    ]
  },
  {
    "index": 3753,
    "id": "CVE-2015-1281",
    "commit_id": "dff368031150a1033a1a3c913f8857679a0279be",
    "added_lines": [
      "Microtask::performCheckpoint(mainThreadIsolate"
    ],
    "removed_lines": [
      "Microtask::performCheckpoint"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly determine the V8 context of a microtask"
    ]
  },
  {
    "index": 3759,
    "id": "CVE-2015-1287",
    "commit_id": "f479194866c3d9e08ef245ed0fdd5b9771ce6195",
    "added_lines": [
      "'../ppapi/tests/test_case.html.mock-http-headers',",
      "'../ppapi/tests/test_page.css.mock-http-headers',"
    ],
    "removed_lines": [],
    "cause": [
      "Configuration or Permissions Errors",
      "Uncategorized Cluster 1"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "enables a quirks-mode exception that limits the cases in which a Cascading Style Sheets (CSS) document is required to have the text/css content type",
      " enables a quirks-mode exception that limits the cases in which a Cascading Style Sheets (CSS) document is required to have the text/css content type, which allows remote attackers to bypass the Same Origin Policy via a crafted web site"
    ]
  },
  {
    "index": 3806,
    "id": "CVE-2015-1226",
    "commit_id": "7f5d55a7e2e1ca2cdc10b3cd7e38685f87215584",
    "added_lines": [
      "self.Fail('conformance2/textures/image_bitmap_from_video/' +",
      "'tex-2d-rgba32f-rgba-float.html',",
      "['linux', ('amd', 0x6613)], bug=701138"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not properly restrict what URLs are available as debugger targets"
    ]
  },
  {
    "index": 3810,
    "id": "CVE-2015-1303",
    "commit_id": "051023a269e548c5da19246c7db6e9870dac2f69",
    "added_lines": [
      ", m_tryCatch(isolate",
      ", m_convertExceptions(false",
      "if (withSecurityCheck)",
      "} else",
      "m_convertExceptions = true",
      "if (!m_didEnterContext)",
      "m_tryCatch.ReThrow",
      "if (m_tryCatch.HasCaught())",
      "if (m_convertExceptions)",
      "m_tryCatch.Reset",
      "convertException",
      "m_tryCatch.ReThrow",
      "void convertException",
      "v8::TryCatch m_tryCatch",
      "bool m_convertExceptions"
    ],
    "removed_lines": [
      "if (withSecurityCheck",
      "if (!m_didEnterContext"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "vuln": "Bypass ",
    "summary": [
      " does not perform a rethrow action to propagate information about a cross-context exception"
    ]
  },
  {
    "index": 3811,
    "id": "CVE-2015-1304",
    "commit_id": "03c9198815cc223325fd43182a7121de6f85b01e",
    "added_lines": [
      "<int value=\"-1457775295\" label=\"PasswordSearchMobile:disabled\"/>",
      "<int value=\"-1060395248\" label=\"PasswordSearchMobile:enabled\"/>"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not properly restrict method calls on access-checked objects"
    ]
  },
  {
    "index": 3812,
    "id": "CVE-2015-1302",
    "commit_id": "fff450abc4e2fb330ba700547a8e6a7b0fb90a6e",
    "added_lines": [
      "if (!document_url_var.is_string",
      "return false",
      "std::string document_url = document_url_var.AsString",
      "std::string print_preview_url = std::string(kChromePrint",
      "if (!base::StringPiece(document_url).starts_with(kChromeExtension) &&",
      "!base::StringPiece(document_url).starts_with(kChromePrint))",
      "return false",
      "for (uint32_t i = 0; i < argc; ++i)",
      "if (strcmp(argn[i], \"full-frame\") == 0)",
      "full_ = true",
      "break"
    ],
    "removed_lines": [
      "std::string document_url = document_url_var.is_string() ?",
      "document_url_var.AsString() : std::string",
      "bool in_extension =",
      "!document_url.compare(0, extension_url.size(), extension_url",
      "if (in_extension)",
      "for (uint32_t i = 0; i < argc; ++i)",
      "if (strcmp(argn[i], \"full-frame\") == 0)",
      "full_ = true",
      "break"
    ],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly restrict scripting messages and API exposure"
    ]
  },
  {
    "index": 3823,
    "id": "CVE-2016-5173",
    "commit_id": "180e7e74926ea32ac039821926542452d1201c5e",
    "added_lines": [
      "exports.$set('binding', chromeWebstore"
    ],
    "removed_lines": [
      "exports.binding = chromeWebstore"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly restrict access to Object.prototype"
    ]
  },
  {
    "index": 3854,
    "id": "CVE-2016-5192",
    "commit_id": "e99cc8e5a48ff4978d401c48a64f06649f647f3f",
    "added_lines": [
      "void redirectReceived(Resource*, ResourceRequest&, const ResourceResponse&) override"
    ],
    "removed_lines": [],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      " for Windows missed a CORS check on redirect in TextTrackLoader"
    ]
  },
  {
    "index": 3858,
    "id": "CVE-2016-5193",
    "commit_id": "95f564731a0379ed01a04775140730ef0d462ff9",
    "added_lines": [],
    "removed_lines": [
      "case BarItem.Type.COUNT:"
    ],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "insufficient validation of urls"
    ]
  },
  {
    "index": 3892,
    "id": "CVE-2016-1630",
    "commit_id": "925dad6467cd7a2b79322378eafa43d06371b081",
    "added_lines": [
      "return new ShellMainDelegate(true"
    ],
    "removed_lines": [
      "return new ShellMainDelegate"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "RETURN"
    ],
    "unsafe_features": [
      "RETURN"
    ],
    "vuln": "Bypass ",
    "summary": [
      "mishandles widget updates"
    ]
  },
  {
    "index": 3893,
    "id": "CVE-2016-1631",
    "commit_id": "dd77c2a41c72589d929db0592565125ca629fb2c",
    "added_lines": [
      "~TestFlashMessageLoop() override",
      "void RunTests(const std::string& filter) override",
      "void clear_instance_so() { instance_so_ = nullptr;",
      "void DidRunScriptCallback",
      "class InstanceSO",
      "pp::deprecated::ScriptableObject* CreateTestObject() override",
      "std::string TestSuspendScriptCallbackWhileRunning",
      "void TestSuspendScriptCallbackTask(int32_t unused",
      "InstanceSO* instance_so_",
      "bool suspend_script_callback_result_"
    ],
    "removed_lines": [
      "virtual ~TestFlashMessageLoop",
      "virtual void RunTests(const std::string& filter"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "mishandles nested message loops"
    ]
  },
  {
    "index": 3894,
    "id": "CVE-2016-1632",
    "commit_id": "3f38b2253b19f9f9595f79fb92bfb5077e7b1959",
    "added_lines": [
      "<obsolete>",
      "Removed April, 2018 as the information has never shown any problems.",
      "</obsolete>"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not properly maintain own properties"
    ]
  },
  {
    "index": 3898,
    "id": "CVE-2016-1636",
    "commit_id": "6a60f01228557982e6508c5919cc21fcfddf110b",
    "added_lines": [
      "#include <string>",
      "class WebRunnerContentBrowserClient",
      "static WebRunnerMainDelegate* GetInstanceForTest",
      "WebRunnerContentBrowserClient* browser_client()",
      "return browser_client_.get",
      "std::unique_ptr<WebRunnerContentBrowserClient> browser_client_"
    ],
    "removed_lines": [
      "std::unique_ptr<content::ContentBrowserClient> browser_client_"
    ],
    "cause": [
      "Uncategorized Cluster 8"
    ],
    "effect": "Bypass",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "relies on memory-cache information about integrity-check occurrences instead of integrity-check successes"
    ]
  },
  {
    "index": 3901,
    "id": "CVE-2016-1638",
    "commit_id": "4a7b10c29d7b0e477a43448d1462178f95c891f9",
    "added_lines": [
      "\"EnableVirtualKeyboardUkm\", base::FEATURE_ENABLED_BY_DEFAULT"
    ],
    "removed_lines": [
      "\"EnableVirtualKeyboardUkm\", base::FEATURE_DISABLED_BY_DEFAULT"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly restrict use of Web APIs"
    ]
  },
  {
    "index": 3915,
    "id": "CVE-2016-1696",
    "commit_id": "c0569cc04741cccf6548c2169fcc1609d958523f",
    "added_lines": [
      "RouteFunction(\"RunWithNativesEnabled\", \"test\",",
      "base::Bind(&V8ContextNativeHandler::RunWithNativesEnabled,",
      "base::Unretained(this"
    ],
    "removed_lines": [
      "RouteFunction",
      "\"RunWithNativesEnabled\",",
      "base::Bind(&V8ContextNativeHandler::RunWithNativesEnabled,",
      "base::Unretained(this"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "NO_OP",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3916,
    "id": "CVE-2016-1697",
    "commit_id": "1948aefa8901dca0ccb993753fca00b15d2a6e25",
    "added_lines": [
      "if (m_provisionalDocumentLoader)",
      "FrameNavigationDisabler navigationDisabler(*m_frame",
      "detachDocumentLoader(m_provisionalDocumentLoader"
    ],
    "removed_lines": [
      "detachDocumentLoader(m_provisionalDocumentLoader"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "CONTROL_FLOW",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      " does not prevent frame navigations during DocumentLoader detach operations"
    ]
  },
  {
    "index": 3918,
    "id": "CVE-2016-1699",
    "commit_id": "c5eecf67fd8d5e8d24d2d4d9489753d2c8cf6c59",
    "added_lines": [
      "function sanitizeRemoteFrontendUrl",
      "var queryParams = location.search",
      "if (!queryParams",
      "return",
      "var params = queryParams.substring(1).split(\"&\"",
      "for (var i = 0; i < params.length; ++i)",
      "var pair = params[i].split(\"=\"",
      "var name = pair.shift",
      "var value = pair.join(\"=\"",
      "if (name === \"remoteFrontendUrl\" && !value.startsWith(\"https://chrome-devtools-frontend.appspot.com/\"",
      "location.search = \"\"",
      "sanitizeRemoteFrontendUrl",
      "sanitizeRemoteFrontendUrl"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "RETURN",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      " does not ensure that the remoteFrontendUrl parameter is associated with a chrome-devtools-frontend.appspot.com URL"
    ]
  },
  {
    "index": 3922,
    "id": "CVE-2016-1667",
    "commit_id": "350f7d4b2c76950c8e7271284de84a9756b796e1",
    "added_lines": [
      "MOCK_METHOD1(OnWriteDataConsumed, void(uint32_t"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "implementation in blink"
    ]
  },
  {
    "index": 3923,
    "id": "CVE-2016-1668",
    "commit_id": "0cd7a9f853e3cb7c035b4ab9e07a503552267f9d",
    "added_lines": [
      "v8::Local<v8::Object> creationContext(thisValue.v8Value().As<v8::Object>"
    ],
    "removed_lines": [
      "v8::Local<v8::Object> creationContext(scriptState->context()->Global"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      " uses an improper creation context"
    ]
  },
  {
    "index": 3931,
    "id": "CVE-2016-1656",
    "commit_id": "4e33c5d6978752f31ed6702e72e46fdf78cd5565",
    "added_lines": [
      "import android.webkit.URLUtil",
      "String fileName = URLUtil.guessFileName",
      "url, null, OMADownloadHandler.OMA_DRM_MESSAGE_MIME",
      "final DownloadInfo downloadInfo =",
      "new DownloadInfo.Builder().setUrl(url).setFileName(fileName).build"
    ],
    "removed_lines": [
      "final DownloadInfo downloadInfo = new DownloadInfo.Builder().setUrl(url).build"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3933,
    "id": "CVE-2016-1658",
    "commit_id": "5c437bcc7a51edbef45242c5173cf7871fde2866",
    "added_lines": [
      "URL_EXPORT std::ostream& operator<<(std::ostream& out, const Origin& origin",
      "URL_EXPORT bool IsSameOriginWith(const GURL& a, const GURL& b"
    ],
    "removed_lines": [
      "URL_EXPORT std::ostream& operator<<(std::ostream& out,",
      "const Origin& origin"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass +Info",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass +Info ",
    "summary": [
      "incorrectly relies on GetOrigin method calls for origin comparisons"
    ]
  },
  {
    "index": 3938,
    "id": "CVE-2016-1622",
    "commit_id": "83a4b3aa72d98fe4176b4a54c8cea227ed966570",
    "added_lines": [
      "\"exports.$set('GetSchema', function() {});\"",
      "\"exports.$set('CHECK', function() {});\\n\"",
      "\"exports.$set('DCHECK', function() {});\\n\"",
      "\"exports.$set('WARNING', function() {});\""
    ],
    "removed_lines": [
      "\"exports.GetSchema = function() {};\"",
      "\"exports.CHECK = function() {};\\n\"",
      "\"exports.DCHECK = function() {};\\n\"",
      "\"exports.WARNING = function() {};\""
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not prevent use of the Object.defineProperty method to override intended extension behavior"
    ]
  },
  {
    "index": 3939,
    "id": "CVE-2016-1623",
    "commit_id": "4c8b008f055f79e622344627fed7f820375a4f01",
    "added_lines": [
      "RELEASE_ASSERT(!m_frame || m_frame->tree().childCount() == 0"
    ],
    "removed_lines": [
      "ASSERT(!m_frame || m_frame->tree().childCount() == 0"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "does not properly restrict frame-attach operations from occurring during or after frame-detach operations"
    ]
  },
  {
    "index": 3941,
    "id": "CVE-2016-1625",
    "commit_id": "41cc463ecc5f0ba708a2c8282a7e7208ca7daa57",
    "added_lines": [],
    "removed_lines": [
      "#include \"content/public/browser/content_browser_client.h\""
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [],
    "unsafe_features": [
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3944,
    "id": "CVE-2016-1627",
    "commit_id": "b4dc5a2e469b1348240ca9d2ec0385852ee4e5fd",
    "added_lines": [
      "#include \"ios/chrome/test/earl_grey/accessibility_util.h\"",
      "- (void)testAccessibilityOnNotStartedDownloadToolbar",
      "[ChromeEarlGrey loadURL:self.testServer->GetURL(\"/\")]",
      "[ChromeEarlGrey waitForWebViewContainingText:\"Download\"]",
      "[ChromeEarlGrey tapWebViewElementWithID:@\"download\"]",
      "[[EarlGrey selectElementWithMatcher:DownloadButton()]",
      "assertWithMatcher:grey_notNil()]",
      "chrome_test_util::VerifyAccessibilityForCurrentScreen",
      "- (void)testAccessibilityOnCompletedDownloadToolbar",
      "[ChromeEarlGrey loadURL:self.testServer->GetURL(\"/\")]",
      "[ChromeEarlGrey waitForWebViewContainingText:\"Download\"]",
      "[ChromeEarlGrey tapWebViewElementWithID:@\"download\"]",
      "[[EarlGrey selectElementWithMatcher:DownloadButton()]",
      "performAction:grey_tap()]",
      "GREYAssert(WaitForOpenInButton(), @\"Open in... button did not show up\"",
      "chrome_test_util::VerifyAccessibilityForCurrentScreen"
    ],
    "removed_lines": [],
    "cause": [
      "Improper Input Validation"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "does not validate URL schemes and ensure that the remoteBase parameter is associated with a chrome-devtools-frontend.appspot.com URL"
    ]
  },
  {
    "index": 3949,
    "id": "CVE-2017-5118",
    "commit_id": "0ab2412a104d2f235d7b9fe19d30ef605a410832",
    "added_lines": [
      "void DidInstallNewDocument(Document*, InstallNewDocumentReason"
    ],
    "removed_lines": [
      "void DidInstallNewDocument(Document*"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "failed to correctly propagate CSP restrictions to javascript scheme pages"
    ]
  },
  {
    "index": 4015,
    "id": "CVE-2017-5033",
    "commit_id": "14f2111f9cec919a450115ce4914f228effca58e",
    "added_lines": [
      "void EnsureScrollUpdateLatencyComponent(LatencyInfo* monitored_latency_info,",
      "base::TimeTicks original_timestamp"
    ],
    "removed_lines": [
      "bool last_injected_gesture_was_begin_"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "failed to correctly propagate CSP restrictions to local scheme pages"
    ]
  },
  {
    "index": 4039,
    "id": "CVE-2017-5022",
    "commit_id": "56af745149e24ef795c92c3177efb3f42ce52607",
    "added_lines": [
      "#         qualcomm-adreno-(tm)-540",
      "# Failing on Pixel 2 FYI.",
      "crbug.com/966069 [ android qualcomm-adreno-(tm)-540 ] Pixel_CanvasLowLatency2D [ Failure ]"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "failed to properly enforce unsafe-inline content security policy"
    ]
  },
  {
    "index": 4048,
    "id": "CVE-2016-5206",
    "commit_id": "a7a4c17843aac24470943630137e6f4a4822203f",
    "added_lines": [
      "document.getElementById(\"c\").style.backfaceVisibility = \"hidden\""
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "The PDF plugin"
    ]
  },
  {
    "index": 4060,
    "id": "CVE-2016-5217",
    "commit_id": "0d68cbd77addd38909101f76847deea56de00524",
    "added_lines": [
      "bool is_compositor_set_visible_ = false"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "The extensions API"
    ]
  },
  {
    "index": 4063,
    "id": "CVE-2016-5221",
    "commit_id": "2a1d9fff62718d7175bf47c7903dda127ee0228c",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "type confusion",
      "Type confusion in libGLESv2 in ANGLE",
      "type confusion"
    ]
  },
  {
    "index": 4066,
    "id": "CVE-2016-9650",
    "commit_id": "8035452b8c84024bdd90336e3b4586f0c52b8b69",
    "added_lines": [
      "entered",
      ".filter((f) =>",
      "return f.role == RoleType.EMBEDDED_OBJECT ||",
      "f.role == RoleType.IFRAME",
      ".reverse",
      ".forEach((container) =>",
      "if (!container.state[StateType.FOCUSED]",
      "container.focus"
    ],
    "removed_lines": [
      "var embeddedObject = entered.find(function(f)",
      "return f.role == RoleType.EMBEDDED_OBJECT",
      "if (embeddedObject && !embeddedObject.state[StateType.FOCUSED]",
      "embeddedObject.focus"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "RETURN",
      "ARRAY_ACCESS",
      "CONTROL_FLOW"
    ],
    "vuln": "Bypass ",
    "summary": [
      "incorrectly handled iframes"
    ]
  },
  {
    "index": 4069,
    "id": "CVE-2016-5225",
    "commit_id": "4ac4aff49c4c539bce6d8a0d8800c01324bb6bc0",
    "added_lines": [
      "if (!document().contentSecurityPolicy()->allowFormAction",
      "submission->action()))",
      "return"
    ],
    "removed_lines": [
      "if (!document().contentSecurityPolicy()->allowFormAction",
      "submission->action",
      "return"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "RETURN"
    ],
    "vuln": "Bypass ",
    "summary": [
      "incorrectly handled form actions"
    ]
  },
  {
    "index": 4070,
    "id": "CVE-2016-5224",
    "commit_id": "a4acc2991a60408f2044b2a3b19817074c04b751",
    "added_lines": [
      "(*annotations)[\"sdk\"] = base::StringPrintf(\"%d\", info->sdk_int"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "A timing attack on denormalized floating point arithmetic in SVG filters in Blink"
    ]
  },
  {
    "index": 4096,
    "id": "CVE-2018-18345",
    "commit_id": "2078096efde1976b0fa9c820df90cedbfb2b13bc",
    "added_lines": [
      "#include \"base/test/scoped_feature_list.h\"",
      "#include \"content/public/browser/blob_handle.h\"",
      "#include \"mojo/public/cpp/bindings/strong_associated_binding.h\"",
      "#include \"storage/browser/blob/blob_registry_impl.h\"",
      "#include \"third_party/blink/public/common/features.h\"",
      "std::unique_ptr<content::BlobHandle> CreateMemoryBackedBlob",
      "BrowserContext* browser_context,",
      "const std::string& contents,",
      "const std::string& content_type)",
      "std::unique_ptr<content::BlobHandle> result",
      "base::RunLoop loop",
      "BrowserContext::CreateMemoryBackedBlob",
      "browser_context, contents.c_str(), contents.length(), content_type,",
      "base::BindOnce",
      "[](std::unique_ptr<content::BlobHandle>* out_blob,",
      "base::OnceClosure done,",
      "std::unique_ptr<content::BlobHandle> blob)",
      "std::move(done).Run",
      "},",
      "&result, loop.QuitClosure",
      "loop.Run",
      "EXPECT_TRUE(result",
      "return result",
      "class BlobURLStoreInterceptor",
      ": public blink::mojom::BlobURLStoreInterceptorForTesting",
      "public:",
      "explicit BlobURLStoreInterceptor(GURL target_url) : target_url_(target_url)",
      "void Intercept",
      "mojo::StrongAssociatedBindingPtr<blink::mojom::BlobURLStore> binding)",
      "url_store_ = binding->SwapImplForTesting(this",
      "blink::mojom::BlobURLStore* GetForwardingInterface() override",
      "return url_store_",
      "void Register(blink::mojom::BlobPtr blob,",
      "const GURL& url,",
      "RegisterCallback callback) override",
      "GetForwardingInterface()->Register(std::move(blob), target_url_,",
      "std::move(callback",
      "private:",
      "blink::mojom::BlobURLStore* url_store_",
      "GURL target_url_",
      "IN_PROC_BROWSER_TEST_F(SecurityExploitBrowserTest,",
      "CreateBlobURLInDifferentOrigin)",
      "IsolateAllSitesForTesting(base::CommandLine::ForCurrentProcess",
      "GURL main_url(embedded_test_server()->GetURL(\"a.com\", \"/title1.html\"",
      "EXPECT_TRUE(NavigateToURL(shell(), main_url",
      "RenderFrameHost* rfh = shell()->web_contents()->GetMainFrame",
      "std::string blob_type = \"text/html\"",
      "std::string blob_contents = \"<html><body>pwned.</body></html>\"",
      "std::string blob_path = \"5881f76e-10d2-410d-8c61-ef210502acfd\"",
      "std::string target_origin = \"http://b.com\"",
      "std::unique_ptr<BlobHandle> blob = CreateMemoryBackedBlob",
      "rfh->GetSiteInstance()->GetBrowserContext(), blob_contents, blob_type",
      "std::string blob_id = blob->GetUUID",
      "base::HistogramTester histograms",
      "RenderProcessHostWatcher crash_observer",
      "rfh->GetProcess(), RenderProcessHostWatcher::WATCH_FOR_PROCESS_EXIT",
      "PwnMessageHelper::RegisterBlobURL",
      "rfh->GetProcess(), GURL(\"blob:\" + target_origin + \"/\" + blob_path),",
      "blob_id",
      "crash_observer.Wait",
      "histograms.ExpectUniqueSample(\"Stability.BadMessageTerminated.Content\",",
      "139 , 1",
      "class SecurityExploitBrowserTestMojoBlobURLs",
      ": public SecurityExploitBrowserTest",
      "public:",
      "SecurityExploitBrowserTestMojoBlobURLs()",
      "scoped_feature_list_.InitAndEnableFeature(blink::features::kMojoBlobURLs",
      "void TearDown() override",
      "storage::BlobRegistryImpl::SetURLStoreCreationHookForTesting(nullptr",
      "private:",
      "base::test::ScopedFeatureList scoped_feature_list_",
      "IN_PROC_BROWSER_TEST_F(SecurityExploitBrowserTestMojoBlobURLs,",
      "CreateMojoBlobURLInDifferentOrigin)",
      "IsolateAllSitesForTesting(base::CommandLine::ForCurrentProcess",
      "GURL main_url(embedded_test_server()->GetURL(\"a.com\", \"/title1.html\"",
      "EXPECT_TRUE(NavigateToURL(shell(), main_url",
      "RenderFrameHost* rfh = shell()->web_contents()->GetMainFrame",
      "std::string target_origin = \"http://b.com\"",
      "std::string blob_path = \"5881f76e-10d2-410d-8c61-ef210502acfd\"",
      "BlobURLStoreInterceptor interceptor",
      "GURL(\"blob:\" + target_origin + \"/\" + blob_path",
      "auto intercept_hook = base::BindRepeating(&BlobURLStoreInterceptor::Intercept,",
      "base::Unretained(&interceptor",
      "storage::BlobRegistryImpl::SetURLStoreCreationHookForTesting(&intercept_hook",
      "base::HistogramTester histograms",
      "RenderProcessHostWatcher crash_observer",
      "rfh->GetProcess(), RenderProcessHostWatcher::WATCH_FOR_PROCESS_EXIT",
      "ignore_result",
      "content::ExecuteScript(rfh, \"URL.createObjectURL(new Blob(['foo']))\"",
      "crash_observer.Wait",
      "histograms.ExpectUniqueSample(\"Stability.BadMessageTerminated.Content\", 123,",
      "1",
      "IN_PROC_BROWSER_TEST_F(SecurityExploitBrowserTest,",
      "CreateFilesystemURLInDifferentOrigin)",
      "IsolateAllSitesForTesting(base::CommandLine::ForCurrentProcess",
      "GURL main_url(embedded_test_server()->GetURL",
      "\"a.com\", \"/cross_site_iframe_factory.html?a(b)\"",
      "EXPECT_TRUE(NavigateToURL(shell(), main_url",
      "RenderFrameHost* rfh = shell()->web_contents()->GetMainFrame",
      "rfh->ExecuteJavaScriptWithUserGestureForTests",
      "base::ASCIIToUTF16(\"var r = new XMLHttpRequest();\"",
      "\"r.open('GET', '/slow?99999', false);\"",
      "\"r.send(null);\"",
      "\"while (1);\"",
      "std::string payload = \"<html><body>pwned.</body></html>\"",
      "std::string payload_type = \"text/html\"",
      "std::unique_ptr<content::BlobHandle> blob = CreateMemoryBackedBlob",
      "rfh->GetSiteInstance()->GetBrowserContext(), payload, payload_type",
      "std::string blob_id = blob->GetUUID",
      "std::string target_origin = \"http://b.com\"",
      "GURL target_url =",
      "GURL(\"filesystem:\" + target_origin + \"/temporary/exploit.html\"",
      "PwnMessageHelper::FileSystemCreate(rfh->GetProcess(), 23, target_url, false,",
      "false, false",
      "PwnMessageHelper::FileSystemWrite(rfh->GetProcess(), 24, target_url, blob_id,",
      "0",
      "TestNavigationObserver observer(shell()->web_contents",
      "FrameTreeNode* root = static_cast<WebContentsImpl*>(shell()->web_contents",
      "->GetFrameTree",
      "->root",
      "NavigateFrameToURL(root->child_at(0), target_url",
      "EXPECT_FALSE(observer.last_navigation_succeeded",
      "EXPECT_EQ(net::ERR_FILE_NOT_FOUND, observer.last_net_error_code",
      "RenderFrameHost* attacked_rfh = root->child_at(0)->current_frame_host",
      "std::string body =",
      "EvalJs(attacked_rfh, \"document.body.innerText\").ExtractString",
      "EXPECT_TRUE(base::StartsWith(body, \"Could not load the requested resource\",",
      "base::CompareCase::INSENSITIVE_ASCII",
      "<< \" body=\" << body"
    ],
    "removed_lines": [],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "incorrect handling of blob urls"
    ]
  },
  {
    "index": 4101,
    "id": "CVE-2018-18350",
    "commit_id": "d683fb12566eaec180ee0e0506288f46cc7a43e7",
    "added_lines": [
      "void DidInstallNewDocument(Document*, const ContentSecurityPolicy*"
    ],
    "removed_lines": [
      "void DidInstallNewDocument(Document*"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "incorrect handling of csp enforcement"
    ]
  },
  {
    "index": 4102,
    "id": "CVE-2018-18351",
    "commit_id": "07fbae50670ea44e35e1d554db1bbece7fe3711f",
    "added_lines": [
      "<!doctype html>",
      "<script src=\"/resources/testharness.js\"></script>",
      "<script src=\"/resources/testharnessreport.js\"></script>",
      "<script src=\"/cookies/resources/testharness-helpers.js\"></script>",
      "<body>",
      "<script>",
      "function addFrame(url)",
      "var i = document.createElement('iframe'",
      "i.src = url",
      "document.body.appendChild(i",
      "return i",
      "if (window.location.hostname == \"127.0.0.1\")",
      "window.location.hostname = ORIGINAL_HOST",
      "} else if (window.location.hostname == ORIGINAL_HOST)",
      "clearKnownCookies",
      "document.cookie = STRICT_DOM + \"=1; SameSite=Strict; Max-Age=100; path=/\"",
      "document.cookie = LAX_DOM + \"=1; SameSite=Lax; Max-Age=100; path=/\"",
      "document.cookie = NORMAL_DOM + \"=1; Max-Age=100; path=/\"",
      "window.location.hostname = TEST_HOST",
      "} else",
      "test(_ =>",
      "clearKnownCookies",
      "assert_equals(document.cookie, \"\"",
      "document.cookie = STRICT_DOM + \"=2; SameSite=Strict; domain=\" + TEST_HOST + \"; path=/\"",
      "document.cookie = LAX_DOM + \"=2; SameSite=Lax; domain=\" + TEST_HOST + \"; path=/\"",
      "document.cookie = NORMAL_DOM + \"=2; domain=\" + TEST_HOST + \"; path=/\"",
      "assert_equals(document.cookie, STRICT_DOM + \"=2; \" + LAX_DOM + \"=2; \" + NORMAL_DOM + \"=2\"",
      "}, \"Set cookies for TEST_HOST\"",
      "promise_test(_ =>",
      "var frame",
      "return new Promise(r =>",
      "window.onmessage = e =>",
      "var http_cookies = e.data.http",
      "assert_equals(http_cookies[STRICT_DOM], \"2\", \"strict http\"",
      "assert_equals(http_cookies[LAX_DOM], \"2\", \"lax http\"",
      "assert_equals(http_cookies[NORMAL_DOM], \"2\", \"normal http\"",
      "var dom_cookies = e.data.document",
      "assert_equals(dom_cookies, STRICT_DOM + \"=2; \" + LAX_DOM + \"=2; \" + NORMAL_DOM + \"=2\"",
      "r",
      "frame = addFrame(\"https://\" + TEST_HOST + \":8443/cookies/resources/post-cookies-to-top.php\"",
      "}, \"Same-origin frame receives all SameSite cookies.\"",
      "promise_test(_ =>",
      "var frame",
      "return new Promise(r =>",
      "window.onmessage = e =>",
      "var http_cookies = e.data.http",
      "assert_equals(http_cookies[STRICT_DOM], undefined, \"strict http\"",
      "assert_equals(http_cookies[LAX_DOM], undefined, \"lax http\"",
      "assert_equals(http_cookies[NORMAL_DOM], \"1\", \"normal http\"",
      "var dom_cookies = e.data.document",
      "assert_equals(dom_cookies, NORMAL_DOM + \"=1\"",
      "r",
      "frame = addFrame(\"https://\" + ORIGINAL_HOST + \":8443/cookies/resources/post-cookies-to-top.php\"",
      "}, \"Cross-origin frame receives no SameSite cookies.\"",
      "promise_test(_ =>",
      "var frame",
      "return new Promise(r =>",
      "window.onmessage = e =>",
      "var http_cookies = e.data.http",
      "assert_equals(http_cookies[STRICT_DOM], \"2\", \"strict http\"",
      "assert_equals(http_cookies[LAX_DOM], \"2\", \"lax http\"",
      "assert_equals(http_cookies[NORMAL_DOM], \"2\", \"normal http\"",
      "var dom_cookies = e.data.document",
      "assert_equals(dom_cookies, STRICT_DOM + \"=2; \" + LAX_DOM + \"=2; \" + NORMAL_DOM + \"=2\"",
      "r",
      "frame = addFrame",
      "\"https://\" + TEST_HOST + \":8443/cookies/resources/frame.php?url=\" +",
      "encodeURIComponent(\"https://\" + TEST_HOST + \":8443/cookies/resources/post-cookies-to-top.php\"",
      "}, \"Same-origin frame nested in same-origin frame receives all SameSite cookies.\"",
      "promise_test(_ =>",
      "var frame",
      "return new Promise(r =>",
      "window.onmessage = e =>",
      "var http_cookies = e.data.http",
      "assert_equals(http_cookies[STRICT_DOM], undefined, \"strict http\"",
      "assert_equals(http_cookies[LAX_DOM], undefined, \"lax http\"",
      "assert_equals(http_cookies[NORMAL_DOM], \"2\", \"normal http\"",
      "var dom_cookies = e.data.document",
      "assert_equals(dom_cookies, NORMAL_DOM + \"=2\"",
      "r",
      "frame = addFrame",
      "\"https://\" + ORIGINAL_HOST + \":8443/cookies/resources/frame.php?url=\" +",
      "encodeURIComponent(\"https://\" + TEST_HOST + \":8443/cookies/resources/post-cookies-to-top.php\"",
      "}, \"Same-origin frame nested in cross-origin frame receives no SameSite cookies.\"",
      "promise_test(_ =>",
      "var frame",
      "return new Promise(r =>",
      "window.onmessage = e =>",
      "var http_cookies = e.data.http",
      "assert_equals(http_cookies[STRICT_DOM], undefined, \"strict http\"",
      "assert_equals(http_cookies[LAX_DOM], undefined, \"lax http\"",
      "assert_equals(http_cookies[NORMAL_DOM], \"1\", \"normal http\"",
      "var dom_cookies = e.data.document",
      "assert_equals(dom_cookies, NORMAL_DOM + \"=1\"",
      "r",
      "frame = addFrame",
      "\"https://\" + TEST_HOST + \":8443/cookies/resources/frame.php?url=\" +",
      "encodeURIComponent(\"https://\" + ORIGINAL_HOST + \":8443/cookies/resources/post-cookies-to-top.php\"",
      "}, \"Cross-origin frame nested in same-origin frame receives no SameSite cookies.\"",
      "promise_test(_ =>",
      "var frame",
      "return new Promise(r =>",
      "window.onmessage = e =>",
      "var http_cookies = e.data.http",
      "assert_equals(http_cookies[STRICT_DOM], undefined, \"strict http\"",
      "assert_equals(http_cookies[LAX_DOM], undefined, \"lax http\"",
      "assert_equals(http_cookies[NORMAL_DOM], \"1\", \"normal http\"",
      "var dom_cookies = e.data.document",
      "assert_equals(dom_cookies, NORMAL_DOM + \"=1\"",
      "r",
      "frame = addFrame",
      "\"https://\" + ORIGINAL_HOST + \":8443/cookies/resources/frame.php?url=\" +",
      "encodeURIComponent(\"https://\" + ORIGINAL_HOST + \":8443/cookies/resources/post-cookies-to-top.php\"",
      "}, \"Cross-origin frame nested in cross-origin frame receives no SameSite cookies.\"",
      "</script>"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 1"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "Lack of proper validation of ancestor frames site when sending lax cookies in Navigation"
    ]
  },
  {
    "index": 4103,
    "id": "CVE-2018-18352",
    "commit_id": "a9cbaa7a40e2b2723cfc2f266c42f4980038a949",
    "added_lines": [
      "bool WouldTaintOrigin() const override { return false;"
    ],
    "removed_lines": [
      "bool DidGetOpaqueResponseFromServiceWorker() const override { return false;",
      "bool HasSingleSecurityOrigin() const override { return true;",
      "bool DidPassCORSAccessCheck() const override { return true;"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "gain access to cross origin audio"
    ]
  },
  {
    "index": 4138,
    "id": "CVE-2018-6040",
    "commit_id": "209f225b2d51334eaf69ffdf002e25eaa1e0d448",
    "added_lines": [
      "GetContentSecurityPolicy()->BindToExecutionContext(this"
    ],
    "removed_lines": [
      "GetContentSecurityPolicy()->BindToExecutionContext(this"
    ],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "insufficient policy enforcement"
    ]
  },
  {
    "index": 4167,
    "id": "CVE-2018-6103",
    "commit_id": "12c876ae82355de6285bf0879023f1d1f1822ecf",
    "added_lines": [
      "#include \"content/public/browser/content_browser_client.h\"",
      "#include \"content/public/browser/media_observer.h\"",
      "class MockMediaObserver : public MediaObserver",
      "public:",
      "MOCK_METHOD0(OnAudioCaptureDevicesChanged, void",
      "MOCK_METHOD0(OnVideoCaptureDevicesChanged, void",
      "MOCK_METHOD6",
      "OnMediaRequestStateChanged,",
      "void(int, int, int, const GURL&, MediaStreamType, MediaRequestState",
      "MOCK_METHOD2(OnCreatingAudioStream, void(int, int",
      "MOCK_METHOD5(OnSetCapturingLinkSecured,",
      "void(int, int, int, MediaStreamType, bool",
      "class TestBrowserClient : public ContentBrowserClient",
      "public:",
      "explicit TestBrowserClient(MediaObserver* media_observer",
      ": media_observer_(media_observer)",
      "~TestBrowserClient() override",
      "MediaObserver* GetMediaObserver() override { return media_observer_;",
      "private:",
      "MediaObserver* media_observer_",
      "media_observer_ = std::make_unique<MockMediaObserver>",
      "browser_content_client_ =",
      "std::make_unique<TestBrowserClient>(media_observer_.get",
      "SetBrowserClientForTesting(browser_content_client_.get",
      "std::unique_ptr<MockMediaObserver> media_observer_",
      "std::unique_ptr<ContentBrowserClient> browser_content_client_",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_DEVICE_AUDIO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_DEVICE_VIDEO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_TAB_AUDIO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_TAB_VIDEO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "EXPECT_CALL(*media_observer_, OnMediaRequestStateChanged",
      "_, _, _, _, MEDIA_DESKTOP_VIDEO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "EXPECT_CALL(*media_observer_, OnMediaRequestStateChanged",
      "_, _, _, _, MEDIA_DESKTOP_AUDIO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "std::string label1 = MakeMediaAccessRequest(0",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_DEVICE_AUDIO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_DEVICE_VIDEO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_TAB_AUDIO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_TAB_VIDEO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "EXPECT_CALL(*media_observer_, OnMediaRequestStateChanged",
      "_, _, _, _, MEDIA_DESKTOP_VIDEO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "EXPECT_CALL(*media_observer_, OnMediaRequestStateChanged",
      "_, _, _, _, MEDIA_DESKTOP_AUDIO_CAPTURE,",
      "MEDIA_REQUEST_STATE_CLOSING",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_DEVICE_AUDIO_CAPTURE,",
      "MEDIA_REQUEST_STATE_REQUESTED",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_DEVICE_VIDEO_CAPTURE,",
      "MEDIA_REQUEST_STATE_REQUESTED",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_DEVICE_AUDIO_CAPTURE,",
      "MEDIA_REQUEST_STATE_PENDING_APPROVAL",
      ".Times(2",
      "EXPECT_CALL(*media_observer_,",
      "OnMediaRequestStateChanged(_, _, _, _, MEDIA_DEVICE_VIDEO_CAPTURE,",
      "MEDIA_REQUEST_STATE_PENDING_APPROVAL",
      ".Times(2"
    ],
    "removed_lines": [
      "std::string label1 =  MakeMediaAccessRequest(0"
    ],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "A stagnant permission prompt in Prompts"
    ]
  },
  {
    "index": 4175,
    "id": "CVE-2018-6112",
    "commit_id": "38391374b79c006e85e3b9c912267a8d4daaa7cc",
    "added_lines": [
      "overflow-y: hidden",
      ".console-message-stack-trace-message",
      "overflow-y: hidden"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "Making URLs clickable and allowing them to be styled in DevTools"
    ]
  },
  {
    "index": 4177,
    "id": "CVE-2018-6114",
    "commit_id": "e56aee6473486fdfac0429747284fda7cdd3aae5",
    "added_lines": [
      "#include <utility>",
      "!GetElement()->FastGetAttribute(HTMLNames::srcsetAttr).IsNull())",
      "} else if (IsHTMLObjectElement(GetElement()))",
      "resource_request.SetRequestContext(WebURLRequest::kRequestContextObject",
      "} else if (IsHTMLEmbedElement(GetElement()))",
      "resource_request.SetRequestContext(WebURLRequest::kRequestContextEmbed"
    ],
    "removed_lines": [
      "!GetElement()->FastGetAttribute(HTMLNames::srcsetAttr).IsNull"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "Incorrect enforcement of CSP for <object> tags in Blink"
    ]
  },
  {
    "index": 4178,
    "id": "CVE-2018-6115",
    "commit_id": "bd0fde2518644eea1cc53a01e3e3cce1c70e7157",
    "added_lines": [
      "info.fMask = SEE_MASK_NOASYNC"
    ],
    "removed_lines": [
      "info.fMask = SEE_MASK_NOASYNC | SEE_MASK_FLAG_NO_UI"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "setting of the see_mask_flag_no_ui flag in file downloads"
    ]
  },
  {
    "index": 4185,
    "id": "CVE-2018-6057",
    "commit_id": "c0c8978849ac57e4ecd613ddc8ff7852a2054734",
    "added_lines": [
      "SensorReadingSharedBuffer* reading_buffer,"
    ],
    "removed_lines": [
      "mojo::ScopedSharedBufferMapping mapping,"
    ],
    "cause": [
      "Uncategorized Cluster 1"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "Lack of special casing of Android ashmem"
    ]
  },
  {
    "index": 4190,
    "id": "CVE-2018-6070",
    "commit_id": "f283cdf7c850f3db923a5303c7e01bd929d4117f",
    "added_lines": [
      "Type GetType() const override"
    ],
    "removed_lines": [
      "bool Initialize(const base::RepeatingClosure& error_uma_cb) override"
    ],
    "cause": [
      "Uncategorized Cluster 1"
    ],
    "effect": "XSS Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL"
    ],
    "vuln": "XSS Bypass ",
    "summary": [
      "lack of csp enforcement"
    ]
  },
  {
    "index": 4193,
    "id": "CVE-2018-6074",
    "commit_id": "c59ad14fc61393a50b2ca3e89c7ecaba7028c4c4",
    "added_lines": [
      "# HTML template for the print header. Should be valid HTML markup with following",
      "# classes used to inject printing values into them:",
      "# - date - formatted print date",
      "# - title - document title",
      "# - url - document location",
      "# - pageNumber - current page number",
      "# - totalPages - total pages in the document",
      "#",
      "# For example, <span class=title></span> would generate span containing the title.",
      "optional string headerTemplate",
      "# HTML template for the print footer. Should use the same format as the `headerTemplate`.",
      "optional string footerTemplate"
    ],
    "removed_lines": [],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "Failure to apply Mark-of-the-Web in Downloads"
    ]
  },
  {
    "index": 4251,
    "id": "CVE-2019-5838",
    "commit_id": "0660e08731fd42076d7242068e9eaed1482b14d5",
    "added_lines": [
      "enum class CaptureRequirement",
      "kActiveTabOrAllUrls,  // The extension needs to have the <all_urls> or",
      "kPageCapture,         // <all_urls> is not a requirement to be able to capture",
      "std::string* error,",
      "CaptureRequirement capture_requirement) const"
    ],
    "removed_lines": [
      "std::string* error) const"
    ],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "insufficient policy enforcement"
    ]
  },
  {
    "index": 4252,
    "id": "CVE-2019-5839",
    "commit_id": "19b1e5e4e1914b5b7464062ec300b817d2bac53d",
    "added_lines": [
      "{\"javascript:\", \"javascript:\"},",
      "{\"JavaScript:Foo\", \"javascript:Foo\"},",
      "{\"Foo:\\\":This /is interesting;?#\", \"foo:\\\":This /is interesting;?#\"},",
      "{\"javascript:\\uFFFF\", \"javascript:%EF%BF%BD\"},"
    ],
    "removed_lines": [
      "{\"javascript:\", \"javascript:\"},",
      "{\"JavaScript:Foo\", \"javascript:Foo\"},",
      "{\"Foo:\\\":This /is interesting;?#\", \"foo:\\\":This /is interesting;?#\"},"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "Excessive data validation in URL parser"
    ]
  },
  {
    "index": 4253,
    "id": "CVE-2019-5840",
    "commit_id": "956fb151e8496df183c868fdefd4d2e4c76378a8",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "incorrect security ui"
    ]
  },
  {
    "index": 4262,
    "id": "CVE-2019-5811",
    "commit_id": "4ffad4c407bc6e60b6c2f021a5a26abb8dc438d2",
    "added_lines": [
      "<!DOCTYPE html>",
      "<title>ServiceWorker FetchEvent issued from workers in an iframe sandboxed via CSP HTTP response header.</title>",
      "<script src=\"/resources/testharness.js\"></script>",
      "<script src=\"/resources/testharnessreport.js\"></script>",
      "<script src=\"resources/test-helpers.sub.js\"></script>",
      "<body>",
      "<script>",
      "let lastCallbackId = 0",
      "let callbacks =",
      "function doTest(frame, type)",
      "return new Promise(function(resolve)",
      "var id = ++lastCallbackId",
      "callbacks[id] = resolve",
      "frame.contentWindow.postMessage({id: id, type: type}, '*'",
      "function getResultsFromWorker(worker)",
      "return new Promise(resolve =>",
      "let channel = new MessageChannel",
      "channel.port1.onmessage = msg =>",
      "resolve(msg.data",
      "worker.postMessage({port: channel.port2}, [channel.port2]",
      "window.onmessage = function (e)",
      "message = e.data",
      "let id = message['id']",
      "let callback = callbacks[id]",
      "delete callbacks[id]",
      "callback(message['result']",
      "const SCOPE = 'resources/sandboxed-iframe-fetch-event-iframe.py'",
      "const SCRIPT = 'resources/sandboxed-iframe-fetch-event-worker.js'",
      "const expected_base_url = new URL(SCOPE, location.href",
      "let worker",
      "let sandboxed_frame_by_header",
      "let sandboxed_same_origin_frame_by_header",
      "promise_test(t =>",
      "return service_worker_unregister_and_register(t, SCRIPT, SCOPE",
      ".then(function(registration)",
      "add_completion_callback(() => registration.unregister",
      "worker = registration.installing",
      "return wait_for_state(t, registration.installing, 'activated'",
      "}, 'Prepare a service worker.'",
      "promise_test(t =>",
      "const iframe_full_url = expected_base_url + '?sandbox=allow-scripts&' +",
      "'sandboxed-frame-by-header'",
      "return with_iframe(iframe_full_url",
      ".then(f =>",
      "sandboxed_frame_by_header = f",
      "add_completion_callback(() => f.remove",
      "return getResultsFromWorker(worker",
      ".then(data =>",
      "let requests = data.requests",
      "assert_equals(requests.length, 1,",
      "'Service worker should provide the response'",
      "assert_equals(requests[0], iframe_full_url",
      "assert_false(data.clients.includes(iframe_full_url),",
      "'Service worker should NOT control the sandboxed page'",
      "}, 'Prepare an iframe sandboxed by CSP HTTP header with allow-scripts.'",
      "promise_test(t =>",
      "const iframe_full_url =",
      "expected_base_url + '?sandbox=allow-scripts%20allow-same-origin&' +",
      "'sandboxed-iframe-same-origin-by-header'",
      "return with_iframe(iframe_full_url",
      ".then(f =>",
      "sandboxed_same_origin_frame_by_header = f",
      "add_completion_callback(() => f.remove",
      "return getResultsFromWorker(worker",
      ".then(data =>",
      "let requests = data.requests",
      "assert_equals(requests.length, 1",
      "assert_equals(requests[0], iframe_full_url",
      "assert_true(data.clients.includes(iframe_full_url",
      "}, 'Prepare an iframe sandboxed by CSP HTTP header with allow-scripts and ' +",
      "'allow-same-origin.'",
      "promise_test(t =>",
      "let frame = sandboxed_frame_by_header",
      "return doTest(frame, 'fetch-from-worker'",
      ".then(result =>",
      "assert_equals(result, 'done'",
      "return getResultsFromWorker(worker",
      ".then(data =>",
      "assert_equals(data.requests.length, 0,",
      "'The request should NOT be handled by SW.'",
      "}, 'Fetch request from a worker in iframe sandboxed by CSP HTTP header ' +",
      "'allow-scripts flag'",
      "promise_test(t =>",
      "let frame = sandboxed_same_origin_frame_by_header",
      "return doTest(frame, 'fetch-from-worker'",
      ".then(result =>",
      "assert_equals(result, 'done'",
      "return getResultsFromWorker(worker",
      ".then(data =>",
      "let requests = data.requests",
      "assert_equals(requests.length, 1,",
      "'The request should be handled by SW.'",
      "assert_equals(requests[0], frame.src + '&test=fetch-from-worker'",
      "}, 'Fetch request from a worker in iframe sandboxed by CSP HTTP header ' +",
      "'with allow-scripts and allow-same-origin flag'",
      "</script>",
      "</body>"
    ],
    "removed_lines": [],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "incorrect handling of cors in serviceworker"
    ]
  },
  {
    "index": 4272,
    "id": "CVE-2019-5822",
    "commit_id": "2f81d000fdb5331121cba7ff81dfaaec25b520a5",
    "added_lines": [
      "int frame_tree_node_id,",
      "ResourceRequestInfoImpl* CreateRequestInfo(int child_id,",
      "int render_view_route_id,",
      "int render_frame_route_id,",
      "int frame_tree_node_id,",
      "PreviewsState previews_state,",
      "bool download,",
      "ResourceContext* context"
    ],
    "removed_lines": [
      "ResourceRequestInfoImpl* CreateRequestInfo",
      "int child_id,",
      "int render_view_route_id,",
      "int render_frame_route_id,",
      "PreviewsState previews_state,",
      "bool download,",
      "ResourceContext* context"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "implementation in blink"
    ]
  },
  {
    "index": 4273,
    "id": "CVE-2019-5823",
    "commit_id": "e8bf23bbbc3976d6a3418a7298a39bbf35c7beb3",
    "added_lines": [
      "<!DOCTYPE html>",
      "<meta charset=\"utf-8\">",
      "<title>Request navigate</title>",
      "<script>",
      "async function requestToNavigate()",
      "const sawMessage = new Promise((resolve) =>",
      "navigator.serviceWorker.onmessage = (event) =>",
      "resolve(event.data",
      "const registration = await navigator.serviceWorker.ready",
      "registration.active.postMessage({command: 'navigate', url: 'empty.html'",
      "return await sawMessage",
      "</script>"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 5.8,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "service worker",
      "insufficient policy enforcement"
    ]
  },
  {
    "index": 4285,
    "id": "CVE-2019-5799",
    "commit_id": "108147dfd1ea159fd3632ef92ccc4ab8952980c7",
    "added_lines": [
      "Expires: Mon, 26 Jul 1997 05:00:00 GMT",
      "Cache-Control: no-store, no-cache, must-revalidate",
      "Pragma: no-cache",
      "Set-Cookie: unsandboxed-data-scheme={{$id:uuid()}}; Path=/content-security-policy/inheritance/",
      "Content-Security-Policy: script-src 'nonce-abc'; report-uri http://{{host}}:{{ports[http][0]}}/content-security-policy/support/report.py?op=put&reportID={{$id"
    ],
    "removed_lines": [],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "Incorrect inheritance of a new document's policy in Content Security Policy"
    ]
  },
  {
    "index": 4286,
    "id": "CVE-2019-5800",
    "commit_id": "108147dfd1ea159fd3632ef92ccc4ab8952980c7",
    "added_lines": [
      "Expires: Mon, 26 Jul 1997 05:00:00 GMT",
      "Cache-Control: no-store, no-cache, must-revalidate",
      "Pragma: no-cache",
      "Set-Cookie: unsandboxed-data-scheme={{$id:uuid()}}; Path=/content-security-policy/inheritance/",
      "Content-Security-Policy: script-src 'nonce-abc'; report-uri http://{{host}}:{{ports[http][0]}}/content-security-policy/support/report.py?op=put&reportID={{$id"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "insufficient policy enforcement"
    ]
  },
  {
    "index": 4289,
    "id": "CVE-2019-5803",
    "commit_id": "0e3b0c22a5c596bdc24a391b3f02952c1c3e4f1b",
    "added_lines": [
      "<!DOCTYPE html>",
      "<head>",
      "<meta http-equiv=\"content-security-policy\" content=\"script-src 'self' 'nonce-abc'\">",
      "<script src=\"/resources/testharness.js\"></script>",
      "<script src=\"/resources/testharnessreport.js\"></script>",
      "</head>",
      "<body>",
      "<iframe src=\"support/frame-with-csp.sub.html?csp=script-src%20'self'%20'unsafe-inline'\"></iframe>",
      "<script nonce='abc'>",
      "var t = async_test(\"Should not have executed the javascript url\"",
      "const iframe = document.querySelector(\"iframe\"",
      "iframe.addEventListener('load', () =>",
      "window.onmessage = t.step_func(function(e)",
      "if (e.data == \"executed\"",
      "assert_true(false, \"Javascript url executed\"",
      "window.addEventListener('securitypolicyviolation', t.step_func_done(function(e)",
      "assert_equals(e.blockedURI, 'inline'",
      "iframe.contentWindow.location.href = 'javascript:parent.postMessage(\\'executed\\', \\'*\\')'",
      "</script>",
      "</body>"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "CONTROL_FLOW",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "insufficient policy enforcement"
    ]
  },
  {
    "index": 4316,
    "id": "CVE-2019-5778",
    "commit_id": "e13eb21898c7eba584f680e3d17ca1b9e28bc505",
    "added_lines": [
      "TEST(ExtensionURLPatternTest, ContainsSchemes)",
      "const URLPattern http(URLPattern::SCHEME_HTTP, URLPattern::kAllUrlsPattern",
      "const URLPattern chrome(URLPattern::SCHEME_CHROMEUI,",
      "URLPattern::kAllUrlsPattern",
      "const URLPattern http_and_https",
      "URLPattern::SCHEME_HTTP | URLPattern::SCHEME_HTTPS,",
      "URLPattern::kAllUrlsPattern",
      "const URLPattern http_https_and_chrome(URLPattern::SCHEME_HTTP |",
      "URLPattern::SCHEME_HTTPS |",
      "URLPattern::SCHEME_CHROMEUI,",
      "URLPattern::kAllUrlsPattern",
      "const std::map<const URLPattern*, std::set<const URLPattern*>> contains_map =",
      "{&http, {}},",
      "{&chrome, {}},",
      "{&http_and_https, {&http}},",
      "{&http_https_and_chrome, {&http, &http_and_https, &chrome}},",
      "const URLPattern* all_patterns[] = {&http, &chrome, &http_and_https,",
      "&http_https_and_chrome",
      "for (const auto& entry : contains_map)",
      "const URLPattern* pattern = entry.first",
      "const std::set<const URLPattern*>& contains_patterns = entry.second",
      "for (const URLPattern* other_pattern : all_patterns)",
      "SCOPED_TRACE(base::StringPrintf(\"Checking if %d contains %d\",",
      "pattern->valid_schemes(),",
      "other_pattern->valid_schemes",
      "bool expect_contains =",
      "pattern == other_pattern || contains_patterns.count(other_pattern",
      "EXPECT_EQ(expect_contains, pattern->Contains(*other_pattern",
      "EXPECT_TRUE(http.Contains",
      "URLPattern(URLPattern::SCHEME_HTTP | URLPattern::SCHEME_HTTPS,",
      "\"http://google.com/*\""
    ],
    "removed_lines": [],
    "cause": [
      "Configuration or Permissions Errors"
    ],
    "effect": "XSS Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "XSS Bypass ",
    "summary": [
      "A missing case for handling special schemes in permission request checks in Extensions"
    ]
  },
  {
    "index": 4317,
    "id": "CVE-2019-5779",
    "commit_id": "18c5c5dcef9cfccff64f0c23f920ef22822271a9",
    "added_lines": [
      "<html>",
      "<title>create service worker</title>",
      "</html>"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "insufficient policy validation"
    ]
  },
  {
    "index": 4330,
    "id": "CVE-2018-6161",
    "commit_id": "761c75d2d607638ff53c764b4925bcca9be601d8",
    "added_lines": [
      "bool WouldTaintOrigin",
      "bool is_origin_tainted_"
    ],
    "removed_lines": [
      "void OnCurrentSrcChanged(const KURL& current_src",
      "bool PassesCORSAccessCheck",
      "bool PassesCurrentSrcCORSAccessCheck(const KURL& current_src",
      "bool passes_current_src_cors_access_check_",
      "bool maybe_print_cors_message_",
      "String current_src_string_",
      "void OnCurrentSrcChanged(const KURL& current_src) override"
    ],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "vuln": "Bypass ",
    "summary": [
      "insufficient policy enforcement"
    ]
  },
  {
    "index": 4350,
    "id": "CVE-2018-4117",
    "commit_id": "a62f913109fc1566230f5963bbf69ee65274ebc8",
    "added_lines": [
      "if (fetch_request_data_->Redirect() != FetchRedirectMode::kFollow)",
      "PerformNetworkError(\"Fetch API cannot load \" +",
      "fetch_request_data_->Url().GetString() +",
      "\". Request mode is \\\"no-cors\\\" but the redirect mode \"",
      "\" is not \\\"follow\\\".\"",
      "return"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass +Info",
    "score": 4.3,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Bypass +Info ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 4362,
    "id": "CVE-2018-16072",
    "commit_id": "153f8457c7867d5c9b627c11b52f5de0671d2fff",
    "added_lines": [
      "bool demuxer_found_hls_ = false"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 8"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "A missing origin check related to HLS manifests in Blink"
    ]
  },
  {
    "index": 4363,
    "id": "CVE-2018-16073",
    "commit_id": "0bb3f5c715eb66bb5c1fb05fd81d902ca57f33ca",
    "added_lines": [
      "testRunner.queueLoad('resources/frame-navigation-child-1.html', 'target'",
      "testRunner.queueLoad('resources/frame-navigation-child-2.html', 'target'"
    ],
    "removed_lines": [
      "testRunner.queueLoad('data:text/html,test1', 'target'",
      "testRunner.queueLoad('data:text/html,test2', 'target'"
    ],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "insufficient policy enforcement"
    ]
  },
  {
    "index": 4364,
    "id": "CVE-2018-16074",
    "commit_id": "b1f87486936ca0d6d9abf4d3b9b423a9c976fd59",
    "added_lines": [
      "IN_PROC_BROWSER_TEST_F(SitePerProcessBrowserTest,",
      "TwoBlobURLsWithNullOriginDontShareProcess)",
      "GURL main_url(embedded_test_server()->GetURL",
      "\"a.com\", \"/navigation_controller/page_with_data_iframe.html\"",
      "EXPECT_TRUE(NavigateToURL(shell(), main_url",
      "FrameTreeNode* root = web_contents()->GetFrameTree()->root",
      "FrameTreeNode* subframe = root->child_at(0",
      "TestNavigationObserver observer(shell()->web_contents",
      "std::string blob_script =",
      "\"var blob = new Blob(['foo'], {type : 'text/html'});\"",
      "\"var url = URL.createObjectURL(blob);\"",
      "\"location = url;\"",
      "EXPECT_TRUE(ExecuteScript(subframe, blob_script",
      "observer.Wait",
      "RenderFrameHostImpl* subframe_rfh = subframe->current_frame_host",
      "EXPECT_TRUE(subframe_rfh->GetLastCommittedURL().SchemeIsBlob",
      "GURL popup_url(embedded_test_server()->GetURL",
      "\"b.com\", \"/navigation_controller/page_with_data_iframe.html\"",
      "Shell* new_shell = OpenPopup(root, popup_url, \"\"",
      "FrameTreeNode* popup_root =",
      "static_cast<WebContentsImpl*>(new_shell->web_contents",
      "->GetFrameTree",
      "->root",
      "FrameTreeNode* popup_subframe = popup_root->child_at(0",
      "TestNavigationObserver popup_observer(new_shell->web_contents",
      "EXPECT_TRUE(ExecuteScript(popup_subframe, blob_script",
      "popup_observer.Wait",
      "RenderFrameHostImpl* popup_subframe_rfh =",
      "popup_subframe->current_frame_host",
      "EXPECT_TRUE(popup_subframe_rfh->GetLastCommittedURL().SchemeIsBlob",
      "EXPECT_NE(subframe->current_frame_host()->GetSiteInstance(),",
      "popup_subframe->current_frame_host()->GetSiteInstance",
      "EXPECT_NE",
      "subframe->current_frame_host()->GetSiteInstance()->GetProcess(),",
      "popup_subframe->current_frame_host()->GetSiteInstance()->GetProcess",
      "EXPECT_NE",
      "subframe->current_frame_host()->GetSiteInstance()->GetSiteURL(),",
      "popup_subframe->current_frame_host()->GetSiteInstance()->GetSiteURL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "insufficient policy enforcement"
    ]
  },
  {
    "index": 4368,
    "id": "CVE-2018-16087",
    "commit_id": "01a6365651e0b1e9896b251411a18a4ab5a4306d",
    "added_lines": [
      "TEST_F(DownloadRequestLimiterTest, HistoryBack)",
      "NavigateAndCommit(GURL(\"http://foo.com/bar\"",
      "LoadCompleted",
      "CanDownload",
      "ExpectAndResetCounts(1, 0, 0, __LINE__",
      "EXPECT_EQ(DownloadRequestLimiter::PROMPT_BEFORE_DOWNLOAD,",
      "download_request_limiter_->GetDownloadStatus(web_contents",
      "EXPECT_EQ(DownloadRequestLimiter::DOWNLOAD_UI_DEFAULT,",
      "download_request_limiter_->GetDownloadUiStatus(web_contents",
      "content::NavigationSimulator::NavigateAndCommitFromDocument",
      "GURL(\"http://foobar.com/bar\"), web_contents()->GetMainFrame",
      "LoadCompleted",
      "EXPECT_EQ(DownloadRequestLimiter::PROMPT_BEFORE_DOWNLOAD,",
      "download_request_limiter_->GetDownloadStatus(web_contents",
      "EXPECT_EQ(DownloadRequestLimiter::DOWNLOAD_UI_DEFAULT,",
      "download_request_limiter_->GetDownloadUiStatus(web_contents",
      "auto backward_navigation =",
      "content::NavigationSimulator::CreateHistoryNavigation(-1 ,",
      "web_contents",
      "backward_navigation->Start",
      "backward_navigation->Commit",
      "EXPECT_EQ(DownloadRequestLimiter::PROMPT_BEFORE_DOWNLOAD,",
      "download_request_limiter_->GetDownloadStatus(web_contents",
      "EXPECT_EQ(DownloadRequestLimiter::DOWNLOAD_UI_DEFAULT,",
      "download_request_limiter_->GetDownloadUiStatus(web_contents",
      "NavigateAndCommit(GURL(\"http://foobar.com\"",
      "LoadCompleted",
      "EXPECT_EQ(DownloadRequestLimiter::ALLOW_ONE_DOWNLOAD,",
      "download_request_limiter_->GetDownloadStatus(web_contents",
      "EXPECT_EQ(DownloadRequestLimiter::DOWNLOAD_UI_DEFAULT,",
      "download_request_limiter_->GetDownloadUiStatus(web_contents",
      "CanDownload",
      "ExpectAndResetCounts(1, 0, 0, __LINE__",
      "EXPECT_EQ(DownloadRequestLimiter::PROMPT_BEFORE_DOWNLOAD,",
      "download_request_limiter_->GetDownloadStatus(web_contents",
      "EXPECT_EQ(DownloadRequestLimiter::DOWNLOAD_UI_DEFAULT,",
      "download_request_limiter_->GetDownloadUiStatus(web_contents",
      "backward_navigation = content::NavigationSimulator::CreateHistoryNavigation",
      "-1 , web_contents",
      "backward_navigation->Start",
      "backward_navigation->Commit",
      "EXPECT_EQ(DownloadRequestLimiter::ALLOW_ONE_DOWNLOAD,",
      "download_request_limiter_->GetDownloadStatus(web_contents",
      "EXPECT_EQ(DownloadRequestLimiter::DOWNLOAD_UI_DEFAULT,",
      "download_request_limiter_->GetDownloadUiStatus(web_contents",
      "TEST_F(DownloadRequestLimiterTest, HistoryForwardBack)",
      "NavigateAndCommit(GURL(\"http://foo.com/bar\"",
      "LoadCompleted",
      "CanDownload",
      "ExpectAndResetCounts(1, 0, 0, __LINE__",
      "EXPECT_EQ(DownloadRequestLimiter::PROMPT_BEFORE_DOWNLOAD,",
      "download_request_limiter_->GetDownloadStatus(web_contents",
      "EXPECT_EQ(DownloadRequestLimiter::DOWNLOAD_UI_DEFAULT,",
      "download_request_limiter_->GetDownloadUiStatus(web_contents",
      "content::NavigationSimulator::NavigateAndCommitFromDocument",
      "GURL(\"http://foobar.com/bar\"), web_contents()->GetMainFrame",
      "LoadCompleted",
      "EXPECT_EQ(DownloadRequestLimiter::PROMPT_BEFORE_DOWNLOAD,",
      "download_request_limiter_->GetDownloadStatus(web_contents",
      "EXPECT_EQ(DownloadRequestLimiter::DOWNLOAD_UI_DEFAULT,",
      "download_request_limiter_->GetDownloadUiStatus(web_contents",
      "auto backward_navigation =",
      "content::NavigationSimulator::CreateHistoryNavigation(-1 ,",
      "web_contents",
      "backward_navigation->Start",
      "backward_navigation->Commit",
      "EXPECT_EQ(DownloadRequestLimiter::PROMPT_BEFORE_DOWNLOAD,",
      "download_request_limiter_->GetDownloadStatus(web_contents",
      "EXPECT_EQ(DownloadRequestLimiter::DOWNLOAD_UI_DEFAULT,",
      "download_request_limiter_->GetDownloadUiStatus(web_contents",
      "auto forward_navigation =",
      "content::NavigationSimulator::CreateHistoryNavigation(1 ,",
      "web_contents",
      "forward_navigation->Start",
      "forward_navigation->Commit",
      "EXPECT_EQ(DownloadRequestLimiter::PROMPT_BEFORE_DOWNLOAD,",
      "download_request_limiter_->GetDownloadStatus(web_contents",
      "EXPECT_EQ(DownloadRequestLimiter::DOWNLOAD_UI_DEFAULT,",
      "download_request_limiter_->GetDownloadUiStatus(web_contents",
      "backward_navigation = content::NavigationSimulator::CreateHistoryNavigation",
      "-1 , web_contents",
      "backward_navigation->Start",
      "backward_navigation->Commit",
      "EXPECT_EQ(DownloadRequestLimiter::PROMPT_BEFORE_DOWNLOAD,",
      "download_request_limiter_->GetDownloadStatus(web_contents",
      "EXPECT_EQ(DownloadRequestLimiter::DOWNLOAD_UI_DEFAULT,",
      "download_request_limiter_->GetDownloadUiStatus(web_contents"
    ],
    "removed_lines": [],
    "cause": [
      "Configuration or Permissions Errors",
      "Configuration or Permissions Errors"
    ],
    "effect": "Bypass",
    "score": 0.0,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "permissions",
      "Lack of proper state tracking in Permissions"
    ]
  },
  {
    "index": 4370,
    "id": "CVE-2018-16077",
    "commit_id": "90f878780cce9c4b0475fcea14d91b8f510cce11",
    "added_lines": [
      "frame_->ShouldReuseDefaultView(url, document->GetContentSecurityPolicy"
    ],
    "removed_lines": [
      "frame_->ShouldReuseDefaultView(url"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "Object lifecycle issue",
      "Object lifecycle issue in Blink"
    ]
  },
  {
    "index": 4377,
    "id": "CVE-2018-16086",
    "commit_id": "8247b125c7b6888dc1c3932e19d6d8fe5a74a460",
    "added_lines": [
      "\"manifest_version\": 2,",
      "\"name\": \"NTP content script injection\",",
      "\"version\": \"1\",",
      "\"description\": \"Test for crbug.com/844428\",",
      "\"content_scripts\": [",
      "\"matches\": [",
      "\"<all_urls>\"",
      "],",
      "\"js\": [",
      "\"content_script.js\"",
      "],",
      "\"run_at\": \"document_start\",",
      "\"all_frames\": true",
      "],",
      "\"background\":",
      "\"scripts\": [",
      "\"background.js\"",
      "]"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 5.8,
    "safe_features": [
      "NO_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "insufficient policy enforcement"
    ]
  },
  {
    "index": 4380,
    "id": "CVE-2018-6148",
    "commit_id": "fa68dcfd12e376aa880b3193a77b896e6c54efdf",
    "added_lines": [
      "#include \"third_party/blink/renderer/platform/network/http_parsers.h\"",
      "SECURITY_DCHECK(!k.Contains('\\n') && !k.Contains('\\r'",
      "SECURITY_DCHECK(!v.Contains('\\n') && !v.Contains('\\r'",
      "SECURITY_DCHECK(!k.Contains('\\n') && !k.Contains('\\r'",
      "SECURITY_DCHECK(!v.Contains('\\n') && !v.Contains('\\r'"
    ],
    "removed_lines": [],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "Incorrect implementation in Content Security Policy"
    ]
  },
  {
    "index": 4391,
    "id": "CVE-2018-6134",
    "commit_id": "87e204e0aaf7445afbd0d50af6849d857517ae70",
    "added_lines": [
      ": PerformanceResourceTiming",
      "info ? info->FinalResponse().Url().GetString() : \"\",",
      "\"navigation\",",
      "time_origin,",
      "server_timing),"
    ],
    "removed_lines": [
      ": PerformanceResourceTiming(info ? info->InitialURL().GetString() : \"\",",
      "\"navigation\",",
      "time_origin,",
      "server_timing),"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass +Info",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass +Info ",
    "summary": [
      "information leak"
    ]
  },
  {
    "index": 4394,
    "id": "CVE-2018-6138",
    "commit_id": "0aca6bc05a263ea9eafee515fc6ba14da94c1964",
    "added_lines": [
      "bool CanCaptureVisiblePage(const GURL& document_url,",
      "const Extension* extension,",
      "int tab_id,",
      "std::string* error) const"
    ],
    "removed_lines": [
      "bool CanCaptureVisiblePage(int tab_id, std::string* error) const"
    ],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "Bypass",
    "score": 5.8,
    "safe_features": [
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "insufficient policy enforcement"
    ]
  },
  {
    "index": 4399,
    "id": "CVE-2018-6145",
    "commit_id": "133bc5c262b2555af223263452e9875a95db9eb7",
    "added_lines": [
      "bool IsHTMLIntegrationPointForStartTag(const CompactHTMLToken&) const",
      "bool IsHTMLIntegrationPointForEndTag(const CompactHTMLToken&) const"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": "XSS Bypass",
    "score": 4.3,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "XSS Bypass ",
    "summary": [
      "insufficient data validation"
    ]
  },
  {
    "index": 4407,
    "id": "CVE-2016-1672",
    "commit_id": "75b803b1c81ed9fa5513cbff550232b4fb915e7b",
    "added_lines": [
      "inline bool SetPrivateProperty(v8::Local<v8::Context> context,",
      "v8::Local<v8::Object> object,",
      "v8::Local<v8::String> key,",
      "v8::Local<v8::Value> value)",
      "return IsTrue(object->SetPrivate",
      "context, v8::Private::ForApi(context->GetIsolate(), key), value",
      "inline bool SetPrivateProperty(v8::Local<v8::Context> context,",
      "v8::Local<v8::Object> object,",
      "const char* key,",
      "v8::Local<v8::Value> value)",
      "v8::Local<v8::String> v8_key",
      "return ToV8String(context->GetIsolate(), key, &v8_key) &&",
      "IsTrue(object->SetPrivate",
      "context, v8::Private::ForApi(context->GetIsolate(), v8_key),",
      "value",
      "inline bool GetPrivateProperty(v8::Local<v8::Context> context,",
      "v8::Local<v8::Object> object,",
      "v8::Local<v8::String> key,",
      "v8::Local<v8::Value>* out)",
      "return object",
      "->GetPrivate(context, v8::Private::ForApi(context->GetIsolate(), key",
      ".ToLocal(out",
      "inline bool GetPrivateProperty(v8::Local<v8::Context> context,",
      "v8::Local<v8::Object> object,",
      "const char* key,",
      "v8::Local<v8::Value>* out)",
      "v8::Local<v8::String> v8_key",
      "return ToV8String(context->GetIsolate(), key, &v8_key) &&",
      "GetPrivateProperty(context, object, v8_key, out"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "RETURN",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "POINTER_OP",
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "RETURN",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 4408,
    "id": "CVE-2016-1673",
    "commit_id": "f0e3fbfaed015301ad64bf4362eedc554076ef8c",
    "added_lines": [
      "class LoadNytimesDesktopStory2018(_LoadingStory):",
      "NAME = 'load:news:nytimes:2018'",
      "URL = 'http://www.nytimes.com'",
      "TAGS = [story_tags.YEAR_2018]",
      "SUPPORTED_PLATFORMS = platforms.DESKTOP_ONLY"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL",
      "ARITHMETIC",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 4409,
    "id": "CVE-2016-1674",
    "commit_id": "14ff9d0cded8ae8032ef027d1f33c6666a695019",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 4410,
    "id": "CVE-2016-1675",
    "commit_id": "b276d0570cc816bfe25b431f2ee9bc265a6ad478",
    "added_lines": [
      "static_cast<int32_t>(total_bytes_to_be_received"
    ],
    "removed_lines": [
      "total_bytes_to_be_received"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Bypass ",
    "summary": [
      "mishandling of Document reattachment during destruction"
    ]
  },
  {
    "index": 4411,
    "id": "CVE-2016-1676",
    "commit_id": "5fb2548448bd1b76a59d941b729d7a7f90d53bc8",
    "added_lines": [
      "void DeepFreeze(const v8::Local<v8::Object>& object,",
      "const v8::Local<v8::Context>& context)",
      "v8::Maybe<bool> maybe =",
      "object->SetPrototype(context, v8::Null(context->GetIsolate",
      "CHECK(maybe.IsJust() && maybe.FromJust",
      "v8::Local<v8::Array> property_names = object->GetOwnPropertyNames",
      "for (uint32_t i = 0; i < property_names->Length(); ++i)",
      "v8::Local<v8::Value> child = object->Get(property_names->Get(i",
      "if (child->IsObject",
      "DeepFreeze(v8::Local<v8::Object>::Cast(child), context",
      "object->SetIntegrityLevel(context, v8::IntegrityLevel::kFrozen",
      "DeepFreeze(v8_schema, context"
    ],
    "removed_lines": [
      "v8_schema->SetIntegrityLevel(context, v8::IntegrityLevel::kFrozen"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "Bypass",
    "score": 6.8,
    "safe_features": [
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "FUNC_CALL",
      "ARITHMETIC",
      "FUNC_CALL"
    ],
    "unsafe_features": [
      "FUNC_CALL",
      "ARITHMETIC"
    ],
    "vuln": "Bypass ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 4417,
    "id": "CVE-2016-1682",
    "commit_id": "5289a5d4c98681e9a0f2d28da0c7aa35e282db57",
    "added_lines": [
      "#include \"core/frame/csp/ContentSecurityPolicy.h\"",
      "ContentSecurityPolicy* csp = executionContext->contentSecurityPolicy",
      "if (csp)",
      "if (!csp->allowWorkerContextFromSource(scriptURL, ContentSecurityPolicy::DidNotRedirect, ContentSecurityPolicy::SendReport))",
      "callbacks->onError(WebServiceWorkerError(WebServiceWorkerError::ErrorTypeSecurity, String(\"Failed to register a ServiceWorker: The provided scriptURL ('\" + scriptURL.getString() + \"') violates the Content Security Policy.\"",
      "return"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "ARITHMETIC",
      "POINTER_OP",
      "ARITHMETIC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITHMETIC",
      "FUNC_CALL",
      "ARITHMETIC",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 4428,
    "id": "CVE-2016-1692",
    "commit_id": "0e7afef059c96e617c203c6199220d248e7bef49",
    "added_lines": [
      "},",
      "\"id\": 279,",
      "\"description\": \"WindowServer crashes on VMWare bots using CA renderer\",",
      "\"cr_bugs\": [828031],",
      "\"os\":",
      "\"type\": \"macosx\"",
      "},",
      "\"vendor_id\": \"0x15ad\",",
      "\"multi_gpu_category\": \"any\",",
      "\"features\": [",
      "\"disable_overlay_ca_layers\"",
      "]"
    ],
    "removed_lines": [],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "Bypass",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [],
    "vuln": "Bypass ",
    "summary": [
      "incorrect MIME type"
    ]
  }
]