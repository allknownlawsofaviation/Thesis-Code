string->space = 1;,string->space *= 2;,if (string->space < 0),"g_warning (""glyph string length overflows maximum integer size, truncated"");",new_len = string->space = G_MAXINT - 8;
"@bind  <Button2>  = sh 'if [ ""\@SELECTED_URI"" ]; then uzbl-browser -u ""\@SELECTED_URI""; else echo ""uri $(xclip -o | sed s/\\\@/%40/g)"" > $4; fi'"
start_beanstalkd,"return reply_msg(c, MSG_JOB_TOO_BIG);"
"static gboolean irssi_ssl_verify(SSL *ssl, SSL_CTX *ctx, X509 *cert)","static GIOChannel *irssi_ssl_get_iochannel(GIOChannel *handle, const char *mycert, const char *mypkey, const char *cafile, const char *capath, gboolean verify)","GIOChannel *net_connect_ip_ssl(IPADDR *ip, int port, IPADDR *my_ip, const char *cert, const char *pkey, const char *cafile, const char *capath, gboolean verify)","ssl_handle  = irssi_ssl_get_iochannel(handle, cert, pkey, cafile, capath, verify);","ret = !chan->verify || irssi_ssl_verify(chan->ssl, chan->ctx, cert);","GIOChannel *net_connect_ip_ssl(IPADDR *ip, int port, IPADDR *my_ip, const char *cert, const char *pkey, const char *cafile, const char *capath, gboolean verify);","net_connect_ip_ssl(ip, port, own_ip, server->connrec->ssl_cert, server->connrec->ssl_pkey,"
"if (strcmp(ptr, ""get "") && strcmp(ptr, ""gets "")) {"
### JAVASCRIPT HELPER OBJECT,### JAVASCRIPT SECURITY,"Since defined variables and functions are set in the global namespace (`window` object) as default, it is recommended to wrap your scripts like this:",(function(Uzbl) {,...,})(Uzbl);,"This way, everything is kept private. It also turns Uzbl into a local variable, which can be accessed from callback functions defined inside. However for some situations, isolating everything isn't an option, for example, with binds. You can define them directly in the script body, and use `var Uzbl = window.Uzbl;` to make the Uzbl variable local, as in the following example:",function f() {,var Uzbl = window.Uzbl;,Uzbl.run(...);,setTimeout(function() {,Uzbl.run(...);,"}, 500);",},"Copying the Uzbl object and creating public functions should be taken with care to avoid creating security holes. Keep in mind that the ""f"" function above would be defined in the `window` object, and as such any javascript in the current page can call it.","uzbl.net.useragent = ""Test useragent"";","parse_cmd_line(""js Uzbl.run('print @useragent').toUpperCase();"", result);","g_assert_cmpstr(""TEST USERAGENT"", ==, result->str);",JSStringRef var_name;,"var_name = JSStringCreateWithUTF8CString(""Uzbl"");","JSObjectSetProperty(context, globalobject, var_name,","JSObjectMake(context, uzbl.js.classref, NULL),","kJSClassAttributeNone, NULL);","JSObjectDeleteProperty(context, globalobject, var_name, NULL);",JSStringRelease(var_name);

static size_t scanned;,static size_t readnbd;
#define BUFSIZE (1024*1024),if (len > BUFSIZE + sizeof(struct nbd_reply))
if (len < 0 || addr.nl_pid) {
if (need_zonelists_rebuild),"build_all_zonelists(NULL, zone);",else,zone_pcp_update(zone);,if (onlined_pages) {,"node_set_state(zone_to_nid(zone), N_HIGH_MEMORY);",}
u64 t = ca->sum_rtt;,"do_div(t, ca->cnt_rtt);",info.tcpv_rtt = t;
"err = ext4_ext_zeroout(inode, &orig_ex);",split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ?,EXT4_EXT_MAY_ZEROOUT : 0;,split_flag1 = split_flag & EXT4_EXT_MAY_ZEROOUT ?,EXT4_EXT_MAY_ZEROOUT : 0;,"struct inode *inode,",struct ext4_ext_path *path),"(unsigned long long)le32_to_cpu(ex->ee_block),",ext4_ext_get_actual_len(ex));,"ret = ext4_convert_unwritten_extents_endio(handle, inode,"
"err = compat_put_timeval(up, &ktv);","err = compat_put_timespec(up, &kts);"
"static void frag_kfree_skb(struct netns_frags *nf, struct sk_buff *skb)",{,"atomic_sub(skb->truesize, &nf->mem);",kfree_skb(skb);,},if (prev) {,int i = (FRAG6_CB(prev)->offset + prev->len) - offset;,if (i > 0) {,offset += i;,if (end <= offset),goto err;,"if (!pskb_pull(skb, i))",goto err;,if (skb->ip_summed != CHECKSUM_UNNECESSARY),skb->ip_summed = CHECKSUM_NONE;,},},while (next && FRAG6_CB(next)->offset < end) {,int i = end - FRAG6_CB(next)->offset;,if (i < next->len) {,"if (!pskb_pull(next, i))",goto err;,FRAG6_CB(next)->offset += i;,fq->q.meat -= i;,if (next->ip_summed != CHECKSUM_UNNECESSARY),next->ip_summed = CHECKSUM_NONE;,break;,} else {,struct sk_buff *free_it = next;,next = next->next;,if (prev),prev->next = next;,else,fq->q.fragments = next;,fq->q.meat -= free_it->len;,"frag_kfree_skb(fq->q.net, free_it);",},}
#define optlength(opt) (sizeof(struct ip_options) + opt->optlen),struct ip_options	*opt;,struct ip_options	*opt;,struct ip_options	*opt;,struct ip_options *opt);,"extern void ip_options_build(struct sk_buff *skb, struct ip_options *opt, __be32 daddr, struct rtable *rt, int is_frag);","extern int ip_options_get(struct net *net, struct ip_options **optp,","extern int ip_options_get_from_user(struct net *net, struct ip_options **optp,",if (inet->opt != NULL && inet->opt->srr) {,nexthop = inet->opt->faddr;,if (inet->opt == NULL || !inet->opt->srr),if (inet->opt != NULL),inet_csk(sk)->icsk_ext_hdr_len = inet->opt->optlen;,newinet->opt	   = ireq->opt;,newinet->opt = NULL;,kfree(inet->opt);,if (inet->opt && inet->opt->srr),daddr = inet->opt->faddr;,if (inet->opt && inet->opt->srr),daddr = inet->opt->faddr;,struct ip_options *opt = NULL;,"memcpy(opt->__data, buf, buf_len);",opt->optlen = opt_len;,opt->cipso = sizeof(struct iphdr);,if (sk_inet->opt),sk_conn->icsk_ext_hdr_len -= sk_inet->opt->optlen;,sk_conn->icsk_ext_hdr_len += opt->optlen;,"opt = xchg(&sk_inet->opt, opt);",kfree(opt);,struct ip_options *opt = NULL;,"memcpy(opt->__data, buf, buf_len);",opt->optlen = opt_len;,opt->cipso = sizeof(struct iphdr);,kfree(opt);,static int cipso_v4_delopt(struct ip_options **opt_ptr),struct ip_options *opt = *opt_ptr;,if (opt->srr || opt->rr || opt->ts || opt->router_alert) {,cipso_off = opt->cipso - sizeof(struct iphdr);,cipso_ptr = &opt->__data[cipso_off];,if (opt->srr > opt->cipso),opt->srr -= cipso_len;,if (opt->rr > opt->cipso),opt->rr -= cipso_len;,if (opt->ts > opt->cipso),opt->ts -= cipso_len;,if (opt->router_alert > opt->cipso),opt->router_alert -= cipso_len;,opt->cipso = 0;,opt->optlen - cipso_off - cipso_len);,while (iter < opt->optlen),if (opt->__data[iter] != IPOPT_NOP) {,iter += opt->__data[iter + 1];,hdr_delta = opt->optlen;,opt->optlen = (optlen_new + 3) & ~3;,hdr_delta -= opt->optlen;,hdr_delta = opt->optlen;,kfree(opt);,struct ip_options *opt;,opt = sk_inet->opt;,if (opt == NULL || opt->cipso == 0),hdr_delta = cipso_v4_delopt(&sk_inet->opt);,struct ip_options *opt;,if (opt == NULL || opt->cipso == 0),struct ip_options *opt;,opt = inet_sk(sk)->opt;,if (opt == NULL || opt->cipso == 0),return -ENOMSG;,"return cipso_v4_getattr(opt->__data + opt->cipso - sizeof(struct iphdr),",secattr);,struct ip_options replyopts;,unsigned char  optbuf[40];,"if (ip_options_echo(&icmp_param->replyopts, skb))",if (icmp_param->replyopts.optlen) {,ipc.opt = &icmp_param->replyopts;,if (ipc.opt->srr),daddr = icmp_param->replyopts.faddr;,.daddr = (param->replyopts.srr ?,"param->replyopts.faddr : iph->saddr),","if (ip_options_echo(&icmp_param.replyopts, skb_in))",ipc.opt = &icmp_param.replyopts;,room -= sizeof(struct iphdr) + icmp_param.replyopts.optlen;,struct ip_options *opt = inet_rsk(req)->opt;,"(opt && opt->srr) ? opt->faddr : ireq->rmt_addr,",if (opt && opt->is_strictroute && rt->rt_dst != rt->rt_gateway),"void ip_options_build(struct sk_buff * skb, struct ip_options * opt,","int ip_options_echo(struct ip_options * dopt, struct sk_buff * skb)",struct ip_options *sopt;,if (sopt->optlen == 0) {,dopt->optlen = 0;,},unsigned char * start = sptr+sopt->srr;,static struct ip_options *ip_options_get_alloc(const int optlen),"return kzalloc(sizeof(struct ip_options) + ((optlen + 3) & ~3),","static int ip_options_get_finish(struct net *net, struct ip_options **optp,","struct ip_options *opt, int optlen)",opt->__data[optlen++] = IPOPT_END;,opt->optlen = optlen;,"if (optlen && ip_options_compile(net, opt, NULL)) {","int ip_options_get_from_user(struct net *net, struct ip_options **optp,",struct ip_options *opt = ip_options_get_alloc(optlen);,"if (optlen && copy_from_user(opt->__data, data, optlen)) {","int ip_options_get(struct net *net, struct ip_options **optp,",struct ip_options *opt = ip_options_get_alloc(optlen);,"memcpy(opt->__data, data, optlen);","__be32 saddr, __be32 daddr, struct ip_options *opt)","skb_push(skb, sizeof(struct iphdr) + (opt ? opt->optlen : 0));",if (opt && opt->optlen) {,iph->ihl += opt->optlen>>2;,"ip_options_build(skb, opt, daddr, rt, 0);",struct ip_options *opt = inet->opt;,if(opt && opt->srr),daddr = opt->faddr;,if (opt && opt->is_strictroute && rt->rt_dst != rt->rt_gateway),"skb_push(skb, sizeof(struct iphdr) + (opt ? opt->optlen : 0));",if (opt && opt->optlen) {,iph->ihl += opt->optlen >> 2;,"ip_options_build(skb, opt, inet->inet_daddr, rt, 0);",struct ip_options *opt;,"memcpy(cork->opt, opt, sizeof(struct ip_options) + opt->optlen);",struct {,struct ip_options	opt;,char			data[40];,} replyopts;,"if (ip_options_echo(&replyopts.opt, skb))",if (replyopts.opt.optlen) {,if (ipc.opt->srr),daddr = replyopts.opt.faddr;,struct ip_options *opt = NULL;,if (inet->opt),icsk->icsk_ext_hdr_len -= inet->opt->optlen;,icsk->icsk_ext_hdr_len += opt->optlen;,"opt = xchg(&inet->opt, opt);",kfree(opt);,struct ip_options * opt = (struct ip_options *)optbuf;,if (inet->opt),"memcpy(optbuf, inet->opt,",sizeof(struct ip_options)+,inet->opt->optlen);,if (!ipc.opt),ipc.opt = inet->opt;,if (ipc.opt->srr) {,daddr = ipc.opt->faddr;,int opt_size = sizeof(struct ip_options) + opt->optlen;,"if (ireq->opt != NULL && ip_options_echo(ireq->opt, skb)) {",if (inet->opt && inet->opt->srr) {,nexthop = inet->opt->faddr;,if (!inet->opt || !inet->opt->srr),if (inet->opt),inet_csk(sk)->icsk_ext_hdr_len = inet->opt->optlen;,"static struct ip_options *tcp_v4_save_options(struct sock *sk,",struct sk_buff *skb),struct ip_options *opt = &(IPCB(skb)->opt);,struct ip_options *dopt = NULL;,int opt_size = optlength(opt);,"if (ip_options_echo(dopt, skb)) {",newinet->opt	      = ireq->opt;,if (newinet->opt),inet_csk(newsk)->icsk_ext_hdr_len = newinet->opt->optlen;,if (!ipc.opt),ipc.opt = inet->opt;,if (ipc.opt && ipc.opt->srr) {,faddr = ipc.opt->faddr;,(ipc.opt && ipc.opt->is_strictroute)) {,newinet->opt = NULL;,struct ip_options *opt = inet->opt;,if (opt && opt->srr),daddr = opt->faddr;
"if(nad_find_attr(nad, 0, -1, ""type"", ""valid"") >= 0) {",if(attr >= 0) {
struct scm_cookie *scm),"err = scm_send(sock, msg, siocb->scm);","err = scm_send(sock, msg, siocb->scm);","err = scm_send(sock, msg, siocb->scm);"
if (!vma->vm_file || !vma->vm_file->f_mapping,|| !vma->vm_file->f_mapping->host) {,"error = do_fallocate(vma->vm_file,"
if (p->mm) {,stats->hiwater_rss   = p->mm->hiwater_rss * PAGE_SIZE / KB;,stats->hiwater_vm    = p->mm->hiwater_vm * PAGE_SIZE / KB;

#define EFX_MIN_RING_SIZE (roundup_pow_of_two(2 * 3 * MAX_SKB_FRAGS)),if (ring->rx_pending < EFX_MIN_RING_SIZE ||,ring->tx_pending < EFX_MIN_RING_SIZE) {,"""TX and RX queues cannot be smaller than %ld\n"",",EFX_MIN_RING_SIZE);,"return efx_realloc_channels(efx, ring->rx_pending, ring->tx_pending);"
i < sbi->s_partitions && offset < le32_to_cpu(lvd->mapTableLength);
"if (ep_loop_check(ep, tfile) != 0)"

if (NFCT_FRAG6_CB(fp)->orig == NULL),if (!(fhdr->frag_off & htons(0xFFF9))) {,"pr_debug(""Invalid fragment offset\n"");",goto ret_orig;,}
size+=alignment+3*sizeof(size_t);

"len = recv(fd, kvp_recv_buffer, sizeof(kvp_recv_buffer), 0);",if (len < 0) {,"syslog(LOG_ERR, ""recv failed; error:%d"", len);"
"kref_put(&reservations->refs, resv_map_release);",if (chg < 0),return chg;,"if (hugepage_subpool_get_pages(spool, chg))",return -ENOSPC;,return ret;


if (args->buffer_count < 1) {
res.acl_len);
pmd_t pmdval = *pmd;
