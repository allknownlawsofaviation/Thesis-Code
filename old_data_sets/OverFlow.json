[
  {
    "index": 0,
    "id": "CVE-2009-1194",
    "commit_id": "4de30e5500eaeb49f4bf0b7a07f718e149a2ed5e",
    "added_lines": [
      "string->space = 4",
      "const guint max_space =",
      "MIN (G_MAXINT, G_MAXSIZE / MAX (sizeof(PangoGlyphInfo), sizeof(gint",
      "guint more_space = (guint)string->space * 2",
      "if (more_space > max_space",
      "more_space = max_space",
      "if ((guint)new_len > max_space",
      "g_error (\"%s: failed to allocate glyph string of length %i\\n\",",
      "G_STRLOC, new_len",
      "string->space = more_space"
    ],
    "removed_lines": [
      "string->space = 1",
      "string->space *= 2",
      "if (string->space < 0",
      "g_warning (\"glyph string length overflows maximum integer size, truncated\"",
      "new_len = string->space = G_MAXINT - 8"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 8,
    "id": "CVE-2011-0530",
    "commit_id": "3ef52043861ab16352d49af89e048ba6339d6df8",
    "added_lines": [
      "#define BUFSIZE ((1024*1024)+sizeof(struct nbd_reply))",
      "if (len > BUFSIZE - sizeof(struct nbd_reply"
    ],
    "removed_lines": [
      "#define BUFSIZE (1024*1024)",
      "if (len > BUFSIZE + sizeof(struct nbd_reply"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 22,
    "id": "CVE-2012-3400",
    "commit_id": "adee11b2085bee90bd8f4f52123ffb07882d6256",
    "added_lines": [
      "unsigned int table_len",
      "table_len = le32_to_cpu(lvd->mapTableLength",
      "if (sizeof(*lvd) + table_len > sb->s_blocksize)",
      "udf_err(sb, \"error loading logical volume descriptor: \"",
      "\"Partition table too long (%u > %lu)\\n\", table_len,",
      "sb->s_blocksize - sizeof(*lvd",
      "goto out_bh",
      "i < sbi->s_partitions && offset < table_len"
    ],
    "removed_lines": [
      "i < sbi->s_partitions && offset < le32_to_cpu(lvd->mapTableLength"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.6,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 24,
    "id": "CVE-2012-2745",
    "commit_id": "79549c6dfda0603dba9a70a53467ce62d9335c33",
    "added_lines": [
      "p->replacement_session_keyring = NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.7,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "provides an invalid replacement session keyring to a child process"
    ]
  },
  {
    "index": 26,
    "id": "CVE-2012-2675",
    "commit_id": "1a759756639ab7543b650a10c2d77a0ffc7a2000",
    "added_lines": [
      "size_t bytes=size+alignment+3*sizeof(size_t",
      "if(bytes<size",
      "return 0",
      "size=bytes"
    ],
    "removed_lines": [
      "size+=alignment+3*sizeof(size_t"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 27,
    "id": "CVE-2012-2673",
    "commit_id": "e10c1eb9908c2774c16b3148b30d2f3823d66a9a",
    "added_lines": [
      "#ifndef SIZE_MAX",
      "#define SIZE_MAX (~(size_t)0",
      "#endif",
      "if (lb && n > SIZE_MAX / lb",
      "return NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 31,
    "id": "CVE-2012-2384",
    "commit_id": "44afb3a04391a74309d16180d1e4f8386fdfa745",
    "added_lines": [
      "if (args->num_cliprects > UINT_MAX / sizeof(*cliprects))",
      "DRM_DEBUG(\"execbuf with %u cliprects\\n\",",
      "args->num_cliprects",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "ioctl call",
      "out-of-bounds",
      "out-of-bounds write",
      "integer overflow"
    ]
  },
  {
    "index": 32,
    "id": "CVE-2012-2383",
    "commit_id": "ed8cd3b2cd61004cab85380c52b1817aca1ca49b",
    "added_lines": [
      "if (args->buffer_count < 1 ||",
      "args->buffer_count > UINT_MAX / sizeof(*exec2_list))"
    ],
    "removed_lines": [
      "if (args->buffer_count < 1)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "ioctl call",
      "out-of-bounds",
      "out-of-bounds write",
      "integer overflow"
    ]
  },
  {
    "index": 35,
    "id": "CVE-2012-2319",
    "commit_id": "6f24f892871acc47b40dd594c63606a17c714f77",
    "added_lines": [
      "if (fd.entrylength > sizeof(entry) || fd.entrylength < 0)",
      "err = -EIO",
      "goto out",
      "if (fd.entrylength > sizeof(entry) || fd.entrylength < 0)",
      "err = -EIO",
      "goto out"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": " +Priv",
    "score": 7.2,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow +Priv ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 37,
    "id": "CVE-2012-2136",
    "commit_id": "cc9b17ad29ecaa20bfe426a8d4dbfb94b13ff1cc",
    "added_lines": [
      "int npages = (data_len + (PAGE_SIZE - 1)) >> PAGE_SHIFT",
      "err = -EMSGSIZE",
      "if (npages > MAX_SKB_FRAGS",
      "goto failure"
    ],
    "removed_lines": [
      "int npages",
      "npages = (data_len + (PAGE_SIZE - 1)) >> PAGE_SHIFT"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  +Priv",
    "score": 7.2,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 39,
    "id": "CVE-2012-2127",
    "commit_id": "905ad269c55fc62bee3da29f7b1d1efeba8aa1e1",
    "added_lines": [
      "err = pid_ns_prepare_proc(&init_pid_ns",
      "if (err)",
      "kern_unmount(ns->proc_mnt"
    ],
    "removed_lines": [
      "struct vfsmount *mnt",
      "mnt = kern_mount_data(&proc_fs_type, &init_pid_ns",
      "if (IS_ERR(mnt))",
      "init_pid_ns.proc_mnt = mnt",
      "mntput(ns->proc_mnt"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly interact with CLONE_NEWPID clone system calls,"
    ]
  },
  {
    "index": 44,
    "id": "CVE-2012-1836",
    "commit_id": "fe7dbd2c104c37f6f3af7d9f1646a3c332aea4a4",
    "added_lines": [
      "#define DN_COMP_BITMASK\t0xC000",
      "DNSInfo ResultIsReady(DNSHeader &h, unsigned length",
      "res = new unsigned char[sizeof(DNSHeader) * 2]",
      "DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, unsigned length",
      "unsigned i = 0, o",
      "int curanswer",
      "i = ntohs(ptr",
      "if (!(i & DN_COMP_BITMASK",
      "return std::make_pair((unsigned char *) NULL, \"DN label decompression header is bogus\"",
      "i &= ~DN_COMP_BITMASK",
      "i =- 12",
      "if (o + header.payload[i] > sizeof(DNSHeader",
      "return std::make_pair((unsigned char *) NULL, \"DN label decompression is impossible -- malformed/hostile packet?\"",
      "memcpy(&res[o], &header.payload[i + 1], header.payload[i]",
      "if (rr.rdlength != sizeof(struct in6_addr",
      "return std::make_pair((unsigned char *) NULL, \"rr.rdlength is larger than 16 bytes for an ipv6 entry -- malformed/hostile packet?\"",
      "if (rr.rdlength != sizeof(struct in_addr",
      "return std::make_pair((unsigned char *) NULL, \"rr.rdlength is larger than 4 bytes for an ipv4 entry -- malformed/hostile packet?\"",
      "return std::make_pair((unsigned char *) NULL, \"don't know how to handle undefined type (\" + ConvToStr(rr.type) + \") -- rejecting\""
    ],
    "removed_lines": [
      "DNSInfo ResultIsReady(DNSHeader &h, int length",
      "res = new unsigned char[512]",
      "DNSInfo DNSRequest::ResultIsReady(DNSHeader &header, int length",
      "int i = 0",
      "int curanswer, o",
      "i = ntohs(ptr) - 0xC000 - 12",
      "memcpy(&res[o],&header.payload[i + 1],header.payload[i]",
      "memcpy(res,&header.payload[i],rr.rdlength",
      "res[rr.rdlength] = 0"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "INDEX_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "RETURN",
      "ARITH_OP",
      "INC_DEC",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "RETURN",
      "ARITH_OP",
      "INC_DEC",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "RETURN",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "RETURN",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARRAY_ACCESS",
      "INDEX_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 46,
    "id": "CVE-2012-1584",
    "commit_id": "dcdf4fd954e3213c355746fa15b7480461972308",
    "added_lines": [
      "if(length < size() - index"
    ],
    "removed_lines": [
      "if(length < 0xffffffff && length + index < size"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 48,
    "id": "CVE-2012-1571",
    "commit_id": "1aec04dbf8a24b8a6ba64c4f74efa0628e36db0b",
    "added_lines": [
      "FILE_RCSID(\"@(#)$File: cdf.c,v 1.49 2012/02/20 20:04:37 christos Exp $\"",
      "size_t ss = CDF_SHORT_SEC_SIZE(h",
      "if (pos > CDF_SEC_SIZE(h) * sst->sst_len)",
      "pos, CDF_SEC_SIZE(h) * sst->sst_len",
      "size_t ss = CDF_SHORT_SEC_SIZE(h), i, j",
      "size_t ofs = CDF_GETUINT32(p, (i << 1) + 1",
      "((const char *)(const void *)p + ofs",
      "- 2 * sizeof(uint32_t",
      "DPRINTF((\"%\" SIZE_T_FORMAT \"u) id=%x type=%x offs=0x%tx,0x%x\\n\",",
      "i, inp[i].pi_id, inp[i].pi_type, q - p, offs"
    ],
    "removed_lines": [
      "FILE_RCSID(\"@(#)$File: cdf.c,v 1.48 2012/02/17 05:27:45 christos Exp $\"",
      "size_t ss = CDF_SEC_SIZE(h",
      "if (pos > ss * sst->sst_len)",
      "pos, ss * sst->sst_len",
      "size_t ss = CDF_SEC_SIZE(h), i, j",
      "((const char *)(const void *)p +",
      "CDF_GETUINT32(p, (i << 1) + 1)) - 2 * sizeof(uint32_t",
      "DPRINTF((\"%\" SIZE_T_FORMAT \"u) id=%x type=%x offs=0x%tx,0x%x\\n\", i,",
      "inp[i].pi_id, inp[i].pi_type, q - p,",
      "CDF_GETUINT32(p, (i << 1) + 1"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 10"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "invalid pointer dereference",
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 50,
    "id": "CVE-2012-1176",
    "commit_id": "d2860c655357975e7b32d84e6b45e98f0dcecd7a",
    "added_lines": [
      "py_modules=[\"pyfribidi\", \"pyfribidi2\"],",
      "name='_pyfribidi',"
    ],
    "removed_lines": [
      "py_modules=[\"pyfribidi2\"],",
      "name='pyfribidi',"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 60,
    "id": "CVE-2012-0807",
    "commit_id": "73b1968ee30f6d9d2dae497544b910e68e114bfa",
    "added_lines": [
      "char *buf, *buf2, *d, *d_url",
      "int l",
      "buf = estrndup(name, name_len",
      "normalize_varname(buf",
      "name_len = strlen(buf",
      "efree(buf",
      "buf2 = estrndup(value, value_len",
      "efree(buf",
      "efree(buf2",
      "char *buf, *buf2, *d, *d_url",
      "buf = estrndup(name, name_len",
      "normalize_varname(buf",
      "name_len = strlen(buf",
      "efree(buf",
      "buf2 = estrndup(value, value_len",
      "efree(buf",
      "efree(buf2"
    ],
    "removed_lines": [
      "char buffer[4096]",
      "char buffer2[4096]",
      "char *buf = buffer, *buf2 = buffer2, *d, *d_url",
      "int l",
      "if (name_len > sizeof(buffer)-2)",
      "buf = estrndup(name, name_len",
      "} else",
      "memcpy(buf, name, name_len",
      "buf[name_len] = 0",
      "normalize_varname(buf",
      "name_len = strlen(buf",
      "if (buf != buffer)",
      "efree(buf",
      "if (strlen(value) <= sizeof(buffer2)-2)",
      "memcpy(buf2, value, value_len",
      "buf2[value_len] = 0",
      "} else",
      "buf2 = estrndup(value, value_len",
      "if (buf != buffer)",
      "efree(buf",
      "if (buf2 != buffer2)",
      "efree(buf2",
      "char buffer[4096]",
      "char buffer2[4096]",
      "char *buf = buffer, *buf2 = buffer2, *d, *d_url",
      "if (name_len > sizeof(buffer)-2)",
      "buf = estrndup(name, name_len",
      "} else",
      "memcpy(buf, name, name_len",
      "buf[name_len] = 0",
      "normalize_varname(buf",
      "name_len = strlen(buf",
      "if (buf != buffer)",
      "efree(buf",
      "if (strlen(value) <= sizeof(buffer2)-2)",
      "memcpy(buf2, value, value_len",
      "buf2[value_len] = 0",
      "} else",
      "buf2 = estrndup(value, value_len",
      "if (buf != buffer)",
      "efree(buf",
      "if (buf2 != buffer2)",
      "efree(buf2"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 5.1,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 64,
    "id": "CVE-2012-0044",
    "commit_id": "a5cd335165e31db9dbab636fd29895d41da55dd2",
    "added_lines": [
      "#define DRM_MODE_FB_DIRTY_MAX_CLIPS     256"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  +Priv Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow +Priv Mem. Corr. ",
    "summary": [
      "ioctl call",
      "integer overflow"
    ]
  },
  {
    "index": 65,
    "id": "CVE-2012-0038",
    "commit_id": "fa8b18edd752a8b4e9d1ee2cd615b82c93cf8bba",
    "added_lines": [
      "if (count > XFS_ACL_MAX_ENTRIES",
      "return ERR_PTR(-EFSCORRUPTED"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 70,
    "id": "CVE-2011-4913",
    "commit_id": "be20250c13f88375345ad99950190685eda51eb8",
    "added_lines": [
      "if (pt[6] & AX25_HBIT)",
      "if (facilities->dest_ndigis >= ROSE_MAX_DIGIS",
      "return -1",
      "} else",
      "if (facilities->source_ndigis >= ROSE_MAX_DIGIS",
      "return -1",
      "if (l < 10 || l > 20",
      "return -1",
      "if (len < 0",
      "return 0",
      "if (len < 0",
      "return 0"
    ],
    "removed_lines": [
      "if (pt[6] & AX25_HBIT",
      "else"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.8,
    "safe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "integer underflow",
      "buffer overflow",
      "integer underflow"
    ]
  },
  {
    "index": 72,
    "id": "CVE-2011-4611",
    "commit_id": "0837e3242c73566fc1c0196b4ec61779c25ffc93",
    "added_lines": [
      "static bool pmc_overflow(unsigned long val",
      "if ((int)val < 0",
      "return true",
      "if (__is_processor(PV_POWER7) && ((0x80000000 - val) <= 256",
      "return true",
      "return false",
      "if (pmc_overflow(val"
    ],
    "removed_lines": [
      "if ((int)val < 0"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 79,
    "id": "CVE-2011-4097",
    "commit_id": "56c6a8a4aadca809e04276eabe5552935c51387f",
    "added_lines": [
      "long points"
    ],
    "removed_lines": [
      "int points"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 80,
    "id": "CVE-2011-4086",
    "commit_id": "15291164b22a357cb211b618adfef4fa82fc0de3",
    "added_lines": [
      "clear_buffer_delay(bh",
      "clear_buffer_unwritten(bh"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly handle the _Delay and _Unwritten buffer head states"
    ]
  },
  {
    "index": 85,
    "id": "CVE-2011-3359",
    "commit_id": "c85ce65ecac078ab1a1835c87c4a6319cf74660a",
    "added_lines": [
      "#define B43_DMA0_RX_BUFFERSIZE\t\t(B43_DMA0_RX_FRAMEOFFSET + IEEE80211_MAX_FRAME_LEN"
    ],
    "removed_lines": [
      "#define B43_DMA0_RX_BUFFERSIZE\t\tIEEE80211_MAX_FRAME_LEN"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS ",
    "score": 5.4,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly allocate receive buffers"
    ]
  },
  {
    "index": 86,
    "id": "CVE-2011-3353",
    "commit_id": "c2183d1e9b3f313dd8ba2b1b0197c8d9fb86a7ae",
    "added_lines": [
      "err = -EINVAL",
      "if (size != sizeof(outarg) + outarg.namelen + 1",
      "goto err"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 90,
    "id": "CVE-2011-2918",
    "commit_id": "a8b0ca17b80e92faab46ee7179ba9e99ccb61233",
    "added_lines": [
      "static void sample_hbp_handler(struct perf_event *bp,"
    ],
    "removed_lines": [
      "static void sample_hbp_handler(struct perf_event *bp, int nmi,"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly handle event overflows associated with PERF_COUNT_SW_CPU_CLOCK events"
    ]
  },
  {
    "index": 97,
    "id": "CVE-2011-2517",
    "commit_id": "208c72f4fe44fe09577e7975ba0e7fa0278f3d03",
    "added_lines": [
      "request->ssids[i].ssid_len = nla_len(attr",
      "request->ssids[i].ssid_len = nla_len(attr"
    ],
    "removed_lines": [
      "request->ssids[i].ssid_len = nla_len(attr",
      "request->ssids[i].ssid_len = nla_len(attr"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": " +Priv",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "Overflow +Priv ",
    "summary": [
      "buffer overflow",
      "leveraging the CAP_NET_ADMIN capability"
    ]
  },
  {
    "index": 98,
    "id": "CVE-2011-2496",
    "commit_id": "982134ba62618c2d69fbbbd166d0a11ee3b7e3d8",
    "added_lines": [
      "if (new_len > old_len)",
      "unsigned long pgoff",
      "if (vma->vm_flags & (VM_DONTEXPAND | VM_PFNMAP",
      "pgoff = (addr - vma->vm_start) >> PAGE_SHIFT",
      "pgoff += vma->vm_pgoff",
      "if (pgoff + (new_len >> PAGE_SHIFT) < pgoff",
      "goto Einval"
    ],
    "removed_lines": [
      "if (vma->vm_flags & (VM_DONTEXPAND | VM_PFNMAP))",
      "if (new_len > old_len"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 105,
    "id": "CVE-2011-2182",
    "commit_id": "cae13fe4cc3f24820ffb990c09110626837e85d4",
    "added_lines": [
      "if (rec >= f->num)",
      "ldm_error(\"REC value (%d) exceeds NUM value (%d)\", rec, f->num",
      "return false"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": " +Priv +Info",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow +Priv +Info ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 110,
    "id": "CVE-2011-1759",
    "commit_id": "0f22072ab50cac7983f9660d33974b45184da4f9",
    "added_lines": [
      "if (nsops < 1 || nsops > SEMOPM"
    ],
    "removed_lines": [
      "if (nsops < 1"
    ],
    "cause": [
      "Race Condition or Concurrency",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  +Priv Mem. Corr.",
    "score": 6.2,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow +Priv Mem. Corr. ",
    "summary": [
      "race condition",
      "integer overflow"
    ]
  },
  {
    "index": 112,
    "id": "CVE-2011-1477",
    "commit_id": "4d00135a680727f6c3be78f8befaac009030e4df",
    "added_lines": [
      "if (voice < 0 || voice >= devc->nr_voice",
      "return",
      "struct channel_info *info",
      "if (voice < 0 || voice >= devc->nr_voice",
      "return",
      "if (chn < 0 || chn > 15",
      "return",
      "info = &synth_devs[dev]->chn_info[chn]"
    ],
    "removed_lines": [
      "struct channel_info *info =",
      "&synth_devs[dev]->chn_info[chn]"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  +Priv Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow +Priv Mem. Corr. ",
    "summary": [
      "array index error"
    ]
  },
  {
    "index": 122,
    "id": "CVE-2010-4650",
    "commit_id": "7572777eef78ebdee1ecb7c258c0ef94d35bad16",
    "added_lines": [
      "static int fuse_verify_ioctl_iov(struct iovec *iov, size_t count",
      "size_t n",
      "u32 max = FUSE_MAX_PAGES_PER_REQ << PAGE_SHIFT",
      "for (n = 0; n < count; n++)",
      "if (iov->iov_len > (size_t) max",
      "return -ENOMEM",
      "max -= iov->iov_len",
      "return 0",
      "err = fuse_verify_ioctl_iov(in_iov, in_iovs",
      "if (err",
      "goto out",
      "err = fuse_verify_ioctl_iov(out_iov, out_iovs",
      "if (err",
      "goto out"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 125,
    "id": "CVE-2013-7027",
    "commit_id": "f5563318ff1bde15b10e736e97ffce13be08bc1a",
    "added_lines": [
      "if (max_length < sizeof(struct ieee80211_radiotap_header",
      "return -EINVAL",
      "(unsigned long)iterator->_rtheader +",
      "sizeof(uint32_t) >"
    ],
    "removed_lines": [
      "(unsigned long)iterator->_rtheader >"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS ",
    "score": 6.1,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "SIZE_CHECK"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 127,
    "id": "CVE-2013-7024",
    "commit_id": "fe448cd28d674c3eff3072552eae366d0b659ce9",
    "added_lines": [
      "line = picture->data[plane] + y / s->cdy[compno] * picture->linesize[plane]",
      "dst = line + x / s->cdx[compno] * pixelsize + compno*!planar",
      "linel = (uint16_t *)picture->data[plane] + y / s->cdy[compno] * (picture->linesize[plane] >> 1",
      "dst = linel + (x / s->cdx[compno] * pixelsize + compno*!planar"
    ],
    "removed_lines": [
      "line = picture->data[plane] + y * picture->linesize[plane]",
      "dst = line + x * pixelsize + compno*!planar",
      "linel = (uint16_t *)picture->data[plane] + y * (picture->linesize[plane] >> 1",
      "dst = linel + (x * pixelsize + compno*!planar"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 128,
    "id": "CVE-2013-7023",
    "commit_id": "f31011e9abfb2ae75bb32bc44e2c34194c8dc40a",
    "added_lines": [
      "if(!new_buffer)",
      "pc->index = 0",
      "if(!new_buffer)",
      "pc->overread_index =",
      "pc->index = 0"
    ],
    "removed_lines": [
      "if(!new_buffer",
      "if(!new_buffer"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONTROL_FLOW",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 129,
    "id": "CVE-2013-7022",
    "commit_id": "e07ac727c1cc9eed39e7f9117c97006f719864bd",
    "added_lines": [
      "c->framebuf_stride = FFALIGN(c->width + 15, 16) * 3",
      "aligned_height     = c->height + 15"
    ],
    "removed_lines": [
      "c->framebuf_stride = FFALIGN(c->width * 3, 16",
      "aligned_height     = FFALIGN(c->height,    16"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 131,
    "id": "CVE-2013-7020",
    "commit_id": "b05cd1ea7e45a836f7f6071a716c38bb30326e0f",
    "added_lines": [
      "int chroma_planes, chroma_h_shift, chroma_v_shift, transparency, colorspace, bits_per_raw_sample",
      "colorspace     = get_symbol(c, state, 0); //YUV cs type",
      "bits_per_raw_sample = f->version > 0 ? get_symbol(c, state, 0) : f->avctx->bits_per_raw_sample",
      "if (   colorspace    != f->colorspace",
      "|| bits_per_raw_sample != f->avctx->bits_per_raw_sample",
      "|| chroma_planes != f->chroma_planes",
      "f->colorspace     = colorspace",
      "f->avctx->bits_per_raw_sample = bits_per_raw_sample"
    ],
    "removed_lines": [
      "int chroma_planes, chroma_h_shift, chroma_v_shift, transparency",
      "f->colorspace = get_symbol(c, state, 0); //YUV cs type",
      "if (f->version > 0",
      "f->avctx->bits_per_raw_sample = get_symbol(c, state, 0",
      "if (   chroma_planes != f->chroma_planes"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 133,
    "id": "CVE-2013-7018",
    "commit_id": "9a271a9368eaabf99e6c2046103acb33957e63b7",
    "added_lines": [
      "if (c->log2_cblk_width > 6 || c->log2_cblk_height > 6)",
      "avpriv_request_sample(s->avctx, \"cblk size > 64\"",
      "return AVERROR_PATCHWELCOME",
      "av_assert0(width  <= JPEG2000_MAX_CBLKW",
      "av_assert0(height <= JPEG2000_MAX_CBLKH"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 135,
    "id": "CVE-2013-7016",
    "commit_id": "8bb11c3ca77b52e05a9ed1496a65f8a76e6e2d8f",
    "added_lines": [
      "if (   !s->cdx[i] || s->cdx[i] == 3 || s->cdx[i] > 4",
      "|| !s->cdy[i] || s->cdy[i] == 3 || s->cdy[i] > 4)"
    ],
    "removed_lines": [
      "if (!s->cdx[i] || !s->cdy[i])"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 139,
    "id": "CVE-2013-7012",
    "commit_id": "780669ef7c23c00836a24921fcc6b03be2b8ca4a",
    "added_lines": [
      "if (s->image_offset_x || s->image_offset_y)",
      "avpriv_request_sample(s->avctx, \"Support for image offsets\"",
      "return AVERROR_PATCHWELCOME"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 140,
    "id": "CVE-2013-7011",
    "commit_id": "547d690d676064069d44703a1917e0dab7e33445",
    "added_lines": [
      "int chroma_planes, chroma_h_shift, chroma_v_shift, transparency",
      "chroma_planes  = get_rac(c, state",
      "chroma_h_shift = get_symbol(c, state, 0",
      "chroma_v_shift = get_symbol(c, state, 0",
      "transparency   = get_rac(c, state",
      "if (f->plane_count)",
      "if (   chroma_planes != f->chroma_planes",
      "|| chroma_h_shift!= f->chroma_h_shift",
      "|| chroma_v_shift!= f->chroma_v_shift",
      "|| transparency  != f->transparency)",
      "av_log(f->avctx, AV_LOG_ERROR, \"Invalid change of global parameters\\n\"",
      "return AVERROR_INVALIDDATA",
      "f->chroma_planes  = chroma_planes",
      "f->chroma_h_shift = chroma_h_shift",
      "f->chroma_v_shift = chroma_v_shift",
      "f->transparency   = transparency"
    ],
    "removed_lines": [
      "f->chroma_planes  = get_rac(c, state",
      "f->chroma_h_shift = get_symbol(c, state, 0",
      "f->chroma_v_shift = get_symbol(c, state, 0",
      "f->transparency   = get_rac(c, state"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 142,
    "id": "CVE-2013-7009",
    "commit_id": "3819db745da2ac7fb3faacb116788c32f4753f34",
    "added_lines": [
      "int pixel_ptr = -4",
      "ADVANCE_BLOCK",
      "ADVANCE_BLOCK",
      "ADVANCE_BLOCK"
    ],
    "removed_lines": [
      "int pixel_ptr = 0",
      "ADVANCE_BLOCK",
      "ADVANCE_BLOCK",
      "ADVANCE_BLOCK"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 145,
    "id": "CVE-2013-6763",
    "commit_id": "7314e613d5ff9f0934f7a0f74ed7973b903315d1",
    "added_lines": [
      "return vm_iomap_memory(vma, fbdev->fb_phys, fbdev->fb_len"
    ],
    "removed_lines": [
      "unsigned int len",
      "unsigned long start=0, off",
      "if (vma->vm_pgoff > (~0UL >> PAGE_SHIFT))",
      "return -EINVAL",
      "start = fbdev->fb_phys & PAGE_MASK",
      "len = PAGE_ALIGN((start & ~PAGE_MASK) + fbdev->fb_len",
      "off = vma->vm_pgoff << PAGE_SHIFT",
      "if ((vma->vm_end - vma->vm_start + off) > len)",
      "return -EINVAL",
      "off += start",
      "vma->vm_pgoff = off >> PAGE_SHIFT",
      "return io_remap_pfn_range(vma, vma->vm_start, off >> PAGE_SHIFT,",
      "vma->vm_end - vma->vm_start,",
      "vma->vm_page_prot"
    ],
    "cause": [
      "Improper Input Validation"
    ],
    "effect": "DoS  +Priv Mem. Corr.",
    "score": 6.9,
    "safe_features": [
      "POINTER_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow +Priv Mem. Corr. ",
    "summary": [
      "does not validate the size of a memory block,"
    ]
  },
  {
    "index": 150,
    "id": "CVE-2013-6381",
    "commit_id": "6fb392b1a63ae36c31f62bc3fc8630b49d602b62",
    "added_lines": [
      "unsigned int req_len",
      "if (req_len > (QETH_BUFSIZE - IPA_PDU_HEADER_SIZE -",
      "sizeof(struct qeth_ipacmd_hdr) -",
      "sizeof(struct qeth_ipacmd_setadpparms_hdr",
      "return -EINVAL"
    ],
    "removed_lines": [
      "int req_len"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.9,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "SIZE_CHECK",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "ioctl call",
      "buffer overflow"
    ]
  },
  {
    "index": 160,
    "id": "CVE-2013-4591",
    "commit_id": "7d3e91a89b7adbc2831334def9e494dd9892f9af",
    "added_lines": [
      "if (buf)",
      "if (res.acl_len > buflen)",
      "ret = -ERANGE",
      "goto out_free"
    ],
    "removed_lines": [
      "if (buf"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 6.2,
    "safe_features": [
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 161,
    "id": "CVE-2013-4588",
    "commit_id": "04bcef2a83f40c6db24222b27a52892cba39dffb",
    "added_lines": [
      "if (cmd < IP_VS_BASE_CTL || cmd > IP_VS_SO_SET_MAX",
      "return -EINVAL",
      "if (len < 0 || len >  MAX_ARG_LEN",
      "return -EINVAL",
      "unsigned int copylen",
      "if (cmd < IP_VS_BASE_CTL || cmd > IP_VS_SO_GET_MAX",
      "return -EINVAL",
      "copylen = get_arglen[GET_CMDID(cmd)]",
      "if (copylen > 128",
      "return -EINVAL",
      "if (copy_from_user(arg, user, copylen) != 0"
    ],
    "removed_lines": [
      "if (copy_from_user(arg, user, get_arglen[GET_CMDID(cmd)]) != 0"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": " +Priv",
    "score": 6.6,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow +Priv ",
    "summary": [
      "getsockopt system call",
      "buffer overflow",
      "leveraging the CAP_NET_ADMIN capability"
    ]
  },
  {
    "index": 166,
    "id": "CVE-2013-4514",
    "commit_id": "b5e2f339865fb443107e5b10603e53bbc92dc054",
    "added_lines": [
      "size_t\t\t\tlen",
      "len = min_t(size_t, pLtv->u.u16[0], sizeof(lp->StationName",
      "strlcpy(lp->StationName, &pLtv->u.u8[2], len",
      "size_t len",
      "len = min_t(size_t, wrqu->data.length, sizeof(lp->StationName",
      "strlcpy(lp->StationName, extra, len"
    ],
    "removed_lines": [
      "memcpy((void *)lp->StationName, (void *)&pLtv->u.u8[2], (size_t)pLtv->u.u16[0]",
      "memcpy(lp->StationName, extra, wrqu->data.length"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.7,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "leveraging the CAP_NET_ADMIN capability"
    ]
  },
  {
    "index": 167,
    "id": "CVE-2013-4513",
    "commit_id": "c2c65cd2e14ada6de44cb527e7f1990bede24e15",
    "added_lines": [
      "if (count > sizeof(ei->data) - sizeof(*elt) - sizeof(*app_hdr",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 168,
    "id": "CVE-2013-4512",
    "commit_id": "201f99f170df14ba52ea4c52847779042b7a623b",
    "added_lines": [
      "size_t size",
      "size = min(count, sizeof(buf",
      "if (copy_from_user(buf, buffer, size"
    ],
    "removed_lines": [
      "if (copy_from_user(buf, buffer, count"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.7,
    "safe_features": [
      "INDEX_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 171,
    "id": "CVE-2013-4387",
    "commit_id": "2811ebac2521ceac84f2bdae402455baa6a7fb47",
    "added_lines": [
      "struct frag_hdr fhdr",
      "return skb_append_datato_frags(sk, skb, getfrag, from,",
      "(length - transhdrlen",
      "if ((length > mtu) && dontfrag && (sk->sk_protocol == IPPROTO_UDP ||",
      "sk->sk_protocol == IPPROTO_RAW))",
      "ipv6_local_rxpmtu(sk, fl6, mtu-exthdrlen",
      "return -EMSGSIZE",
      "skb = skb_peek_tail(&sk->sk_write_queue",
      "cork->length += length",
      "if (((length > mtu) ||",
      "(skb && skb_is_gso(skb))) &&",
      "(sk->sk_protocol == IPPROTO_UDP) &&",
      "(rt->dst.dev->features & NETIF_F_UFO))",
      "err = ip6_ufo_append_data(sk, getfrag, from, length,",
      "hh_len, fragheaderlen,",
      "transhdrlen, mtu, flags, rt",
      "if (err",
      "goto error",
      "return 0",
      "if (!skb"
    ],
    "removed_lines": [
      "err = skb_append_datato_frags(sk,skb, getfrag, from,",
      "(length - transhdrlen",
      "if (!err)",
      "struct frag_hdr fhdr",
      "return 0",
      "kfree_skb(skb",
      "return err",
      "cork->length += length",
      "if (length > mtu)",
      "int proto = sk->sk_protocol",
      "if (dontfrag && (proto == IPPROTO_UDP || proto == IPPROTO_RAW",
      "ipv6_local_rxpmtu(sk, fl6, mtu-exthdrlen",
      "return -EMSGSIZE",
      "if (proto == IPPROTO_UDP &&",
      "(rt->dst.dev->features & NETIF_F_UFO))",
      "err = ip6_ufo_append_data(sk, getfrag, from, length,",
      "hh_len, fragheaderlen,",
      "transhdrlen, mtu, flags, rt",
      "if (err",
      "goto error",
      "return 0",
      "if ((skb = skb_peek_tail(&sk->sk_write_queue)) == NULL"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 6.1,
    "safe_features": [
      "NO_OP",
      "RETURN",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "does not properly determine the need for UDP Fragmentation Offload (UFO) processing of small packets after the UFO queueing of a large packet"
    ]
  },
  {
    "index": 177,
    "id": "CVE-2013-4264",
    "commit_id": "2960576378d17d71cc8dccc926352ce568b5eec1",
    "added_lines": [
      "if (src_end - src < zsize + (sub_type != 2",
      "if (src >= src_end",
      "return AVERROR_INVALIDDATA"
    ],
    "removed_lines": [
      "if (src_end - src < zsize"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 178,
    "id": "CVE-2013-4263",
    "commit_id": "e43a0a232dbf6d3c161823c2e07c52e76227a1bc",
    "added_lines": [
      "for (plane = 0; plane < 4 && in->data[plane] && in->linesize[plane]; plane++)"
    ],
    "removed_lines": [
      "for (plane = 0; plane < 4 && in->data[plane]; plane++)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 181,
    "id": "CVE-2013-4244",
    "commit_id": "ce6841d9e41d621ba23cf18b190ee6a23b2cc833",
    "added_lines": [
      "if (code >= clear)",
      "fprintf(stderr, \"bad input: code=%d is larger than clear=%d\\n\",code, clear",
      "return 0"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 212,
    "id": "CVE-2013-2850",
    "commit_id": "cea4dcfdad926a27a18e188720efe0f2c9403456",
    "added_lines": [
      "#include <scsi/iscsi_proto.h>",
      "char key[KEY_MAXLEN]"
    ],
    "removed_lines": [
      "char key[64]"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 7.9,
    "safe_features": [
      "ARITH_OP",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS"
    ],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 217,
    "id": "CVE-2013-2596",
    "commit_id": "fc9bbca8f650e5f738af8806317c0a041a48ae4a",
    "added_lines": [
      "unsigned long mmio_pgoff",
      "len = info->fix.smem_len",
      "mmio_pgoff = PAGE_ALIGN((start & ~PAGE_MASK) + len) >> PAGE_SHIFT",
      "if (vma->vm_pgoff >= mmio_pgoff)",
      "vma->vm_pgoff -= mmio_pgoff",
      "len = info->fix.mmio_len",
      "fb_pgprotect(file, vma, start",
      "return vm_iomap_memory(vma, start, len"
    ],
    "removed_lines": [
      "unsigned long off",
      "if (vma->vm_pgoff > (~0UL >> PAGE_SHIFT",
      "return -EINVAL",
      "off = vma->vm_pgoff << PAGE_SHIFT",
      "len = PAGE_ALIGN((start & ~PAGE_MASK) + info->fix.smem_len",
      "if (off >= len)",
      "off -= len",
      "if (info->var.accel_flags)",
      "mutex_unlock(&info->mm_lock",
      "return -EINVAL",
      "len = PAGE_ALIGN((start & ~PAGE_MASK) + info->fix.mmio_len",
      "start &= PAGE_MASK",
      "if ((vma->vm_end - vma->vm_start + off) > len",
      "return -EINVAL",
      "off += start",
      "vma->vm_pgoff = off >> PAGE_SHIFT",
      "fb_pgprotect(file, vma, off",
      "if (io_remap_pfn_range(vma, vma->vm_start, off >> PAGE_SHIFT,",
      "vma->vm_end - vma->vm_start, vma->vm_page_prot",
      "return -EAGAIN",
      "return 0"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": " +Priv",
    "score": 6.9,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "RETURN"
    ],
    "vuln": "Overflow +Priv ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 219,
    "id": "CVE-2013-2237",
    "commit_id": "85dfb745ee40232876663ae206cba35f24ab2a40",
    "added_lines": [
      "hdr->sadb_msg_satype = SADB_SATYPE_UNSPEC"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 6",
      "Uncategorized Cluster 6"
    ],
    "effect": " +Info",
    "score": 2.1,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow +Info ",
    "summary": [
      "does not initialize a certain structure member",
      "does not initialize a certain structure"
    ]
  },
  {
    "index": 220,
    "id": "CVE-2013-2234",
    "commit_id": "a5cc68f3d63306d0d288f31edfc2ae6ef8ecd887",
    "added_lines": [
      "hdr->sadb_msg_reserved = 0",
      "hdr->sadb_msg_reserved = 0"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 6"
    ],
    "effect": " +Info",
    "score": 2.1,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow +Info ",
    "summary": [
      "do not initialize certain structure members"
    ]
  },
  {
    "index": 222,
    "id": "CVE-2013-2223",
    "commit_id": "4654f330317c9948bb61d138eb24d49690ca4637",
    "added_lines": [
      "Some features like preshared mode or signed SAS are not supported but the GNU",
      "ZRTP C++ implementation defines the necessary external interfaces and",
      "functions for these enhanced features (stubs only)."
    ],
    "removed_lines": [
      "Enhanced features like PBX SAS relay aka *trusted Man-in-the-Middle* or",
      "preshared mode are not supported but the GNU ZRTP C++ implementation defines",
      "the necessary external interfaces and functions for these enhanced features",
      "(stubs only)."
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS  +Info",
    "score": 5.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "DoS Overflow +Info ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 223,
    "id": "CVE-2013-2220",
    "commit_id": "13c149b051f82b709e8d7cc32111e84b49d57234",
    "added_lines": [
      "int\trad_get_vendor_attr(u_int32_t *, unsigned char *, const void **, size_t *, const void *, size_t"
    ],
    "removed_lines": [
      "int\trad_get_vendor_attr(u_int32_t *, const void **, size_t *"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 225,
    "id": "CVE-2013-2174",
    "commit_id": "192c4f788d48f82c03e9cef40013f34370e90737",
    "added_lines": [
      "if(('%' == in) && (alloc > 2) &&",
      "ISXDIGIT(string[1]) && ISXDIGIT(string[2]))"
    ],
    "removed_lines": [
      "if(('%' == in) && ISXDIGIT(string[1]) && ISXDIGIT(string[2]))"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 229,
    "id": "CVE-2013-2128",
    "commit_id": "baff42ab1494528907bf4d5870359e31711746ae",
    "added_lines": [
      "tp->copied_seq = seq"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly manage skb consumption"
    ]
  },
  {
    "index": 230,
    "id": "CVE-2013-2127",
    "commit_id": "2f912f5b33582961b1cdbd9fd828589f8b78f21d",
    "added_lines": [
      "int dmax = 0",
      "for(i=0; i< size*4; i++",
      "if(dmax < val) dmax = val",
      "C.data_maximum = dmax & 0xffff",
      "int dmax = 0",
      "if(dmax < p[idx]) dmax = p[idx]",
      "C.data_maximum = dmax",
      "if(C.data_maximum <=TBLN",
      "C.data_maximum = lut[C.data_maximum]",
      "if(C.maximum <= TBLN",
      "C.maximum = lut[C.maximum]",
      "int save_4color = O.four_color_rgb"
    ],
    "removed_lines": [
      "for(i=0; i< size*4; i++",
      "if(C.data_maximum < val) C.data_maximum = val",
      "C.data_maximum = 0",
      "if(C.data_maximum < p[idx]) C.data_maximum = p[idx]",
      "C.data_maximum = lut[C.data_maximum]",
      "C.maximum = lut[C.maximum]",
      "int save_4color = O.four_color_rgb"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "unspecified vectors"
    ]
  },
  {
    "index": 234,
    "id": "CVE-2013-2058",
    "commit_id": "929473ea05db455ad88cdc081f2adc556b8dc48f",
    "added_lines": [
      "if (ci->platdata->flags & CI13XXX_DISABLE_STREAMING",
      "hw_write(ci, OP_USBMODE, USBMODE_CI_SDIS, USBMODE_CI_SDIS"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS ",
    "score": 4.7,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly support a certain non-streaming option"
    ]
  },
  {
    "index": 235,
    "id": "CVE-2013-2021",
    "commit_id": "24ff855c82d3f5c62bc5788a5776cefbffce2971",
    "added_lines": [
      "case DECRYPTABLE_PDF:",
      "s = \"decryptable PDF\"",
      "break",
      "cli_dbgmsg(\"pdf_extract_obj: obj %u %u\\n\", obj->id>>8, obj->id&0xff",
      "cli_dbgmsg(\"cli_pdf: dumping obj %u %u\\n\", obj->id>>8, obj->id&0xff",
      "cli_dbgmsg(\"cli_pdf: %u %u obj: no dictionary\\n\", obj->id>>8, obj->id&0xff",
      "cli_dbgmsg(\"cli_pdf: %u %u obj: broken dictionary\\n\", obj->id>>8, obj->id&0xff",
      "} else if ((R >= 2) && (R <= 4))",
      "if (length > 128",
      "length = 128",
      "else",
      "cli_dbgmsg(\"cli_pdf: R value out of range\\n\"",
      "return",
      "if ((R > 5) || (R < 2))",
      "cli_dbgmsg(\"cli_pdf: R value outside supported range [2..5]\\n\"",
      "break"
    ],
    "removed_lines": [
      "cli_dbgmsg(\"cli_pdf: dumping obj %u %u\\n\", obj->id>>8, obj->id",
      "} else",
      "if (length > 128",
      "length = 128"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 246,
    "id": "CVE-2013-1929",
    "commit_id": "715230a44310a8cf66fbfb5a46f9a62a9b2de424",
    "added_lines": [
      "if (len >= sizeof(tp->fw_ver",
      "len = sizeof(tp->fw_ver) - 1",
      "memset(tp->fw_ver, 0, sizeof(tp->fw_ver",
      "snprintf(tp->fw_ver, sizeof(tp->fw_ver), \"%.*s bc \", len,",
      "&vpd_data[j]"
    ],
    "removed_lines": [
      "memcpy(tp->fw_ver, &vpd_data[j], len",
      "strncat(tp->fw_ver, \" bc \", vpdlen - len - 1"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 4.4,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_ZERO",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 249,
    "id": "CVE-2013-1860",
    "commit_id": "c0f5ecee4e741667b2493c742b60b6218d40b3aa",
    "added_lines": [
      "#define WDM_OVERFLOW\t\t10",
      "int length = urb->actual_length",
      "if (length + desc->length > desc->wMaxCommand)",
      "set_bit(WDM_OVERFLOW, &desc->flags",
      "} else",
      "if (!test_bit(WDM_OVERFLOW, &desc->flags))",
      "memmove(desc->ubuf + desc->length, desc->inbuf, length",
      "desc->length += length",
      "desc->reslength = length",
      "if (test_bit(WDM_OVERFLOW, &desc->flags))",
      "clear_bit(WDM_OVERFLOW, &desc->flags",
      "rv = -ENOBUFS",
      "goto err",
      "clear_bit(WDM_OVERFLOW, &desc->flags"
    ],
    "removed_lines": [
      "desc->reslength = urb->actual_length",
      "memmove(desc->ubuf + desc->length, desc->inbuf, desc->reslength",
      "desc->length += desc->reslength"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.9,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 258,
    "id": "CVE-2013-1796",
    "commit_id": "c300aa64ddf57d9c5d9c898a64b36877345dd4a9",
    "added_lines": [
      "if (vcpu->arch.time_offset &",
      "(sizeof(struct pvclock_vcpu_time_info) - 1",
      "break"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 261,
    "id": "CVE-2013-1773",
    "commit_id": "0720a06a7518c9d0c0125bd5d1f3b6264c55c3dd",
    "added_lines": [
      "extern int utf8s_to_utf16s(const u8 *s, int len,",
      "enum utf16_endian endian, wchar_t *pwcs, int maxlen"
    ],
    "removed_lines": [
      "extern int utf8s_to_utf16s(const u8 *s, int len, wchar_t *pwcs"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  +Priv",
    "score": 6.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 262,
    "id": "CVE-2013-1772",
    "commit_id": "ce0030c00f95cf9110d9cdcd41e901e1fb814417",
    "added_lines": [
      "char buf_prefix[SYSLOG_PRI_MAX_LENGTH+1]",
      "unsigned i",
      "for (i = 0; i < ((end - cur_index)) && (i < SYSLOG_PRI_MAX_LENGTH); i++)",
      "buf_prefix[i] = LOG_BUF(cur_index + i",
      "buf_prefix[i] = '\\0';",
      "cur_index += log_prefix((const char *)&buf_prefix, &msg_level, NULL"
    ],
    "removed_lines": [
      "cur_index += log_prefix(&LOG_BUF(cur_index), &msg_level, NULL"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.0,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 266,
    "id": "CVE-2013-1428",
    "commit_id": "17a33dfd95b1a29e90db76414eb9622df9632320",
    "added_lines": [
      "if(len > sizeof outpkt.data",
      "return"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.5,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 268,
    "id": "CVE-2013-1416",
    "commit_id": "8ee70ec63931d1e38567905387ab9b1d45734d81",
    "added_lines": [
      "if (comp1->data != NULL",
      "memcpy(comp1_str, comp1->data, comp1->length",
      "if (comp2->data != NULL",
      "memcpy(temp_buf, comp2->data, comp2->length"
    ],
    "removed_lines": [
      "strlcpy(comp1_str,comp1->data,comp1->length+1",
      "strlcpy(temp_buf, comp2->data,comp2->length+1"
    ],
    "cause": [
      "Uncategorized Cluster 10"
    ],
    "effect": "DoS ",
    "score": 4.0,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "null pointer dereference"
    ]
  },
  {
    "index": 275,
    "id": "CVE-2013-0310",
    "commit_id": "89d7ae34cdda4195809a5a987f697a517a2a3177",
    "added_lines": [
      "if (skb == NULL || !(skb->dev->flags & IFF_LOOPBACK))"
    ],
    "removed_lines": [
      "if (!(skb->dev->flags & IFF_LOOPBACK))"
    ],
    "cause": [
      "Uncategorized Cluster 10"
    ],
    "effect": "DoS ",
    "score": 6.6,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "null pointer dereference"
    ]
  },
  {
    "index": 276,
    "id": "CVE-2013-0309",
    "commit_id": "027ef6c87853b0a9df53175063028edb4950d476",
    "added_lines": [
      "return pmd_flags(pte) & _PAGE_PSE",
      "return pmd_flags(pmd) & (_PAGE_PRESENT | _PAGE_PROTNONE | _PAGE_PSE"
    ],
    "removed_lines": [
      "return (pmd_flags(pte) & (_PAGE_PSE | _PAGE_PRESENT)) ==",
      "(_PAGE_PSE | _PAGE_PRESENT",
      "return pmd_flags(pmd) & _PAGE_PRESENT"
    ],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 4.7,
    "safe_features": [
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [
      "RETURN",
      "RETURN"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly support PROT_NONE memory regions"
    ]
  },
  {
    "index": 283,
    "id": "CVE-2013-0211",
    "commit_id": "22531545514043e04633e1c015c7540b9de9dbe4",
    "added_lines": [
      "const size_t max_write = INT_MAX",
      "if (s > max_write",
      "s = max_write"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer signedness error",
      "buffer overflow",
      "unspecified vectors"
    ]
  },
  {
    "index": 300,
    "id": "CVE-2012-3364",
    "commit_id": "67de956ff5dc1d4f321e16cfbd63f5be3b691b43",
    "added_lines": [
      "nfca_poll->nfcid1_len = min_t(__u8, *data++, NFC_NFCID1_MAXSIZE",
      "nfcb_poll->sensb_res_len = min_t(__u8, *data++, NFC_SENSB_RES_MAXSIZE",
      "nfcf_poll->sensf_res_len = min_t(__u8, *data++, NFC_SENSF_RES_MAXSIZE",
      "nfca_poll->rats_res_len = min_t(__u8, *data++, 20",
      "nfcb_poll->attrib_res_len = min_t(__u8, *data++, 50"
    ],
    "removed_lines": [
      "nfca_poll->nfcid1_len = *data++",
      "nfcb_poll->sensb_res_len = *data++",
      "nfcf_poll->sensf_res_len = *data++",
      "nfca_poll->rats_res_len = *data++",
      "nfcb_poll->attrib_res_len = *data++"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 301,
    "id": "CVE-2012-2119",
    "commit_id": "b92946e2919134ebe2a4083e4302236295ea2a73",
    "added_lines": [
      "if (i + size > MAX_SKB_FRAGS",
      "return -EMSGSIZE",
      "if (num_pages != size)",
      "int copylen = 0",
      "err = -EMSGSIZE",
      "if (unlikely(count > UIO_MAXIOV",
      "goto err",
      "if (count > MAX_SKB_FRAGS)",
      "copylen = iov_length(iv, count - MAX_SKB_FRAGS",
      "if (copylen < vnet_hdr_len",
      "copylen = 0",
      "else",
      "copylen -= vnet_hdr_len",
      "if (copylen < vnet_hdr.hdr_len",
      "copylen = vnet_hdr.hdr_len"
    ],
    "removed_lines": [
      "if ((num_pages != size) ||",
      "(num_pages > MAX_SKB_FRAGS - skb_shinfo(skb)->nr_frags))",
      "int copylen",
      "copylen = vnet_hdr.hdr_len"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.2,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 303,
    "id": "CVE-2011-4604",
    "commit_id": "b5a1eeef04cc7859f34dec9b72ea1b28e4aba07c",
    "added_lines": [
      "packet_len = min(count, socket_packet->icmp_len",
      "error = copy_to_user(buf, &socket_packet->icmp_packet, packet_len"
    ],
    "removed_lines": [
      "error = copy_to_user(buf, &socket_packet->icmp_packet,",
      "socket_packet->icmp_len",
      "packet_len = socket_packet->icmp_len"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 306,
    "id": "CVE-2011-4098",
    "commit_id": "64dd153c83743af81f20924c6343652d731eeecb",
    "added_lines": [
      "BH_Zeronew = BH_PrivateStart + 2,",
      "BUFFER_FNS(Zeronew, zeronew",
      "TAS_BUFFER_FNS(Zeronew, zeronew"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 1.9,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "relies on the page cache"
    ]
  },
  {
    "index": 316,
    "id": "CVE-2011-1180",
    "commit_id": "d370af0ef7951188daeb15bae75db7ba57c67846",
    "added_lines": [
      "IRDA_ASSERT(name_len < IAS_MAX_CLASSNAME + 1, return",
      "IRDA_ASSERT(attr_len < IAS_MAX_ATTRIBNAME + 1, return"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 324,
    "id": "CVE-2014-9140",
    "commit_id": "0f95d441e4b5d7512cc5c326c8668a120e048eda",
    "added_lines": [
      "u_char *b, *t, c",
      "const u_char *s",
      "b = (u_char *)malloc(length",
      "for (s = p, t = b, i = length; i > 0 && ND_TTEST(*s); i--)",
      "if (i <= 1 || !ND_TTEST(*s",
      "break",
      "i--",
      "c = *s++ ^ 0x20"
    ],
    "removed_lines": [
      "u_char *b, *s, *t, c",
      "b = (uint8_t *)malloc(length",
      "for (s = (u_char *)p, t = b, i = length; i > 0; i--)",
      "if (i > 1)",
      "i--",
      "c = *s++ ^ 0x20",
      "} else",
      "continue"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 325,
    "id": "CVE-2014-9050",
    "commit_id": "fc3794a54d2affe5770c1f876484a871c783e91e",
    "added_lines": [
      "unsigned int i, j, found, upx_success = 0, min = 0, max = 0, err, overlays = 0, rescan = 1",
      "uint32_t valign, falign, hdr_size",
      "while (rescan==1)",
      "rescan=0",
      "for (i=0; i < nsections; i++)",
      "exe_sections[i].rva = PEALIGN(EC32(section_hdr[i].VirtualAddress), valign",
      "exe_sections[i].vsz = PESALIGN(EC32(section_hdr[i].VirtualSize), valign",
      "exe_sections[i].raw = PEALIGN(EC32(section_hdr[i].PointerToRawData), falign",
      "exe_sections[i].rsz = PESALIGN(EC32(section_hdr[i].SizeOfRawData), falign",
      "exe_sections[i].chr = EC32(section_hdr[i].Characteristics",
      "exe_sections[i].urva = EC32(section_hdr[i].VirtualAddress);",
      "exe_sections[i].uvsz = EC32(section_hdr[i].VirtualSize",
      "exe_sections[i].uraw = EC32(section_hdr[i].PointerToRawData",
      "exe_sections[i].ursz = EC32(section_hdr[i].SizeOfRawData",
      "if (exe_sections[i].rsz) {",
      "if (!CLI_ISCONTAINED(0, fsize, exe_sections[i].uraw, exe_sections[i].ursz",
      "|| exe_sections[i].raw >= fsize)",
      "cli_dbgmsg(\"Broken PE file - Section %d starts or exists beyond the end of file (Offset@ %lu, Total filesize %lu)\\n\", i, (unsigned long)exe_sections[i].raw, (unsigned long)fsize",
      "if (nsections == 1)",
      "free(section_hdr",
      "free(exe_sections",
      "if(DETECT_BROKEN_PE)",
      "cli_append_virus(ctx, \"Heuristics.Broken.Executable\"",
      "return CL_VIRUS",
      "return CL_CLEAN;",
      "for (j=i; j < nsections-1; j++",
      "memcpy(&exe_sections[j], &exe_sections[j+1], sizeof(struct cli_exe_section",
      "for (j=i; j < nsections-1; j++",
      "memcpy(&section_hdr[j], &section_hdr[j+1], sizeof(struct pe_image_section_hdr",
      "nsections--",
      "rescan=1",
      "break",
      "strncpy(sname, (char *) section_hdr[i].Name, 8",
      "sname[8] = 0"
    ],
    "removed_lines": [
      "unsigned int i, found, upx_success = 0, min = 0, max = 0, err, overlays = 0",
      "uint32_t valign, falign, hdr_size, j",
      "strncpy(sname, (char *) section_hdr[i].Name, 8",
      "sname[8] = 0",
      "exe_sections[i].rva = PEALIGN(EC32(section_hdr[i].VirtualAddress), valign",
      "exe_sections[i].vsz = PESALIGN(EC32(section_hdr[i].VirtualSize), valign",
      "exe_sections[i].raw = PEALIGN(EC32(section_hdr[i].PointerToRawData), falign",
      "exe_sections[i].rsz = PESALIGN(EC32(section_hdr[i].SizeOfRawData), falign",
      "exe_sections[i].chr = EC32(section_hdr[i].Characteristics",
      "exe_sections[i].urva = EC32(section_hdr[i].VirtualAddress);",
      "exe_sections[i].uvsz = EC32(section_hdr[i].VirtualSize",
      "exe_sections[i].uraw = EC32(section_hdr[i].PointerToRawData",
      "exe_sections[i].ursz = EC32(section_hdr[i].SizeOfRawData",
      "if (exe_sections[i].raw >= fsize) {",
      "cli_dbgmsg(\"Broken PE file - Section %d starts beyond the end of file (Offset@ %lu, Total filesize %lu)\\n\", i, (unsigned long)exe_sections[i].raw, (unsigned long)fsize",
      "cli_dbgmsg(\"------------------------------------\\n\"",
      "free(section_hdr",
      "free(exe_sections",
      "if(DETECT_BROKEN_PE)",
      "cli_append_virus(ctx, \"Heuristics.Broken.Executable\"",
      "return CL_VIRUS",
      "return CL_CLEAN;"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "MEM_FREE",
      "MEM_FREE",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "MEM_COPY",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "NO_OP",
      "INDEX_OP",
      "MEM_COPY",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "MEM_FREE",
      "MEM_FREE",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 326,
    "id": "CVE-2014-8884",
    "commit_id": "f2e323ec96077642d397bb1c355def536d489d16",
    "added_lines": [
      "if (cmd->msg_len > sizeof(b) - 4",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  +Priv",
    "score": 6.1,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "ioctl call",
      "buffer overflow"
    ]
  },
  {
    "index": 329,
    "id": "CVE-2014-8509",
    "commit_id": "bbc0b7191e3f48461ca6e5b1b34bdf4b3f1e79a9",
    "added_lines": [
      "Copyright (c) 2003-2014, Arvid Norberg",
      "#include <algorithm>",
      "lazy_entry* dict_find(std::string const& name",
      "lazy_entry const* dict_find(std::string const& name) const",
      "{ return const_cast<lazy_entry*>(this)->dict_find(name);",
      "lazy_entry const* dict_find_dict(std::string const& name) const",
      "TORRENT_EXPORT std::string print_entry(lazy_entry const& e",
      "overflow,",
      "TORRENT_EXPORT boost::system::error_code make_error_code(error_code_enum e",
      "TORRENT_EXTRA_EXPORT char const* parse_int(char const* start",
      ", char const* end, char delimiter, boost::int64_t& val",
      ", bdecode_errors::error_code_enum& ec"
    ],
    "removed_lines": [
      "Copyright (c) 2003-2012, Arvid Norberg",
      "TORRENT_EXTRA_EXPORT std::string print_entry(lazy_entry const& e",
      "inline boost::system::error_code make_error_code(error_code_enum e",
      "return boost::system::error_code(e, get_bdecode_category"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "RETURN"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "out-of-bounds",
      "*improper indexing.*",
      "out-of-bounds read"
    ]
  },
  {
    "index": 348,
    "id": "CVE-2014-6396",
    "commit_id": "e3abe7d7585ecc420a7cab73313216613aadad5a",
    "added_lines": [
      "u_char password[66]",
      "length -= 4",
      "if (length < 0 || length > 65 || PACKET->DATA.len < length+5)",
      "dissect_wipe_session(PACKET, DISSECT_CODE(dissector_postgresql",
      "return NULL",
      "snprintf((char*)conn_status->password, length+1, \"%s\", (char*)(ptr + 5"
    ],
    "removed_lines": [
      "u_char password[65]",
      "strncpy((char*)conn_status->password, (char*)(ptr + 5), length - 4",
      "conn_status->password[length - 4] = 0"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "allows remote attackers to cause a denial of service and possibly execute arbitrary code via a crafted password length"
    ]
  },
  {
    "index": 350,
    "id": "CVE-2014-6228",
    "commit_id": "1f91e076a585118495b976a413c1df40f6fd3d41",
    "added_lines": [
      "Fatal error: String length exceeded 2^31-2: 4000004000000 in %s on line 3"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 365,
    "id": "CVE-2014-4656",
    "commit_id": "ac902c112d90a89e59916f751c2745f4dbdbb4bd",
    "added_lines": [
      "if (card->last_numid >= UINT_MAX - count",
      "card->last_numid = 0"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 366,
    "id": "CVE-2014-4655",
    "commit_id": "82262a46627bebb0febcc26664746c25cef08563",
    "added_lines": [
      "if (replace)",
      "err = snd_ctl_remove_user_ctl(file, &info->id",
      "if (err",
      "return err",
      "if (card->user_ctl_count >= MAX_USER_CONTROLS",
      "return -ENOMEM"
    ],
    "removed_lines": [
      "if (!replace && card->user_ctl_count >= MAX_USER_CONTROLS",
      "return -ENOMEM",
      "down_write(&card->controls_rwsem",
      "_kctl = snd_ctl_find_id(card, &info->id",
      "err = 0",
      "if (_kctl)",
      "if (replace",
      "err = snd_ctl_remove(card, _kctl",
      "else",
      "err = -EBUSY",
      "} else",
      "if (replace",
      "err = -ENOENT",
      "up_write(&card->controls_rwsem",
      "if (err < 0",
      "return err"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Bypass",
    "score": 4.9,
    "safe_features": [
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "vuln": "DoS Overflow Bypass ",
    "summary": [
      "ioctl call",
      "integer overflow"
    ]
  },
  {
    "index": 369,
    "id": "CVE-2014-4611",
    "commit_id": "206204a1162b995e2185275167b22468c00d6b36",
    "added_lines": [
      "if (unlikely(length > (size_t)(length + len",
      "goto _output_error"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 5.0,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 370,
    "id": "CVE-2014-4608",
    "commit_id": "206a81c18401c0cde6e579164f752c4b147324ce",
    "added_lines": [
      "#define HAVE_IP(t, x)\t\t\t\t\t\\",
      "(((size_t)(ip_end - ip) >= (size_t)(t + x)) &&\t\\",
      "(((t + x) >= t) && ((t + x) >= x",
      "#define HAVE_OP(t, x)\t\t\t\t\t\\",
      "(((size_t)(op_end - op) >= (size_t)(t + x)) &&\t\\",
      "(((t + x) >= t) && ((t + x) >= x",
      "#define NEED_IP(t, x)\t\t\t\t\t\\",
      "do {\t\t\t\t\t\t\\",
      "if (!HAVE_IP(t, x))\t\t\t\\",
      "goto input_overrun;\t\t\\",
      "} while (0",
      "#define NEED_OP(t, x)\t\t\t\t\t\\",
      "do {\t\t\t\t\t\t\\",
      "if (!HAVE_OP(t, x))\t\t\t\\",
      "goto output_overrun;\t\t\\",
      "} while (0",
      "#define TEST_LB(m_pos)\t\t\t\t\t\\",
      "do {\t\t\t\t\t\t\\",
      "if ((m_pos) < out)\t\t\t\\",
      "goto lookbehind_overrun;\t\\",
      "} while (0",
      "NEED_IP(1, 0",
      "if (likely(HAVE_IP(t, 15) && HAVE_OP(t, 15)))",
      "NEED_OP(t, 0",
      "NEED_IP(t, 3",
      "NEED_OP(2, 0",
      "NEED_IP(1, 0",
      "NEED_IP(2, 0",
      "NEED_IP(1, 0",
      "NEED_IP(2, 0",
      "if (likely(HAVE_OP(t, 15)))",
      "if (HAVE_IP(6, 0))",
      "NEED_OP(t, 0",
      "NEED_OP(t, 0",
      "if (likely(HAVE_IP(6, 0) && HAVE_OP(4, 0)))",
      "NEED_IP(t, 3",
      "NEED_OP(t, 0"
    ],
    "removed_lines": [
      "#define HAVE_IP(x)      ((size_t)(ip_end - ip) >= (size_t)(x",
      "#define HAVE_OP(x)      ((size_t)(op_end - op) >= (size_t)(x",
      "#define NEED_IP(x)      if (!HAVE_IP(x)) goto input_overrun",
      "#define NEED_OP(x)      if (!HAVE_OP(x)) goto output_overrun",
      "#define TEST_LB(m_pos)  if ((m_pos) < out) goto lookbehind_overrun",
      "NEED_IP(1",
      "if (likely(HAVE_IP(t + 15) && HAVE_OP(t + 15)))",
      "NEED_OP(t",
      "NEED_IP(t + 3",
      "NEED_OP(2",
      "NEED_IP(1",
      "NEED_IP(2",
      "NEED_IP(1",
      "NEED_IP(2",
      "if (likely(HAVE_OP(t + 15)))",
      "if (HAVE_IP(6))",
      "NEED_OP(t",
      "NEED_OP(t",
      "if (likely(HAVE_IP(6) && HAVE_OP(4)))",
      "NEED_IP(t + 3",
      "NEED_OP(t"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 372,
    "id": "CVE-2014-4502",
    "commit_id": "e1c5050734123973b99d181c45e74b2cbb00272e",
    "added_lines": [
      "static bool _valid_hex(char *s, const char *file, const char *func, const int line",
      "bool ret = false",
      "int i, len",
      "if (unlikely(!s))",
      "applog(LOG_ERR, \"Null string passed to valid_hex from\"IN_FMT_FFL, file, func, line",
      "return ret",
      "len = strlen(s",
      "if (unlikely(!len))",
      "applog(LOG_ERR, \"Zero length string passed to valid_hex from\"IN_FMT_FFL, file, func, line",
      "return ret",
      "for (i = 0; i < len; i++)",
      "unsigned char idx = s[i]",
      "if (unlikely(hex2bin_tbl[idx] < 0))",
      "applog(LOG_ERR, \"Invalid char %x passed to valid_hex from\"IN_FMT_FFL, idx, file, func, line",
      "return ret",
      "ret = true",
      "return ret",
      "#define valid_hex(s) _valid_hex(s, __FILE__, __func__, __LINE__",
      "snprintf(url_address, 254, \"%.*s\", url_len, url_begin",
      "if (!valid_hex(job_id) || !valid_hex(prev_hash) || !valid_hex(coinbase1) ||",
      "!valid_hex(coinbase2) || !valid_hex(bbversion) || !valid_hex(nbit) ||",
      "!valid_hex(ntime))",
      "free(job_id",
      "free(coinbase1",
      "free(coinbase2",
      "snprintf(address, 254, \"%s:%s\", url, port",
      "if (!valid_hex(nonce1))",
      "applog(LOG_INFO, \"Failed to get valid nonce1 in initiate_stratum\"",
      "if (n2size < 2 || n2size > 16)",
      "applog(LOG_INFO, \"Failed to get valid n2size in initiate_stratum\""
    ],
    "removed_lines": [
      "sprintf(url_address, \"%.*s\", url_len, url_begin",
      "if (!job_id || !prev_hash || !coinbase1 || !coinbase2 || !bbversion || !nbit || !ntime)",
      "if (job_id",
      "free(job_id",
      "if (coinbase1",
      "free(coinbase1",
      "if (coinbase2",
      "free(coinbase2",
      "sprintf(address, \"%s:%s\", url, port",
      "if (!nonce1)",
      "applog(LOG_INFO, \"Failed to get nonce1 in initiate_stratum\"",
      "if (!n2size)",
      "applog(LOG_INFO, \"Failed to get n2size in initiate_stratum\""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 10.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "INDEX_OP",
      "RETURN",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "MEM_FREE",
      "MEM_FREE",
      "MEM_FREE",
      "MEM_COPY",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "MEM_FREE",
      "CONTROL_FLOW",
      "MEM_FREE",
      "CONTROL_FLOW",
      "MEM_FREE",
      "MEM_COPY",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 373,
    "id": "CVE-2014-4501",
    "commit_id": "b65574bef233474e915fdf18614aa211e31cc6c2",
    "added_lines": [
      "if (url_len >= sizeof(url_address",
      "applog(LOG_WARNING, \"%s: Truncating overflowed address '%.*s'\",",
      "__func__, url_len, url_begin",
      "url_len = sizeof(url_address) - 1"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 10.0,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 374,
    "id": "CVE-2014-4345",
    "commit_id": "dc7ed55c689d57de7f7408b34631bf06fec9dab1",
    "added_lines": [
      "if (i < n_key_data - 1",
      "currkvno = key_data[i + 1].key_data_kvno"
    ],
    "removed_lines": [
      "currkvno = key_data[i].key_data_kvno"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 8.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "off-by-one",
      "buffer overflow",
      "off-by-one error"
    ]
  },
  {
    "index": 377,
    "id": "CVE-2014-4342",
    "commit_id": "e6ae703ae597d798e310368d52b8f38ee11c6a73",
    "added_lines": [
      "if (ctx->seq == NULL)",
      "return GSS_S_DEFECTIVE_TOKEN",
      "if (header->buffer.length < token_wrapper_len + 22)"
    ],
    "removed_lines": [
      "if (header->buffer.length < token_wrapper_len + 14)"
    ],
    "cause": [
      "Uncategorized Cluster 10",
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer over-read",
      "null pointer dereference"
    ]
  },
  {
    "index": 379,
    "id": "CVE-2014-4049",
    "commit_id": "b34d7849ed90ced9345f8ea1c59bc8d101c18468",
    "added_lines": [
      "if ((ll + n) >= dlen)",
      "n = dlen - (ll + 1"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 5.1,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 382,
    "id": "CVE-2014-3985",
    "commit_id": "3a87aa2f10bd7f1408e1849bdb59c41dd63a9fe9",
    "added_lines": [
      "while((i < (int)header_buf_used) && (header_buf[i]=='\\r' || header_buf[i] == '\\n'"
    ],
    "removed_lines": [
      "while(header_buf[i]=='\\r' || header_buf[i] == '\\n'"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 397,
    "id": "CVE-2014-3597",
    "commit_id": "2fefae47716d501aec41c1102f3fd4531f070b05",
    "added_lines": [
      "#define CHECKCP(n) do { \\",
      "if (cp + n > end) { \\",
      "return NULL; \\",
      "} \\",
      "} while (0",
      "static u_char *php_parserr(u_char *cp, u_char *end, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray",
      "n = dn_expand(answer->qb2, end, cp, name, sizeof(name) - 2",
      "CHECKCP(10",
      "CHECKCP(dlen",
      "CHECKCP(4",
      "CHECKCP(2",
      "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2",
      "CHECKCP(1",
      "CHECKCP(n",
      "CHECKCP(1",
      "CHECKCP(n",
      "int l1 = 0, l2 = 0",
      "while (l1 < dlen)",
      "n = cp[l1]",
      "if ((l1 + n) >= dlen)",
      "n = dlen - (l1 + 1",
      "if (n)",
      "memcpy(tp + l2 , cp + l1 + 1, n",
      "add_next_index_stringl(entries, cp + l1 + 1, n, 1",
      "l1 = l1 + n + 1",
      "l2 = l2 + n",
      "tp[l2] = '\\0'",
      "add_assoc_stringl(*subarray, \"txt\", tp, l2, 0",
      "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2",
      "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) -2",
      "CHECKCP(5*4",
      "CHECKCP(8*2",
      "CHECKCP(1",
      "CHECKCP(2",
      "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2",
      "CHECKCP(3*2",
      "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2",
      "CHECKCP(2*2",
      "CHECKCP(1",
      "cp++",
      "CHECKCP(n",
      "add_assoc_stringl(*subarray, \"flags\", (char*)cp, n, 1",
      "CHECKCP(1",
      "cp++",
      "CHECKCP(n",
      "add_assoc_stringl(*subarray, \"services\", (char*)cp, n, 1",
      "CHECKCP(1",
      "cp++",
      "CHECKCP(n",
      "add_assoc_stringl(*subarray, \"regex\", (char*)cp, n, 1",
      "n = dn_expand(answer->qb2, end, cp, name, (sizeof name) - 2",
      "cp = php_parserr(cp, end, &answer, type_to_fetch, store_results, raw, &retval",
      "cp = php_parserr(cp, end, &answer, DNS_T_ANY, authns != NULL, raw, &retval",
      "cp = php_parserr(cp, end, &answer, DNS_T_ANY, 1, raw, &retval"
    ],
    "removed_lines": [
      "static u_char *php_parserr(u_char *cp, querybuf *answer, int type_to_fetch, int store, int raw, zval **subarray",
      "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, sizeof(name) - 2",
      "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2",
      "int ll = 0",
      "while (ll < dlen)",
      "n = cp[ll]",
      "if ((ll + n) >= dlen)",
      "n = dlen - (ll + 1",
      "memcpy(tp + ll , cp + ll + 1, n",
      "add_next_index_stringl(entries, cp + ll + 1, n, 1",
      "ll = ll + n + 1",
      "tp[dlen] = '\\0'",
      "add_assoc_stringl(*subarray, \"txt\", tp, (dlen>0)?dlen - 1:0, 0",
      "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2",
      "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2",
      "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2",
      "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2",
      "add_assoc_stringl(*subarray, \"flags\", (char*)++cp, n, 1",
      "add_assoc_stringl(*subarray, \"services\", (char*)++cp, n, 1",
      "add_assoc_stringl(*subarray, \"regex\", (char*)++cp, n, 1",
      "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2",
      "cp = php_parserr(cp, &answer, type_to_fetch, store_results, raw, &retval",
      "cp = php_parserr(cp, &answer, DNS_T_ANY, authns != NULL, raw, &retval",
      "cp = php_parserr(cp, &answer, DNS_T_ANY, 1, raw, &retval"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "MEM_COPY",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "MEM_COPY",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 398,
    "id": "CVE-2014-3587",
    "commit_id": "7ba1409a1aee5925180de546057ddd84ff267947",
    "added_lines": [
      "if (q < p || q > e)"
    ],
    "removed_lines": [
      "if (q > e)"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 400,
    "id": "CVE-2014-3535",
    "commit_id": "256df2f3879efdb2e9808bdb1b54b16fbb11fa38",
    "added_lines": [
      "static int __netdev_printk(const char *level, const struct net_device *dev,",
      "struct va_format *vaf",
      "int r",
      "if (dev && dev->dev.parent",
      "r = dev_printk(level, dev->dev.parent, \"%s: %pV\",",
      "netdev_name(dev), vaf",
      "else if (dev",
      "r = printk(\"%s%s: %pV\", level, netdev_name(dev), vaf",
      "else",
      "r = printk(\"%s(NULL net_device): %pV\", level, vaf",
      "return r",
      "int netdev_printk(const char *level, const struct net_device *dev,",
      "const char *format, ...",
      "struct va_format vaf",
      "va_list args",
      "int r",
      "va_start(args, format",
      "vaf.fmt = format",
      "vaf.va = &args",
      "r = __netdev_printk(level, dev, &vaf",
      "va_end(args",
      "return r",
      "EXPORT_SYMBOL(netdev_printk",
      "#define define_netdev_printk_level(func, level)\t\t\t\\",
      "int func(const struct net_device *dev, const char *fmt, ...)\t\\",
      "{\t\t\t\t\t\t\t\t\\",
      "int r;\t\t\t\t\t\t\t\\",
      "struct va_format vaf;\t\t\t\t\t\\",
      "va_list args;\t\t\t\t\t\t\\",
      "\\",
      "va_start(args, fmt);\t\t\t\t\t\\",
      "\\",
      "vaf.fmt = fmt;\t\t\t\t\t\t\\",
      "vaf.va = &args;\t\t\t\t\t\t\\",
      "\\",
      "r = __netdev_printk(level, dev, &vaf);\t\t\t\\",
      "va_end(args);\t\t\t\t\t\t\\",
      "\\",
      "return r;\t\t\t\t\t\t\\",
      "}\t\t\t\t\t\t\t\t\\",
      "EXPORT_SYMBOL(func",
      "define_netdev_printk_level(netdev_emerg, KERN_EMERG",
      "define_netdev_printk_level(netdev_alert, KERN_ALERT",
      "define_netdev_printk_level(netdev_crit, KERN_CRIT",
      "define_netdev_printk_level(netdev_err, KERN_ERR",
      "define_netdev_printk_level(netdev_warn, KERN_WARNING",
      "define_netdev_printk_level(netdev_notice, KERN_NOTICE",
      "define_netdev_printk_level(netdev_info, KERN_INFO"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 10"
    ],
    "effect": "DoS ",
    "score": 7.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "null pointer dereference"
    ]
  },
  {
    "index": 405,
    "id": "CVE-2014-3478",
    "commit_id": "27a14bc7ba285a0a5ebfdb55e54001aa11932b08",
    "added_lines": [
      "FILE_RCSID(\"@(#)$File: softmagic.c,v 1.190 2014/06/03 19:01:34 christos Exp $\"",
      "size_t sz = file_pstring_length_size(m",
      "char *ptr1 = p->s, *ptr2 = ptr1 + sz",
      "if (len >= sizeof(p->s))",
      "len = sizeof(p->s) - sz"
    ],
    "removed_lines": [
      "FILE_RCSID(\"@(#)$File: softmagic.c,v 1.189 2014/05/30 16:47:44 christos Exp $\"",
      "char *ptr1 = p->s, *ptr2 = ptr1 + file_pstring_length_size(m",
      "if (len >= sizeof(p->s",
      "len = sizeof(p->s) - 1"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 406,
    "id": "CVE-2014-3186",
    "commit_id": "844817e47eef14141cf59b8d5ac08dd11c0a9189",
    "added_lines": [
      "if (size > 64)",
      "hid_warn(hdev, \"invalid size value (%d) for picolcd raw event\\n\",",
      "size",
      "return 0"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.9,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "INDEX_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 407,
    "id": "CVE-2014-3185",
    "commit_id": "6817ae225cd650fb1c3295d769298c38b1eba818",
    "added_lines": [
      "if (!urb->actual_length)",
      "dev_dbg(&urb->dev->dev, \"%s - empty response, exiting.\\n\", __func__",
      "return",
      "} else if ((data[0] == WHITEHEAT_GET_DTR_RTS) &&",
      "(urb->actual_length - 1 <= sizeof(command_info->result_buffer)))"
    ],
    "removed_lines": [
      "} else if (data[0] == WHITEHEAT_GET_DTR_RTS)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 6.9,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "POINTER_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "CONDITIONAL"
    ],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 408,
    "id": "CVE-2014-3184",
    "commit_id": "4ab25786c87eb20857bbb715c3ae34ec8fd6a214",
    "added_lines": [
      "if (*rsize >= 112 && rdesc[104] == 0x26 && rdesc[105] == 0x80 &&"
    ],
    "removed_lines": [
      "if (*rsize >= 107 && rdesc[104] == 0x26 && rdesc[105] == 0x80 &&"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.7,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 409,
    "id": "CVE-2014-3183",
    "commit_id": "51217e69697fba92a06e07e16f55c9a52d8e8945",
    "added_lines": [
      "if (count > DJREPORT_SHORT_LENGTH - 2"
    ],
    "removed_lines": [
      "if (count < DJREPORT_SHORT_LENGTH - 2"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.9,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 410,
    "id": "CVE-2014-3182",
    "commit_id": "ad3e14d7c5268c2e24477c6ef54bbdf88add5d36",
    "added_lines": [
      "if ((dj_report->device_index < DJ_DEVICE_INDEX_MIN) ||",
      "(dj_report->device_index > DJ_DEVICE_INDEX_MAX))",
      "dev_err(&hdev->dev, \"%s: invalid device index:%d\\n\",",
      "__func__, dj_report->device_index",
      "return false"
    ],
    "removed_lines": [
      "if ((dj_report->device_index < DJ_DEVICE_INDEX_MIN) ||",
      "(dj_report->device_index > DJ_DEVICE_INDEX_MAX))",
      "dev_err(&djrcv_hdev->dev, \"%s: invalid device index:%d\\n\",",
      "__func__, dj_report->device_index",
      "return"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.9,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "array index error"
    ]
  },
  {
    "index": 411,
    "id": "CVE-2014-3181",
    "commit_id": "c54def7bd64d7c0b6993336abcffb8444795bf38",
    "added_lines": [
      "if (npoints > 15)",
      "hid_warn(hdev, \"invalid size value (%d) for TRACKPAD_REPORT_ID\\n\",",
      "size",
      "return 0",
      "if (npoints > 15)",
      "hid_warn(hdev, \"invalid size value (%d) for MOUSE_REPORT_ID\\n\",",
      "size",
      "return 0"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.9,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "INDEX_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "INDEX_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 412,
    "id": "CVE-2014-3158",
    "commit_id": "7658e8257183f062dc01f87969c140707c7e52cb",
    "added_lines": [
      "if (len < MAXWORDLEN)",
      "++len",
      "if (len < MAXWORDLEN)",
      "++len"
    ],
    "removed_lines": [
      "if (len < MAXWORDLEN-1",
      "++len",
      "if (len < MAXWORDLEN-1",
      "++len"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 421,
    "id": "CVE-2014-2669",
    "commit_id": "31400a673325147e1205326008e32135a78b4d8a",
    "added_lines": [
      "#include <limits.h>",
      "#define VARBITMAXLEN\t\t(INT_MAX - BITS_PER_BYTE + 1"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.5,
    "safe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 424,
    "id": "CVE-2014-2270",
    "commit_id": "447558595a3650db2886cd2f416ad0beba965801",
    "added_lines": [
      "FILE_RCSID(\"@(#)$File: softmagic.c,v 1.171 2014/01/08 22:02:06 christos Exp $\"",
      "#define OFFSET_OOB(n, o, i)\t((n) < (o) || (i) >= ((n) - (o",
      "if (OFFSET_OOB(nbytes, offset, 1",
      "if (OFFSET_OOB(nbytes, offset, 2",
      "if (OFFSET_OOB(nbytes, offset, 2",
      "if (OFFSET_OOB(nbytes, offset, 2",
      "if (OFFSET_OOB(nbytes, offset, 4",
      "if (OFFSET_OOB(nbytes, offset, 4",
      "if (OFFSET_OOB(nbytes, offset, 4",
      "if (OFFSET_OOB(nbytes, offset, 4",
      "if (OFFSET_OOB(nbytes, offset, 1",
      "if (OFFSET_OOB(nbytes, offset, 2",
      "if (OFFSET_OOB(nbytes, offset, 4",
      "if (OFFSET_OOB(nbytes, offset, 8",
      "if (OFFSET_OOB(nbytes, offset, m->vallen",
      "if (OFFSET_OOB(nbytes, offset, 0",
      "if (OFFSET_OOB(nbytes, offset, 0",
      "if (OFFSET_OOB(nbytes, offset, 0"
    ],
    "removed_lines": [
      "FILE_RCSID(\"@(#)$File: softmagic.c,v 1.170 2014/01/06 02:25:32 christos Exp $\"",
      "if (nbytes < offset || nbytes < (offset + 1",
      "if (nbytes < offset || nbytes < (offset + 2",
      "if (nbytes < offset || nbytes < (offset + 2",
      "if (nbytes < offset || nbytes < (offset + 2",
      "if (nbytes < offset || nbytes < (offset + 4",
      "if (nbytes < offset || nbytes < (offset + 4",
      "if (nbytes < offset || nbytes < (offset + 4",
      "if (nbytes < offset || nbytes < (offset + 4",
      "if (nbytes < (offset + 1))",
      "if (nbytes < (offset + 2",
      "if (nbytes < (offset + 4",
      "if (nbytes < (offset + 8",
      "if (nbytes < (offset + m->vallen",
      "if (nbytes < offset",
      "if (nbytes < offset",
      "if (nbytes < offset"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds memory"
    ]
  },
  {
    "index": 434,
    "id": "CVE-2014-1690",
    "commit_id": "2690d97ade05c5325cbf7c72b94b90d265659886",
    "added_lines": [
      "struct nf_conn *ct = exp->master",
      "union nf_inet_addr newaddr",
      "newaddr = ct->tuplehash[IP_CT_DIR_REPLY].tuple.dst.u3",
      "nf_ct_helper_log(skb, ct, \"all ports in use\"",
      "snprintf(buffer, sizeof(buffer), \"%u %u\", ntohl(newaddr.ip), port",
      "pr_debug(\"nf_nat_irc: inserting '%s' == %pI4, port %u\\n\",",
      "buffer, &newaddr.ip, port",
      "ret = nf_nat_mangle_tcp_packet(skb, ct, ctinfo, protoff, matchoff,",
      "matchlen, buffer, strlen(buffer",
      "nf_ct_helper_log(skb, ct, \"cannot mangle packet\""
    ],
    "removed_lines": [
      "nf_ct_helper_log(skb, exp->master, \"all ports in use\"",
      "ret = nf_nat_mangle_tcp_packet(skb, exp->master, ctinfo,",
      "protoff, matchoff, matchlen, buffer,",
      "strlen(buffer",
      "nf_ct_helper_log(skb, exp->master, \"cannot mangle packet\""
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": " +Info",
    "score": 2.6,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow +Info ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 440,
    "id": "CVE-2014-1236",
    "commit_id": "1d1bdec6318746f6f19f245db589eddc887ae8ff",
    "added_lines": [
      "unsigned char c = (unsigned char)yytext[yyleng-1];",
      "if (!isdigit(c) && (c != '.')) {",
      "unsigned char xbuf[BUFSIZ]",
      "char buf[BUFSIZ]",
      "agxbuf  xb",
      "char* fname",
      "if (InputFile",
      "fname = InputFile",
      "else",
      "fname = \"input\"",
      "agxbinit(&xb, BUFSIZ, xbuf",
      "agxbput(&xb,\"syntax ambiguity - badly delimited number '\"",
      "agxbput(&xb,yytext",
      "sprintf(buf,\"' in line %d of \", line_num",
      "agxbput(&xb,buf",
      "agxbput(&xb,fname",
      "agxbput(&xb, \" splits into two tokens\\n\"",
      "agerr(AGWARN,agxbuse(&xb",
      "agxbfree(&xb",
      "return 1",
      "else return 0"
    ],
    "removed_lines": [
      "unsigned char\tc = (unsigned char)yytext[yyleng-1];",
      "if (!isdigit(c) && (c != '.')) {",
      "char\tbuf[BUFSIZ]",
      "sprintf(buf,\"syntax error - badly formed number '%s' in line %d of %s\\n\",yytext,line_num, InputFile",
      "strcat (buf, \"splits into two name tokens\\n\"",
      "agerr(AGWARN,buf",
      "return 1",
      "else return 0"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 10.0,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "RETURN"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARITH_OP",
      "RETURN"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 441,
    "id": "CVE-2014-0978",
    "commit_id": "7aaddf52cd98589fb0c3ab72a393f8411838438a",
    "added_lines": [
      "#include <agxbuf.h>",
      "unsigned char\txbuf[BUFSIZ]",
      "agxbuf  xb",
      "agxbinit(&xb, BUFSIZ, xbuf",
      "if (InputFile)",
      "agxbput (&xb, InputFile",
      "agxbput (&xb, \": \"",
      "sprintf(buf,\" %s in line %d near '\", str,line_num",
      "agxbput (&xb, buf",
      "agxbput (&xb, yytext",
      "agxbput (&xb,\"'\\n\"",
      "agerr(AGWARN,agxbuse(&xb",
      "agxbfree(&xb"
    ],
    "removed_lines": [
      "if (InputFile",
      "sprintf(buf,\"%s:%d: %s in line %d near '%s'\\n\",InputFile, line_num,",
      "str,line_num,yytext",
      "else",
      "sprintf(buf,\" %s in line %d near '%s'\\n\", str,line_num,yytext",
      "agerr(AGWARN,buf"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 9.3,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "MEM_COPY"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "MEM_COPY",
      "MEM_COPY"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 442,
    "id": "CVE-2014-0791",
    "commit_id": "e2745807c4c3e0a590c0f69a9b655dc74ebaa03e",
    "added_lines": [
      "if (Stream_GetRemainingLength(s) / sizeof(LICENSE_BLOB) < scopeCount",
      "return FALSE;"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 443,
    "id": "CVE-2014-0749",
    "commit_id": "3ed749263abe3d69fa3626d142a5789dcb5a5684",
    "added_lines": [
      "if (count >= dis_umaxd",
      "if (count > dis_umaxd",
      "goto overflow",
      "if (memcmp(scratch, dis_umax, dis_umaxd) > 0",
      "goto overflow"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 10.0,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 444,
    "id": "CVE-2014-0238",
    "commit_id": "f97486ef5dc3e8735440edc4fc8808c63e1a3ef0",
    "added_lines": [
      "FILE_RCSID(\"@(#)$File: cdf.c,v 1.59 2014/05/14 23:22:48 christos Exp $\"",
      "if (nelements == 0)",
      "DPRINTF((\"CDF_VECTOR with nelements == 0\\n\"",
      "goto out",
      "for (j = 0; j < nelements && i < sh.sh_properties",
      "j++, i++"
    ],
    "removed_lines": [
      "FILE_RCSID(\"@(#)$File: cdf.c,v 1.58 2014/05/13 16:41:06 christos Exp $\"",
      "for (j = 0; j < nelements; j++, i++)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "infinite loop",
      "out-of-bounds memory"
    ]
  },
  {
    "index": 446,
    "id": "CVE-2014-0207",
    "commit_id": "6d209c1c489457397a5763bca4b28e43aac90391",
    "added_lines": [
      "FILE_RCSID(\"@(#)$File: readcdf.c,v 1.40 2014/03/06 15:23:33 christos Exp $\"",
      "size_t count, const cdf_directory_t *root_storage",
      "if (!NOTMIME(ms) && root_storage",
      "str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2mime",
      "const cdf_stream_t *sst, const cdf_directory_t *root_storage",
      "if (root_storage)",
      "str = cdf_clsid_to_mime(root_storage->d_storage_uuid, clsid2desc",
      "if (str",
      "if (file_printf(ms, \", %s\", str) == -1",
      "return -2",
      "m = cdf_file_property_info(ms, info, count, root_storage",
      "if ((i = cdf_file_summary_info(ms, &h, &scn, root_storage)) < 0",
      "expn = \"Can't expand summary_info\""
    ],
    "removed_lines": [
      "FILE_RCSID(\"@(#)$File: readcdf.c,v 1.39 2014/02/27 23:26:18 christos Exp $\"",
      "size_t count, const uint64_t clsid[2]",
      "if (!NOTMIME(ms",
      "str = cdf_clsid_to_mime(clsid, clsid2mime",
      "const cdf_stream_t *sst, const uint64_t clsid[2]",
      "str = cdf_clsid_to_mime(clsid, clsid2desc",
      "if (str",
      "if (file_printf(ms, \", %s\", str) == -1",
      "return -2",
      "m = cdf_file_property_info(ms, info, count, clsid",
      "if ((i = cdf_file_summary_info(ms, &h, &scn,",
      "root_storage->d_storage_uuid)) < 0",
      "expn = \"Can't expand summary_info\""
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "assertion failure"
    ]
  },
  {
    "index": 448,
    "id": "CVE-2014-0205",
    "commit_id": "7ada876a8703f23befbb20a7465a702ee39b1704",
    "added_lines": [
      "goto out",
      "goto out",
      "if (!signal_pending(current",
      "goto out"
    ],
    "removed_lines": [
      "get_futex_key_refs(&q->key",
      "drop_futex_key_refs(&q->key",
      "drop_futex_key_refs(&q->key",
      "goto out_put_key",
      "goto out_put_key",
      "if (!signal_pending(current))",
      "put_futex_key(fshared, &q.key",
      "goto out_put_key",
      "out_put_key:",
      "put_futex_key(fshared, &q.key"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  +Priv",
    "score": 6.9,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "use-after-free"
    ]
  },
  {
    "index": 455,
    "id": "CVE-2014-0069",
    "commit_id": "5d81de8e8667da7135d3a32a964087c0faf5483f",
    "added_lines": [
      "size_t bytes, copied, len, cur_len",
      "bytes = min_t(const size_t, cur_len, PAGE_SIZE",
      "0, bytes",
      "if (copied < bytes",
      "break",
      "if (!cur_len)",
      "for (i = 0; i < nr_pages; i++",
      "put_page(wdata->pages[i]",
      "kfree(wdata",
      "rc = -EFAULT",
      "break",
      "for ( ; nr_pages > i + 1; nr_pages--",
      "put_page(wdata->pages[nr_pages - 1]"
    ],
    "removed_lines": [
      "size_t copied, len, cur_len",
      "copied = min_t(const size_t, cur_len, PAGE_SIZE",
      "0, copied"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS  +Priv Mem. Corr. +Info",
    "score": 6.2,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow +Priv Mem. Corr. +Info ",
    "summary": [
      "does not properly handle uncached write operations that copy fewer than the requested number of bytes,"
    ]
  },
  {
    "index": 456,
    "id": "CVE-2014-0063",
    "commit_id": "4318daecc959886d001a6e79c6ea853e8b1dfb4b",
    "added_lines": [
      "-- test long interval output",
      "select '100000000y 10mon -1000000000d -1000000000h -10min -10.000001s ago'::interval"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.5,
    "safe_features": [
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 457,
    "id": "CVE-2014-0049",
    "commit_id": "a08d3b3b99efd509133946056531cdf8f3a0c09b",
    "added_lines": [
      "if (vcpu->mmio_cur_fragment >= vcpu->mmio_nr_fragments)"
    ],
    "removed_lines": [
      "if (vcpu->mmio_cur_fragment == vcpu->mmio_nr_fragments)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 7.4,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 480,
    "id": "CVE-2011-3346",
    "commit_id": "7285477ab11831b1cf56e45878a89170dd06d9b9",
    "added_lines": [
      "uint32_t buflen",
      "static int scsi_disk_emulate_command(SCSIDiskReq *r",
      "if (r->iov.iov_base)",
      "qemu_vfree(r->iov.iov_base",
      "SCSIDiskState *s = DO_UPCAST(SCSIDiskState, qdev, r->req.dev",
      "if (!r->iov.iov_base)",
      "r->buflen = SCSI_DMA_BUF_SIZE",
      "r->iov.iov_base = qemu_blockalign(s->bs, r->buflen",
      "r->iov.iov_len = MIN(r->sector_count * 512, r->buflen",
      "ret = scsi_disk_emulate_command(r",
      "static int scsi_disk_emulate_command(SCSIDiskReq *r",
      "uint8_t *outbuf",
      "if (!r->iov.iov_base)",
      "if (req->cmd.xfer > 65536)",
      "goto illegal_request",
      "r->buflen = MAX(4096, req->cmd.xfer",
      "r->iov.iov_base = qemu_blockalign(s->bs, r->buflen",
      "outbuf = r->iov.iov_base",
      "rc = scsi_disk_emulate_command(r"
    ],
    "removed_lines": [
      "static int scsi_disk_emulate_command(SCSIDiskReq *r, uint8_t *outbuf",
      "qemu_vfree(r->iov.iov_base",
      "r->iov.iov_len = MIN(r->sector_count * 512, SCSI_DMA_BUF_SIZE",
      "ret = scsi_disk_emulate_command(r, r->iov.iov_base",
      "static int scsi_disk_emulate_command(SCSIDiskReq *r, uint8_t *outbuf",
      "uint8_t *outbuf",
      "outbuf = (uint8_t *)r->iov.iov_base",
      "rc = scsi_disk_emulate_command(r, outbuf",
      "SCSIDiskReq *r",
      "r = DO_UPCAST(SCSIDiskReq, req, req",
      "r->iov.iov_base = qemu_blockalign(s->bs, SCSI_DMA_BUF_SIZE"
    ],
    "cause": [
      "Memory Management",
      "Configuration or Permissions Errors"
    ],
    "effect": "DoS ",
    "score": 4.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "permissions",
      "buffer overflow"
    ]
  },
  {
    "index": 501,
    "id": "CVE-2015-6031",
    "commit_id": "79cca974a4c2ab1199786732a67ff6d898051b78",
    "added_lines": [
      "if(l >= MINIUPNPC_URL_MAXSIZE",
      "l = MINIUPNPC_URL_MAXSIZE-1",
      "memcpy(datas->cureltname, name, l"
    ],
    "removed_lines": [
      "memcpy( datas->cureltname, name, l"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 502,
    "id": "CVE-2015-5707",
    "commit_id": "451a2886b6bf90e2fb378f7c46c655450fb96e81",
    "added_lines": [
      "if (unlikely(iov_count > MAX_UIOVEC",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 510,
    "id": "CVE-2015-5283",
    "commit_id": "8e2d61e0aed2b7c4ecb35844fe07e0b2b762dee4",
    "added_lines": [
      "static int __net_init sctp_defaults_init(struct net *net",
      "static void __net_exit sctp_defaults_exit(struct net *net",
      "static struct pernet_operations sctp_defaults_ops =",
      ".init = sctp_defaults_init,",
      ".exit = sctp_defaults_exit,",
      "static int __net_init sctp_ctrlsock_init(struct net *net",
      "int status",
      "status = sctp_ctl_sock_init(net",
      "if (status",
      "pr_err(\"Failed to initialize the SCTP control sock\\n\"",
      "return status",
      "static void __net_init sctp_ctrlsock_exit(struct net *net",
      "inet_ctl_sock_destroy(net->sctp.ctl_sock",
      "static struct pernet_operations sctp_ctrlsock_ops =",
      ".init = sctp_ctrlsock_init,",
      ".exit = sctp_ctrlsock_exit,",
      "status = register_pernet_subsys(&sctp_defaults_ops",
      "if (status",
      "goto err_register_defaults",
      "status = sctp_v4_protosw_init",
      "status = register_pernet_subsys(&sctp_ctrlsock_ops",
      "goto err_register_ctrlsock",
      "unregister_pernet_subsys(&sctp_ctrlsock_ops",
      "err_register_ctrlsock:",
      "unregister_pernet_subsys(&sctp_defaults_ops",
      "err_register_defaults:",
      "unregister_pernet_subsys(&sctp_ctrlsock_ops",
      "unregister_pernet_subsys(&sctp_defaults_ops"
    ],
    "removed_lines": [
      "static int __net_init sctp_net_init(struct net *net",
      "if ((status = sctp_ctl_sock_init(net)))",
      "pr_err(\"Failed to initialize the SCTP control sock\\n\"",
      "goto err_ctl_sock_init",
      "err_ctl_sock_init:",
      "sctp_dbg_objcnt_exit(net",
      "sctp_proc_exit(net",
      "static void __net_exit sctp_net_exit(struct net *net",
      "inet_ctl_sock_destroy(net->sctp.ctl_sock",
      "static struct pernet_operations sctp_net_ops =",
      ".init = sctp_net_init,",
      ".exit = sctp_net_exit,",
      "status = sctp_v4_protosw_init",
      "status = register_pernet_subsys(&sctp_net_ops",
      "goto err_register_pernet_subsys",
      "unregister_pernet_subsys(&sctp_net_ops",
      "err_register_pernet_subsys:",
      "unregister_pernet_subsys(&sctp_net_ops"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 4.7,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "has an incorrect sequence of protocol-initialization steps"
    ]
  },
  {
    "index": 514,
    "id": "CVE-2015-5156",
    "commit_id": "48900cb6af4282fa0fb6ff4d72a81aa3dadb5c39",
    "added_lines": [
      "dev->hw_features |= NETIF_F_HW_CSUM | NETIF_F_SG",
      "dev->features |= NETIF_F_HW_CSUM | NETIF_F_SG"
    ],
    "removed_lines": [
      "dev->hw_features |= NETIF_F_HW_CSUM|NETIF_F_SG|NETIF_F_FRAGLIST",
      "dev->features |= NETIF_F_HW_CSUM|NETIF_F_SG|NETIF_F_FRAGLIST"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 6.1,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 517,
    "id": "CVE-2015-4590",
    "commit_id": "5e7b9ec688d79e7b16ec7064e1d37e8481a31e72",
    "added_lines": [
      "void whenInputIs(const char *json, size_t len)",
      "memcpy(_jsonString, json, len",
      "_result = QuotedString::extractFrom(_jsonString, &_trailing",
      "TEST_F(QuotedString_ExtractFrom_Tests, UnterminatedEscapeSequence)",
      "whenInputIs(\"\\\"\\\\\\0\\\"\", 4",
      "resultMustBe(0"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_COPY"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "backslash",
      "buffer overflow"
    ]
  },
  {
    "index": 520,
    "id": "CVE-2015-4167",
    "commit_id": "23b133bdc452aa441fcb9b82cbf6dd05cfd342d0",
    "added_lines": [
      "if (iinfo->i_lenEAttr > bs || iinfo->i_lenAlloc > bs",
      "goto out",
      "if (udf_file_entry_alloc_offset(inode) + iinfo->i_lenAlloc > bs",
      "goto out"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.7,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 521,
    "id": "CVE-2015-4036",
    "commit_id": "59c816c1f24df0204e01851431d3bab3eb76719c",
    "added_lines": [
      "evt->event.lun[1] = tpg->tport_tpgt",
      "u16 tpgt",
      "if (kstrtou16(name + 5, 10, &tpgt) || tpgt >= VHOST_SCSI_MAX_TARGET"
    ],
    "removed_lines": [
      "evt->event.lun[1] = tpg->tport_tpgt & 0xFF",
      "unsigned long tpgt",
      "if (kstrtoul(name + 5, 10, &tpgt) || tpgt > UINT_MAX"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "ioctl call",
      "array index error"
    ]
  },
  {
    "index": 523,
    "id": "CVE-2015-4002",
    "commit_id": "d114b9fe78c8d6fc6e70808c2092aa307c36dc8e",
    "added_lines": [
      "u16 offs, total_size",
      "u8 data_len",
      "if (elt->length < sizeof(struct oz_get_desc_rsp) - 1",
      "break",
      "data_len = elt->length -",
      "(sizeof(struct oz_get_desc_rsp) - 1",
      "offs = le16_to_cpu(get_unaligned(&body->offset",
      "total_size ="
    ],
    "removed_lines": [
      "int data_len = elt->length -",
      "sizeof(struct oz_get_desc_rsp) + 1",
      "u16 offs = le16_to_cpu(get_unaligned(&body->offset",
      "u16 total_size ="
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 9.0,
    "safe_features": [
      "INDEX_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "does not ensure that certain length values are sufficiently large,"
    ]
  },
  {
    "index": 525,
    "id": "CVE-2015-3905",
    "commit_id": "6b9d1aafcb61a3663c883663eb19ccdbfcde8d33",
    "added_lines": [
      "for (s += 9; isspace((unsigned char) *s); s++",
      "while (*t && !isspace((unsigned char) *t)) t++",
      "if (isupper((unsigned char) *s) || isdigit((unsigned char) *s))",
      "} else if (islower((unsigned char) *s))"
    ],
    "removed_lines": [
      "for (s += 9; isspace(*s); s++)",
      "while (*t && !isspace(*t)) t++",
      "if (isupper(*s) || isdigit(*s))",
      "} else if (islower(*s))"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 526,
    "id": "CVE-2015-3885",
    "commit_id": "983bda1f0fa5fa86884381208274198a620f006e",
    "added_lines": [
      "int c, tag",
      "ushort len"
    ],
    "removed_lines": [
      "int c, tag, len"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 530,
    "id": "CVE-2015-3331",
    "commit_id": "ccfe8c3f7e52ae83155cb038753f4c75b774ca8a",
    "added_lines": [
      "assoc = (src + req->cryptlen",
      "scatterwalk_map_and_copy(dst, req->dst, 0, tempCipherLen, 1"
    ],
    "removed_lines": [
      "assoc = (src + req->cryptlen + auth_tag_len",
      "scatterwalk_map_and_copy(dst, req->dst, 0, req->cryptlen, 1"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 9.3,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 532,
    "id": "CVE-2015-3214",
    "commit_id": "ee73f656a604d5aa9df86a97102e4e462dd79924",
    "added_lines": [
      "if (addr == 3",
      "return 0"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 6.9,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "does not distinguish between read lengths and write lengths"
    ]
  },
  {
    "index": 538,
    "id": "CVE-2015-2831",
    "commit_id": "bd20bb02e75e2c0483832b52f2577253febfb690",
    "added_lines": [
      "int temp_size = 500",
      "char *temp = malloc(temp_size",
      "if (i >= temp_size)",
      "temp_size *= 2",
      "temp = realloc(temp, temp_size"
    ],
    "removed_lines": [
      "char temp[500]"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 7.2,
    "safe_features": [
      "INDEX_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_ALLOC",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 541,
    "id": "CVE-2015-2698",
    "commit_id": "3db8dfec1ef50ddd78d6ba9503185995876a39fd",
    "added_lines": [
      "iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)*context_handle",
      "OM_uint32 KRB5_CALLCONV",
      "iakerb_gss_import_sec_context(OM_uint32 *minor_status,",
      "gss_buffer_t interprocess_token,",
      "gss_ctx_id_t *context_handle",
      "OM_uint32 maj, tmpmin",
      "krb5_error_code code",
      "gss_ctx_id_t gssc",
      "krb5_gss_ctx_id_t kctx",
      "iakerb_ctx_id_t ctx",
      "maj = krb5_gss_import_sec_context(minor_status, interprocess_token, &gssc",
      "if (maj != GSS_S_COMPLETE",
      "return maj",
      "kctx = (krb5_gss_ctx_id_t)gssc",
      "if (!kctx->established)",
      "krb5_gss_delete_sec_context(&tmpmin, &gssc, GSS_C_NO_BUFFER",
      "return GSS_S_FAILURE",
      "code = iakerb_alloc_context(&ctx, kctx->initiate",
      "if (code != 0)",
      "krb5_gss_delete_sec_context(&tmpmin, &gssc, GSS_C_NO_BUFFER",
      "return GSS_S_FAILURE",
      "ctx->gssc = gssc",
      "ctx->established = 1",
      "return GSS_S_COMPLETE"
    ],
    "removed_lines": [
      "iakerb_ctx_id_t ctx = (iakerb_ctx_id_t)context_handle"
    ],
    "cause": [
      "Uncategorized Cluster 10"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 8.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "improperly accesses a certain pointer"
    ]
  },
  {
    "index": 542,
    "id": "CVE-2015-2697",
    "commit_id": "f0c094a1b745d91ef2f9a4eae2149aac026a5789",
    "added_lines": [
      "if (!retval",
      "r = k5memdup0(realm, rlen, &retval"
    ],
    "removed_lines": [
      "if (!retval)",
      "r = strdup(realm",
      "if (!r) { retval = ENOMEM;"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "'0' character",
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 546,
    "id": "CVE-2015-2666",
    "commit_id": "f84598bd7c851f8b0bf8cd0d7c3be0d73c432ff4",
    "added_lines": [
      "while (leftover && mc_saved_count < ARRAY_SIZE(mc_saved_tmp))"
    ],
    "removed_lines": [
      "while (leftover)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": " +Priv",
    "score": 6.9,
    "safe_features": [
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow +Priv ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 557,
    "id": "CVE-2015-1789",
    "commit_id": "f48b83b4fb7d6689584cf25f61ca63a4891f5b11",
    "added_lines": [
      "int i, j, remaining",
      "remaining = ctm->length",
      "int min_length = sizeof(\"YYMMDDHHMMZ\") - 1",
      "int max_length = sizeof(\"YYMMDDHHMMSS+hhmm\") - 1",
      "if (remaining < min_length || remaining > max_length",
      "remaining -= 10",
      "int min_length = sizeof(\"YYYYMMDDHHMMZ\") - 1",
      "int max_length = sizeof(\"YYYYMMDDHHMMSS.fff+hhmm\") - 1",
      "if (remaining < min_length || remaining > max_length",
      "remaining -= 12",
      "if (remaining < 2",
      "return 0",
      "remaining -= 2",
      "if (remaining && *str == '.')",
      "remaining--",
      "for (i = 0; i < 3 && remaining; i++, str++, remaining--)",
      "if (*str < '0' || *str > '9'",
      "break",
      "if (!remaining",
      "return 0",
      "if (*str == 'Z')",
      "if (remaining != 1",
      "return 0",
      "} else",
      "if (remaining != 5",
      "return 0",
      "if (str[1] < '0' || str[1] > '9' || str[2] < '0' || str[2] > '9' ||",
      "str[3] < '0' || str[3] > '9' || str[4] < '0' || str[4] > '9'",
      "return 0"
    ],
    "removed_lines": [
      "int i, j",
      "i = ctm->length",
      "if ((i < 11) || (i > 17",
      "if (i < 13",
      "if (*str == '.')",
      "while ((*str >= '0') && (*str <= '9'",
      "str++",
      "if (*str == 'Z'",
      "else"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "RETURN",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 566,
    "id": "CVE-2015-1333",
    "commit_id": "ca4da5dd1f99fe9c59f1709fb43e818b18ad20e0",
    "added_lines": [
      "if (edit)",
      "if (!edit->dead_leaf)",
      "key_payload_reserve(keyring,",
      "keyring->datalen - KEYQUOTA_LINK_BYTES"
    ],
    "removed_lines": [
      "if (edit && !edit->dead_leaf)",
      "key_payload_reserve(keyring,",
      "keyring->datalen - KEYQUOTA_LINK_BYTES"
    ],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "memory leak"
    ]
  },
  {
    "index": 578,
    "id": "CVE-2015-0206",
    "commit_id": "103b171d8fc282ef435f8de9afbf7782e312961f",
    "added_lines": [
      "if (rdata->rbuf.buf != NULL",
      "OPENSSL_free(rdata->rbuf.buf",
      "return(-1",
      "if (rdata->rbuf.buf != NULL",
      "OPENSSL_free(rdata->rbuf.buf",
      "return(-1",
      "if(dtls1_buffer_record(s, &(s->d1->processed_rcds),",
      "s->s3->rrec.seq_num)<0",
      "return -1",
      "if(dtls1_process_buffered_records(s)<0",
      "return -1",
      "if(dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num)<0",
      "return -1",
      "dtls1_record_bitmap_update(s, bitmap",
      "dtls1_record_bitmap_update(s, bitmap",
      "if(dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num)<0",
      "SSLerr(SSL_F_DTLS1_READ_BYTES, ERR_R_INTERNAL_ERROR",
      "return -1"
    ],
    "removed_lines": [
      "return(0",
      "return(0",
      "dtls1_buffer_record(s, &(s->d1->processed_rcds),",
      "s->s3->rrec.seq_num",
      "dtls1_record_bitmap_update(s, &(s->d1->bitmap",
      "dtls1_process_buffered_records(s",
      "dtls1_buffer_record(s, &(s->d1->unprocessed_rcds), rr->seq_num",
      "dtls1_buffer_record(s, &(s->d1->buffered_app_data), rr->seq_num"
    ],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "memory leak"
    ]
  },
  {
    "index": 585,
    "id": "CVE-2014-9728",
    "commit_id": "e237ec37ec154564f8690c5bd1795339955eeef9",
    "added_lines": [
      "elen += sizeof(struct pathComponent",
      "if (pc->lengthComponentIdent > 0)",
      "elen += pc->lengthComponentIdent",
      "elen += pc->lengthComponentIdent",
      "if (elen > fromlen",
      "return -EIO"
    ],
    "removed_lines": [
      "if (pc->lengthComponentIdent > 0",
      "elen += sizeof(struct pathComponent) + pc->lengthComponentIdent"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 592,
    "id": "CVE-2014-9683",
    "commit_id": "942080643bce061c3dd9d5718d3b745dcb39a8bc",
    "added_lines": [],
    "removed_lines": [
      "dst[dst_byte_offset] = 0"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  +Priv",
    "score": 3.6,
    "safe_features": [],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "off-by-one",
      "buffer overflow",
      "off-by-one error"
    ]
  },
  {
    "index": 594,
    "id": "CVE-2014-9652",
    "commit_id": "59e63838913eee47f5c120a6c53d4565af638158",
    "added_lines": [
      "FILE_RCSID(\"@(#)$File: softmagic.c,v 1.196 2014/11/07 15:24:14 christos Exp $\"",
      "sz = sizeof(p->s) - sz;",
      "if (len >= sz)",
      "len = sz"
    ],
    "removed_lines": [
      "FILE_RCSID(\"@(#)$File: softmagic.c,v 1.195 2014/09/24 19:49:07 christos Exp $\"",
      "if (len >= sizeof(p->s))",
      "len = sizeof(p->s) - sz"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds memory"
    ]
  },
  {
    "index": 600,
    "id": "CVE-2014-9496",
    "commit_id": "dbe14f00030af5d3577f4cabbf9861db59e9c378",
    "added_lines": [
      "if (rsrc.map_offset + 28 > rsrc.rsrc_len",
      "{\tpsf_log_printf (psf, \"Bad map offset.\\n\")",
      "goto parse_rsrc_fork_cleanup",
      "}",
      "{\tif (rsrc.type_offset + k * 8 > rsrc.rsrc_len",
      "{\tpsf_log_printf (psf, \"Bad rsrc marker.\\n\")",
      "goto parse_rsrc_fork_cleanup",
      "}",
      "marker = read_rsrc_marker (&rsrc, rsrc.type_offset + k * 8)"
    ],
    "removed_lines": [
      "{\tmarker = read_rsrc_marker (&rsrc, rsrc.type_offset + k * 8)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 10.0,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 607,
    "id": "CVE-2014-8176",
    "commit_id": "470990fee0182566d439ef7e82d1abf18b7085d7",
    "added_lines": [
      "rdata = (DTLS1_RECORD_DATA *) item->data",
      "if (rdata->rbuf.buf",
      "OPENSSL_free(rdata->rbuf.buf",
      "OPENSSL_free(item->data"
    ],
    "removed_lines": [
      "frag = (hm_fragment *)item->data",
      "OPENSSL_free(frag->fragment",
      "OPENSSL_free(frag"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "frees data structures without considering that application data can arrive between a ChangeCipherSpec message and a Finished message"
    ]
  },
  {
    "index": 628,
    "id": "CVE-2016-9793",
    "commit_id": "b98b0bc8c431e3ceb4b26b0dfc8db509518fb290",
    "added_lines": [
      "sk->sk_sndbuf = max_t(int, val * 2, SOCK_MIN_SNDBUF",
      "sk->sk_rcvbuf = max_t(int, val * 2, SOCK_MIN_RCVBUF"
    ],
    "removed_lines": [
      "sk->sk_sndbuf = max_t(u32, val * 2, SOCK_MIN_SNDBUF",
      "sk->sk_rcvbuf = max_t(u32, val * 2, SOCK_MIN_RCVBUF"
    ],
    "cause": [
      "Parsing or Interpretation Errors",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "mishandles negative values of sk_sndbuf and sk_rcvbuf",
      "leveraging the CAP_NET_ADMIN capability"
    ]
  },
  {
    "index": 631,
    "id": "CVE-2016-9755",
    "commit_id": "9b57da0630c9fd36ed7a20fc0f98dc82cc0777fa",
    "added_lines": [
      "return err == 0 ? NF_ACCEPT : NF_DROP"
    ],
    "removed_lines": [
      "return NF_ACCEPT"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "RETURN"
    ],
    "unsafe_features": [
      "RETURN"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write",
      "integer overflow"
    ]
  },
  {
    "index": 637,
    "id": "CVE-2016-9540",
    "commit_id": "5ad9d8016fbb60109302d558f7edb2cb2a3bb8e3",
    "added_lines": [
      "for (col = 0; col < imagewidth && colb < imagew; col += tw)",
      "for (col = 0; col < imagewidth && colb < imagew; col += tw)"
    ],
    "removed_lines": [
      "for (col = 0; col < imagewidth; col += tw)",
      "for (col = 0; col < imagewidth; col += tw)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "heap-buffer-overflow",
      "out-of-bounds write"
    ]
  },
  {
    "index": 639,
    "id": "CVE-2016-9538",
    "commit_id": "43c0b81a818640429317c80fea1e66771e85024b#diff-c8b4b355f9b5c06d585b23138e1c185f",
    "added_lines": [
      "uint32 strip, nstrips   = TIFFNumberOfStrips(in",
      "int i, bytes_per_sample, bytes_per_pixel, shift_width, result = 1",
      "uint32 j",
      "uint16 bps, planar",
      "uint32 nstrips",
      "uint32 strips_per_sample"
    ],
    "removed_lines": [
      "uint16 strip, nstrips   = TIFFNumberOfStrips(in",
      "int i, j, bytes_per_sample, bytes_per_pixel, shift_width, result = 1",
      "uint16 bps, nstrips, planar, strips_per_sample"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 641,
    "id": "CVE-2016-9536",
    "commit_id": "83a4b92815ea04969d494416eaae3d4c6b338e4a#diff-5173a9b3b48146e4fd86d7b9b346115e",
    "added_lines": [
      "uint32   nstrips = 0, ntiles = 0",
      "uint16   planar = 0",
      "if( buffsize > 0xFFFFFFFFU - 3",
      "TIFFError(\"loadImage\", \"Unable to allocate/reallocate read buffer\"",
      "return (-1",
      "if( buffsize > 0xFFFFFFFFU - 3",
      "TIFFError(\"loadImage\", \"Unable to allocate/reallocate read buffer\"",
      "return (-1",
      "if( bytes_per_pixel > sizeof(swapbuff)",
      "TIFFError(\"reverseSamplesBytes\",\"bytes_per_pixel too large\"",
      "return (1"
    ],
    "removed_lines": [
      "uint16   nstrips = 0, ntiles = 0, planar = 0"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "heap-buffer-overflow",
      "out-of-bounds write"
    ]
  },
  {
    "index": 642,
    "id": "CVE-2016-9535",
    "commit_id": "3ca657a8793dd011bf869695d72ad31c779c3cc1",
    "added_lines": [
      "typedef int (*TIFFEncodeDecodeMethod)(TIFF* tif, uint8* buf, tmsize_t size",
      "TIFFEncodeDecodeMethod  encodepfunc;",
      "TIFFEncodeDecodeMethod  decodepfunc;"
    ],
    "removed_lines": [
      "TIFFPostMethod  encodepfunc;",
      "TIFFPostMethod  decodepfunc;"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap-buffer-overflow",
      "assertion failure",
      "buffer overflow"
    ]
  },
  {
    "index": 643,
    "id": "CVE-2016-9534",
    "commit_id": "83a4b92815ea04969d494416eaae3d4c6b338e4a#diff-5be5ce02d0dea67050d5b2a10102d1ba",
    "added_lines": [
      "uint32   nstrips = 0, ntiles = 0",
      "uint16   planar = 0",
      "if( buffsize > 0xFFFFFFFFU - 3",
      "TIFFError(\"loadImage\", \"Unable to allocate/reallocate read buffer\"",
      "return (-1",
      "if( buffsize > 0xFFFFFFFFU - 3",
      "TIFFError(\"loadImage\", \"Unable to allocate/reallocate read buffer\"",
      "return (-1",
      "if( bytes_per_pixel > sizeof(swapbuff)",
      "TIFFError(\"reverseSamplesBytes\",\"bytes_per_pixel too large\"",
      "return (1"
    ],
    "removed_lines": [
      "uint16   nstrips = 0, ntiles = 0, planar = 0"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap-buffer-overflow"
    ]
  },
  {
    "index": 644,
    "id": "CVE-2016-9533",
    "commit_id": "83a4b92815ea04969d494416eaae3d4c6b338e4a#diff-bdc795f6afeb9558c1012b3cfae729ef",
    "added_lines": [
      "uint32   nstrips = 0, ntiles = 0",
      "uint16   planar = 0",
      "if( buffsize > 0xFFFFFFFFU - 3",
      "TIFFError(\"loadImage\", \"Unable to allocate/reallocate read buffer\"",
      "return (-1",
      "if( buffsize > 0xFFFFFFFFU - 3",
      "TIFFError(\"loadImage\", \"Unable to allocate/reallocate read buffer\"",
      "return (-1",
      "if( bytes_per_pixel > sizeof(swapbuff)",
      "TIFFError(\"reverseSamplesBytes\",\"bytes_per_pixel too large\"",
      "return (1"
    ],
    "removed_lines": [
      "uint16   nstrips = 0, ntiles = 0, planar = 0"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "heap-buffer-overflow",
      "out-of-bounds write"
    ]
  },
  {
    "index": 645,
    "id": "CVE-2016-9442",
    "commit_id": "d43527cfa0dbb3ccefec4a6f7b32c1434739aa29",
    "added_lines": [
      "newlen = x->area_size * 6 / 5",
      "if (newlen == x->area_size"
    ],
    "removed_lines": [
      "newlen = x->length * 6 / 5",
      "if (newlen == x->length"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": " Mem. Corr.",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 650,
    "id": "CVE-2016-9084",
    "commit_id": "05692d7005a364add85c6e25a6c4447ce08f913a",
    "added_lines": [
      "vdev->ctx = kcalloc(nvec, sizeof(struct vfio_pci_irq_ctx), GFP_KERNEL"
    ],
    "removed_lines": [
      "vdev->ctx = kzalloc(nvec * sizeof(struct vfio_pci_irq_ctx), GFP_KERNEL"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 654,
    "id": "CVE-2016-8658",
    "commit_id": "ded89912156b1a47d940a0c954c43afbabd0c42c",
    "added_lines": [
      "if (!ssid_ie || ssid_ie->len > IEEE80211_MAX_SSID_LEN"
    ],
    "removed_lines": [
      "if (!ssid_ie"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.6,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 659,
    "id": "CVE-2016-8633",
    "commit_id": "667121ace9dbafb368618dbabcf07901c962ddac",
    "added_lines": [
      "if (len <= RFC2374_UNFRAG_HDR_SIZE",
      "return 0",
      "if (len <= RFC2374_FRAG_HDR_SIZE",
      "return 0",
      "if (fg_off + len > dg_size",
      "return 0",
      "static int gasp_source_id(__be32 *p",
      "return be32_to_cpu(p[0]) >> 16",
      "static u32 gasp_specifier_id(__be32 *p",
      "return (be32_to_cpu(p[0]) & 0xffff) << 8 |",
      "(be32_to_cpu(p[1]) & 0xff000000) >> 24",
      "static u32 gasp_version(__be32 *p",
      "return be32_to_cpu(p[1]) & 0xffffff",
      "if (length > IEEE1394_GASP_HDR_SIZE &&",
      "gasp_specifier_id(buf_ptr) == IANA_SPECIFIER_ID &&",
      "(gasp_version(buf_ptr) == RFC2734_SW_VERSION",
      "|| gasp_version(buf_ptr) == RFC3146_SW_VERSION",
      "fwnet_incoming_packet(dev, buf_ptr + 2,",
      "length - IEEE1394_GASP_HDR_SIZE,",
      "gasp_source_id(buf_ptr),"
    ],
    "removed_lines": [
      "u16 source_node_id",
      "u32 specifier_id",
      "u32 ver",
      "specifier_id =    (be32_to_cpu(buf_ptr[0]) & 0xffff) << 8",
      "| (be32_to_cpu(buf_ptr[1]) & 0xff000000) >> 24",
      "ver = be32_to_cpu(buf_ptr[1]) & 0xffffff",
      "source_node_id = be32_to_cpu(buf_ptr[0]) >> 16",
      "if (specifier_id == IANA_SPECIFIER_ID &&",
      "(ver == RFC2734_SW_VERSION",
      "|| ver == RFC3146_SW_VERSION",
      "))",
      "buf_ptr += 2",
      "length -= IEEE1394_GASP_HDR_SIZE",
      "fwnet_incoming_packet(dev, buf_ptr, length, source_node_id,"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "ExecCode ",
    "score": 6.2,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "RETURN",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "RETURN",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 661,
    "id": "CVE-2016-8339",
    "commit_id": "6d9f8e2462fc2c426d48c941edeb78e5df7d2977",
    "added_lines": [
      "if (class == -1 || class == CLIENT_TYPE_MASTER)",
      "err = \"Unrecognized client limit class: the user specified \"",
      "\"an invalid one, or 'master' which has no buffer limits.\"",
      "int class = getClientTypeByName(v[j]",
      "if (class == -1 || class == CLIENT_TYPE_MASTER)"
    ],
    "removed_lines": [
      "if (class == -1)",
      "err = \"Unrecognized client limit class\"",
      "if (getClientTypeByName(v[j]) == -1)"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "code execution",
      "out of bounds write"
    ]
  },
  {
    "index": 670,
    "id": "CVE-2016-7568",
    "commit_id": "40bec0f38f50e8510f5bb71a82f516d46facde03",
    "added_lines": [
      "if (overflow2(gdImageSX(im), 4))",
      "return",
      "if (overflow2(gdImageSX(im) * 4, gdImageSY(im)))",
      "return"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 671,
    "id": "CVE-2016-7425",
    "commit_id": "7bc2b55a5c030685b399bb65b6baa9ccc3d1f167",
    "added_lines": [
      "uint32_t user_len",
      "int32_t cnt2end",
      "if (user_len > ARCMSR_API_DATA_BUFLEN)",
      "retvalue = ARCMSR_MESSAGE_FAIL",
      "kfree(ver_addr",
      "goto message_out"
    ],
    "removed_lines": [
      "int32_t user_len, cnt2end"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  +Priv",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 673,
    "id": "CVE-2016-7418",
    "commit_id": "c4cca4c20e75359c9a13a1f9a36cb7b4e9601d29?w=1",
    "added_lines": [
      "if (!strcmp(atts[i], EL_CHAR_CODE) && atts[i+1] && atts[i+1][0])",
      "snprintf(tmp_buf, sizeof(tmp_buf), \"%c\", (char)strtol(atts[i+1], NULL, 16",
      "if (!strcmp(atts[i], EL_VALUE) && atts[i+1] && atts[i+1][0])",
      "php_wddx_process_data(user_data, atts[i+1], strlen(atts[i+1]",
      "if (!strcmp(atts[i], EL_NAME) && atts[i+1] && atts[i+1][0])",
      "stack->varname = estrdup(atts[i+1]",
      "if (!strcmp(atts[i], \"fieldNames\") && atts[i+1] && atts[i+1][0])",
      "i++",
      "if (!strcmp(atts[i], EL_NAME) && atts[i+1] && atts[i+1][0])",
      "zend_hash_find(Z_ARRVAL_P(recordset->data), (char*)atts[i+1], strlen(atts[i+1])+1, (void**)&field) == SUCCESS)"
    ],
    "removed_lines": [
      "if (!strcmp(atts[i], EL_CHAR_CODE) && atts[++i] && atts[i][0])",
      "snprintf(tmp_buf, sizeof(tmp_buf), \"%c\", (char)strtol(atts[i], NULL, 16",
      "if (!strcmp(atts[i], EL_VALUE) && atts[++i] && atts[i][0])",
      "php_wddx_process_data(user_data, atts[i], strlen(atts[i]",
      "if (!strcmp(atts[i], EL_NAME) && atts[++i] && atts[i][0])",
      "stack->varname = estrdup(atts[i]",
      "if (!strcmp(atts[i], \"fieldNames\") && atts[++i] && atts[i][0])",
      "if (!strcmp(atts[i], EL_NAME) && atts[++i] && atts[i][0])",
      "zend_hash_find(Z_ARRVAL_P(recordset->data), (char*)atts[i], strlen(atts[i])+1, (void**)&field) == SUCCESS)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 675,
    "id": "CVE-2016-7416",
    "commit_id": "6d55ba265637d6adf0ba7e9c9ef11187d1ec2f5b?w=1",
    "added_lines": [
      "INTL_CHECK_LOCALE_LEN(slocale_len"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly restrict the locale length provided to the Locale class in the ICU library"
    ]
  },
  {
    "index": 676,
    "id": "CVE-2016-7414",
    "commit_id": "0bfb970f43acd1e81d11be1154805f86655f15d5?w=1",
    "added_lines": [
      "if (read != entry.uncompressed_filesize || read <= 8)"
    ],
    "removed_lines": [
      "if (read != entry.uncompressed_filesize)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds memory"
    ]
  },
  {
    "index": 678,
    "id": "CVE-2016-7412",
    "commit_id": "28f80baf3c53e267c9ce46a2a0fadbb981585132?w=1",
    "added_lines": [
      "const zend_uchar * const packet_end = (zend_uchar*) row_buffer->ptr + data_size",
      "const unsigned long len = php_mysqlnd_net_field_length(&p",
      "if (len != MYSQLND_NULL_LENGTH && ((p + len) > packet_end))",
      "php_error_docref(NULL, E_WARNING, \"Malformed server packet. Field length pointing \"MYSQLND_SZ_T_SPEC",
      "\" bytes after end of packet\", (p + len) - packet_end - 1",
      "DBG_RETURN(FAIL"
    ],
    "removed_lines": [
      "unsigned long len = php_mysqlnd_net_field_length(&p"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 679,
    "id": "CVE-2016-7411",
    "commit_id": "6a7cc8ff85827fa9ac715b3a83c2d9147f33cd43?w=1",
    "added_lines": [
      "zend_object_store_ctor_failed(*rval TSRMLS_CC"
    ],
    "removed_lines": [],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "mishandles object-deserialization failures"
    ]
  },
  {
    "index": 681,
    "id": "CVE-2016-7163",
    "commit_id": "c16bc057ba3f125051c9966cf1f5b68a05681de4",
    "added_lines": [
      "l_current_pi->include = 00",
      "if (l_step_l <= (SIZE_MAX / (l_tcp->numlayers + 1U",
      "l_current_pi->include = (OPJ_INT16*) opj_calloc((l_tcp->numlayers +1) * l_step_l, sizeof(OPJ_INT16"
    ],
    "removed_lines": [
      "l_current_pi->include = (OPJ_INT16*) opj_calloc((l_tcp->numlayers +1) * l_step_l, sizeof(OPJ_INT16"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "integer overflow"
    ]
  },
  {
    "index": 685,
    "id": "CVE-2016-7134",
    "commit_id": "72dbb7f416160f490c4e9987040989a10ad431c7?w=1",
    "added_lines": [
      "size_t     str_len = 0",
      "if (ZEND_SIZE_T_INT_OVFL(str_len))",
      "RETURN_FALSE",
      "if (ZEND_SIZE_T_INT_OVFL(str_len))"
    ],
    "removed_lines": [
      "size_t        str_len = 0",
      "if (str_len > INT_MAX)"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 686,
    "id": "CVE-2016-7133",
    "commit_id": "c2a13ced4272f2e65d2773e2ea6ca11c1ce4a911?w=1",
    "added_lines": [
      "int old_bin_num = ZEND_MM_SRUN_BIN_NUM(info",
      "if (size <= ZEND_MM_MAX_SMALL_SIZE)",
      "int bin_num = ZEND_MM_SMALL_SIZE_TO_BIN(size",
      "if (old_bin_num == bin_num)",
      "dbg = zend_mm_get_debug_info(heap, ptr",
      "dbg->size = real_size",
      "dbg->filename = __zend_filename",
      "dbg->orig_filename = __zend_orig_filename",
      "dbg->lineno = __zend_lineno",
      "dbg->orig_lineno = __zend_orig_lineno",
      "return ptr"
    ],
    "removed_lines": [
      "int old_bin_num, bin_num",
      "old_bin_num = ZEND_MM_SRUN_BIN_NUM(info",
      "bin_num = ZEND_MM_SMALL_SIZE_TO_BIN(size",
      "if (old_bin_num == bin_num)",
      "dbg = zend_mm_get_debug_info(heap, ptr",
      "dbg->size = real_size",
      "dbg->filename = __zend_filename",
      "dbg->orig_filename = __zend_orig_filename",
      "dbg->lineno = __zend_lineno",
      "dbg->orig_lineno = __zend_orig_lineno",
      "return ptr"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 696,
    "id": "CVE-2016-7115",
    "commit_id": "b69d11727d4f0f8cf719c79e3fb700f55ca03e9a",
    "added_lines": [
      "perform an Integer-Overflow safe check */",
      "if (act_size > MT_PACKET_LEN - packet->size)",
      "if (length > MT_PACKET_LEN - packet->size)",
      "if (data_len > MT_PACKET_LEN - 4 - packet->size)"
    ],
    "removed_lines": [
      "if (packet->size + act_size > MT_PACKET_LEN)",
      "if (packet->size + length > MT_PACKET_LEN)",
      "if (packet->size + 4 + data_len > MT_PACKET_LEN)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 702,
    "id": "CVE-2016-6520",
    "commit_id": "76401e172ea3a55182be2b8e2aca4d07270f6da6",
    "added_lines": [
      "if (SyncImagePixelCache(image,exception) == MagickFalse",
      "return(MagickFalse",
      "if (SyncImagePixelCache(image,exception) == MagickFalse",
      "return(MagickFalse"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.4,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 703,
    "id": "CVE-2016-6516",
    "commit_id": "10eec60ce79187686e052092e5383c99b4420a20",
    "added_lines": [
      "same->dest_count = count"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Race Condition or Concurrency",
      "Uncategorized Cluster 7"
    ],
    "effect": "DoS  +Priv",
    "score": 4.4,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "*double fetch* vulnerability",
      "buffer overflow",
      "race condition"
    ]
  },
  {
    "index": 706,
    "id": "CVE-2016-6491",
    "commit_id": "dd84447b63a71fa8c3f47071b09454efc667767b",
    "added_lines": [
      "if ((count < 0) || ((size_t) count > length",
      "length=0",
      "continue"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds read",
      "memory leak"
    ]
  },
  {
    "index": 707,
    "id": "CVE-2016-6354",
    "commit_id": "a5cbe929ac3255d371e698f62dc256afe7006466",
    "added_lines": [
      "int num_to_read ="
    ],
    "removed_lines": [
      "yy_size_t num_to_read ="
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 709,
    "id": "CVE-2016-6254",
    "commit_id": "b589096f907052b3a4da2b9ccc9b0e2e888dfc18",
    "added_lines": [
      "buffer_size -= (size_t) pkg_length",
      "buffer_size -= (size_t) pkg_length",
      "buffer_size -= (size_t) pkg_length"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.4,
    "safe_features": [
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 710,
    "id": "CVE-2016-6250",
    "commit_id": "3014e198",
    "added_lines": [
      "size_t ffmax, parent_len",
      "r = idr_start(a, idr, isoent->children.cnt, (int)ffmax, 6, 2, &rb_ops",
      "if ((l = np->file->basename_utf16.length) > ffmax",
      "if (np->file->basename_utf16.length > ffmax)",
      "if (parent_len > 240",
      "|| np->mb_len > 240",
      "|| parent_len + np->mb_len > 240)",
      "if (l == ffmax",
      "else if (l == ffmax-2",
      "else if (l == ffmax-4"
    ],
    "removed_lines": [
      "int ffmax, parent_len",
      "r = idr_start(a, idr, isoent->children.cnt, ffmax, 6, 2, &rb_ops",
      "if ((int)(l = np->file->basename_utf16.length) > ffmax",
      "if ((int)np->file->basename_utf16.length > ffmax)",
      "if (parent_len + np->mb_len > 240)",
      "if ((int)l == ffmax",
      "else if ((int)l == ffmax-2",
      "else if ((int)l == ffmax-4"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "ARITH_OP",
      "CONDITIONAL",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "ARITH_OP",
      "CONDITIONAL",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 715,
    "id": "CVE-2016-6187",
    "commit_id": "30a46a4647fd1df9cf52e43bf467f0d9265096ca",
    "added_lines": [
      "char *command, *largs = NULL, *args = value",
      "if (args[size - 1] != '\\0')",
      "largs = args = kmalloc(size + 1, GFP_KERNEL",
      "if (!args",
      "return -ENOMEM",
      "memcpy(args, value, size",
      "args[size] = '\\0'",
      "error = -EINVAL",
      "goto out",
      "goto out",
      "goto fail",
      "out:",
      "kfree(largs",
      "aad.error = error = -EINVAL",
      "goto out"
    ],
    "removed_lines": [
      "char *command, *args = value",
      "if (args[size - 1] != '\\0')",
      "if (size == PAGE_SIZE",
      "return -EINVAL",
      "args[size] = '\\0'",
      "args = value",
      "return -EINVAL",
      "return -EINVAL",
      "return -EINVAL",
      "aad.error = -EINVAL",
      "return -EINVAL"
    ],
    "cause": [
      "Improper Input Validation"
    ],
    "effect": " +Priv",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "MEM_COPY",
      "INDEX_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "RETURN",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "vuln": "Overflow +Priv ",
    "summary": [
      "does not validate the buffer size"
    ]
  },
  {
    "index": 720,
    "id": "CVE-2016-5844",
    "commit_id": "3ad08e01b4d253c66ae56414886089684155af22",
    "added_lines": [
      "skipsize = LOGICAL_BLOCK_SIZE * (int64_t)vd->location",
      "skipsize = LOGICAL_BLOCK_SIZE * (int64_t)vd->location"
    ],
    "removed_lines": [
      "skipsize = LOGICAL_BLOCK_SIZE * vd->location",
      "skipsize = LOGICAL_BLOCK_SIZE * vd->location"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 722,
    "id": "CVE-2016-5829",
    "commit_id": "93a2001bdfd5376c3dc2158653034c20392d15c5",
    "added_lines": [
      "if ((cmd == HIDIOCGUSAGES || cmd == HIDIOCSUSAGES) &&",
      "(uref_multi->num_values > HID_MAX_MULTI_USAGES ||",
      "uref->usage_index + uref_multi->num_values > field->report_count",
      "goto inval"
    ],
    "removed_lines": [
      "else if ((cmd == HIDIOCGUSAGES || cmd == HIDIOCSUSAGES) &&",
      "(uref_multi->num_values > HID_MAX_MULTI_USAGES ||",
      "uref->usage_index + uref_multi->num_values > field->report_count",
      "goto inval"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "ioctl call",
      "buffer overflow"
    ]
  },
  {
    "index": 726,
    "id": "CVE-2016-5770",
    "commit_id": "7245bff300d3fa8bacbef7897ff080a6f1c23eba?w=1",
    "added_lines": [
      "- allocating memory",
      "called from",
      "Load the 'other' object",
      "if (ht && zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|sbr\",",
      "&intern->u.file.open_mode, &intern->u.file.open_mode_len,",
      "case SPL_FS_DIR:",
      "When the constructor gets called the object is already created",
      "} else",
      "ZEND_BEGIN_ARG_INFO(arginfo_info___construct, 0",
      "ZEND_BEGIN_ARG_INFO(arginfo_dir___construct, 0",
      "ZEND_BEGIN_ARG_INFO(arginfo_dir_it_seek, 0",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_r_dir___construct, 0, 0, 1",
      "if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|sbr!\",",
      "&intern->u.file.open_mode, &intern->u.file.open_mode_len,",
      "&use_include_path, &intern->u.file.zcontext) == FAILURE)",
      "spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC",
      "if (length > INT_MAX)",
      "php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Length parameter must be no more than %d\", INT_MAX",
      "RETURN_FALSE",
      "RETURN_FALSE",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_flock, 0, 0, 1",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_fseek, 0, 0, 1",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_fgetss, 0, 0, 0",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_fscanf, 1, 0, 1",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_fwrite, 0, 0, 1",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_ftruncate, 0, 0, 1",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_seek, 0, 0, 1"
    ],
    "removed_lines": [
      "- allocating memory",
      "called from",
      "Load the 'other' object",
      "if (ht && zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"|sbr\",",
      "&intern->u.file.open_mode, &intern->u.file.open_mode_len,",
      "case SPL_FS_DIR:",
      "When the constructor gets called the object is already created",
      "} else",
      "ZEND_BEGIN_ARG_INFO(arginfo_info___construct, 0",
      "ZEND_BEGIN_ARG_INFO(arginfo_dir___construct, 0",
      "ZEND_BEGIN_ARG_INFO(arginfo_dir_it_seek, 0",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_r_dir___construct, 0, 0, 1",
      "if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"p|sbr!\",",
      "&intern->u.file.open_mode, &intern->u.file.open_mode_len,",
      "&use_include_path, &intern->u.file.zcontext) == FAILURE)",
      "spl_filesystem_object *intern = (spl_filesystem_object*)zend_object_store_get_object(getThis() TSRMLS_CC",
      "RETURN_FALSE",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_flock, 0, 0, 1",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_fseek, 0, 0, 1",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_fgetss, 0, 0, 0",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_fscanf, 1, 0, 1",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_fwrite, 0, 0, 1",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_ftruncate, 0, 0, 1",
      "ZEND_BEGIN_ARG_INFO_EX(arginfo_file_object_seek, 0, 0, 1"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 727,
    "id": "CVE-2016-5769",
    "commit_id": "6c5211a0cef0cc2854eaa387e0eb036e012904d0?w=1",
    "added_lines": [
      "typedef struct _php_mcrypt",
      "\"mcrypt\",",
      "ZEND_FETCH_RESOURCE (pm, php_mcrypt *, &mcryptind, -1, \"MCrypt\", le_mcrypt",
      "if (pm)",
      "mode,",
      "if (data_size <= 0)",
      "php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Integer overflow in data size\"",
      "RETURN_FALSE",
      "if (data_size <= 0)",
      "php_error_docref(NULL TSRMLS_CC, E_WARNING, \"Integer overflow in data size\"",
      "RETURN_FALSE",
      "RETURN_TRUE",
      "int   cipher_len, module_len",
      "int   cipher_len, module_len",
      "int   cipher_len, module_len",
      "if (key_length_sizes[i] >= key_len &&"
    ],
    "removed_lines": [
      "typedef struct _php_mcrypt",
      "\"mcrypt\",",
      "ZEND_FETCH_RESOURCE (pm, php_mcrypt *, &mcryptind, -1, \"MCrypt\", le_mcrypt",
      "if (pm)",
      "mode,",
      "RETURN_TRUE",
      "int   cipher_len, module_len",
      "int   cipher_len, module_len",
      "int   cipher_len, module_len",
      "if (key_length_sizes[i] >= key_len &&"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 729,
    "id": "CVE-2016-5767",
    "commit_id": "c395c6e5d7e8df37a21265ff76e48fe75ceb5ae6?w=1",
    "added_lines": [
      "if (overflow2(sizeof(unsigned char *), sx))",
      "return NULL",
      "gdImageAALine(im, x1, y1, x2, y2, im->AA_color",
      "alphablending_bak = im->alphaBlendingFlag",
      "im->alphaBlendingFlag = alphablending_bak",
      "im->alphaBlendingFlag = alphablending_bak"
    ],
    "removed_lines": [
      "gdImageAALine(im, x1, y1, x2, y2, im->AA_color",
      "alphablending_bak = im->alphaBlendingFlag",
      "im->alphaBlendingFlag = alphablending_bak",
      "im->alphaBlendingFlag = alphablending_bak"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 730,
    "id": "CVE-2016-5766",
    "commit_id": "7722455726bec8c53458a32851d2a87982cf0eac?w=1",
    "added_lines": [
      "--TEST--",
      "Bug #72339 Integer Overflow in _gd2GetHeader() resulting in heap overflow",
      "--SKIPIF--",
      "<?php if (!function_exists(\"imagecreatefromgd2\")) print \"skip\"; ?>",
      "--FILE--",
      "<?php imagecreatefromgd2(dirname(__FILE__) . DIRECTORY_SEPARATOR . \"bug72339.gd\"); ?>",
      "--EXPECTF--",
      "Warning: imagecreatefromgd2(): gd warning: product of memory allocation multiplication would exceed INT_MAX, failing operation gracefully",
      "in %sbug72339.php on line %d",
      "Warning: imagecreatefromgd2(): '%sbug72339.gd' is not a valid GD2 file in %sbug72339.php on line %d"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 731,
    "id": "CVE-2016-5728",
    "commit_id": "9bf292bfca94694a721449e3fd752493856710f6",
    "added_lines": [
      "if (memcmp(&dd, dd_config, sizeof(dd)))",
      "ret = -EINVAL",
      "goto free_ret"
    ],
    "removed_lines": [],
    "cause": [
      "Race Condition or Concurrency",
      "Uncategorized Cluster 7"
    ],
    "effect": "DoS  Mem. Corr. +Info",
    "score": 5.4,
    "safe_features": [
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. +Info ",
    "summary": [
      "*double fetch* vulnerability",
      "race condition"
    ]
  },
  {
    "index": 734,
    "id": "CVE-2016-5688",
    "commit_id": "7.0.1-5",
    "added_lines": [
      "2016-05-18  7.0.1-5 Cristy  <quetzlzacatenango@image...>"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "invalid write"
    ]
  },
  {
    "index": 738,
    "id": "CVE-2016-5400",
    "commit_id": "aa93d1fee85c890a34f2510a310e55ee76a27848",
    "added_lines": [
      "goto err_free_controls"
    ],
    "removed_lines": [
      "goto err_unregister_v4l2_dev",
      "err_unregister_v4l2_dev:"
    ],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "memory leak"
    ]
  },
  {
    "index": 740,
    "id": "CVE-2016-5359",
    "commit_id": "b8e0d416898bb975a02c1b55883342edc5b4c9c0",
    "added_lines": [
      "guint32     off      = offset, last_off",
      "last_off = off",
      "if (off < last_off)",
      "THROW(ReportedBoundsError",
      "last_off = off",
      "guint32     off                 = offset, last_off",
      "last_off = off",
      "if (off < last_off)",
      "THROW(ReportedBoundsError",
      "last_off = off",
      "guint32     off     = offset, last_off",
      "last_off = off",
      "if (off < last_off)",
      "THROW(ReportedBoundsError",
      "last_off = off",
      "guint32 off     = offset, last_off",
      "last_off = off",
      "if (off < last_off)",
      "THROW(ReportedBoundsError",
      "last_off = off"
    ],
    "removed_lines": [
      "guint32     off      = offset",
      "guint32     off                 = offset",
      "guint32     off     = offset",
      "guint32 off     = offset"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "infinite loop",
      "integer overflow"
    ]
  },
  {
    "index": 743,
    "id": "CVE-2016-5356",
    "commit_id": "a66628e425db725df1ac52a3c573a03357060ddd",
    "added_lines": [
      "int\tyy, mm, dd, hr, min, sec, csec, pkt_len",
      "\"%4d-%2d-%2d,%2d:%2d:%2d.%9d: %5s (%127[A-Za-z0-9/:]), Length:%9d, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
      "\"%5s (%127[A-Za-z0-9/:]), Length:%9d, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
      "if (pkt_len < 0)",
      "return FALSE"
    ],
    "removed_lines": [
      "int\tyy, mm, dd, hr, min, sec, csec",
      "guint\tpkt_len",
      "\"%4d-%2d-%2d,%2d:%2d:%2d.%9d: %5s (%127[A-Za-z0-9/:]), Length:%9u, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
      "\"%5s (%127[A-Za-z0-9/:]), Length:%9u, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\","
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "mishandles sscanf unsigned-integer processing"
    ]
  },
  {
    "index": 753,
    "id": "CVE-2016-5157",
    "commit_id": "e078172b1c3f98d2219c37076b238fb759c751ea",
    "added_lines": [
      "# issue 823 (yes, not a typo, test image is issue822",
      "!opj_decompress -i @INPUT_NR_PATH@/issue822.jp2 -o @TEMP_PATH@/issue822.png"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 754,
    "id": "CVE-2016-5116",
    "commit_id": "4dc1a2d7931017d3625f2d7cff70a17ce58b53b4",
    "added_lines": [
      "char buf[1024]",
      "#define gdCtxPuts(out, s) out->putBuf(out, s, strlen(s",
      "gdCtxPuts(out, \"#define \"",
      "gdCtxPuts(out, name",
      "gdCtxPuts(out, \"_width \"",
      "gdCtxPrintf(out, \"%d\\n\", gdImageSX(image",
      "gdCtxPuts(out, \"#define \"",
      "gdCtxPuts(out, name",
      "gdCtxPuts(out, \"_height \"",
      "gdCtxPrintf(out, \"%d\\n\", gdImageSY(image",
      "gdCtxPuts(out, \"static unsigned char \"",
      "gdCtxPuts(out, name",
      "gdCtxPuts(out, \"_bits[] = {\\n  \"",
      "gdCtxPuts(out, \", \"",
      "gdCtxPuts(out, \"\\n  \"",
      "gdCtxPuts(out, \"};\\n\""
    ],
    "removed_lines": [
      "char buf[4096]",
      "gdCtxPrintf(out, \"#define %s_width %d\\n\", name, gdImageSX(image",
      "gdCtxPrintf(out, \"#define %s_height %d\\n\", name, gdImageSY(image",
      "gdCtxPrintf(out, \"static unsigned char %s_bits[] = {\\n  \", name",
      "gdCtxPrintf(out, \", \"",
      "gdCtxPrintf(out, \"\\n  \"",
      "gdCtxPrintf(out, \"};\\n\""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  +Info",
    "score": 6.4,
    "safe_features": [
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS"
    ],
    "vuln": "DoS Overflow +Info ",
    "summary": [
      "stack-based buffer under-read"
    ]
  },
  {
    "index": 755,
    "id": "CVE-2016-5114",
    "commit_id": "2721a0148649e07ed74468f097a28899741eb58f?w=1",
    "added_lines": [
      "if (len >= FPM_LOG_BUFFER)",
      "zlog(ZLOG_NOTICE, \"the log buffer is full (%d). The access log request has been truncated.\", FPM_LOG_BUFFER",
      "len = FPM_LOG_BUFFER",
      "break"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS  +Info",
    "score": 6.4,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow +Info ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds read"
    ]
  },
  {
    "index": 757,
    "id": "CVE-2016-5096",
    "commit_id": "abd159cce48f3e34f08e4751c568e09677d5ec9c?w=1",
    "added_lines": [
      "--TEST--",
      "Bug #72114 (Integer underflow / arbitrary null write in fread/gzread",
      "--FILE--",
      "<?php",
      "ini_set('memory_limit', \"2500M\"",
      "$fp = fopen(\"/dev/zero\", \"r\"",
      "fread($fp, 2147483648",
      "?>",
      "Done",
      "--EXPECTF--",
      "Warning: fread(): Length parameter must be no more than 2147483647 in %s/bug72114.php on line %d",
      "Done"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 758,
    "id": "CVE-2016-5094",
    "commit_id": "0da8b8b801f9276359262f1ef8274c7812d3dfda?w=1",
    "added_lines": [
      "empty_source:",
      "next_char = get_next_char(charset, old, oldlen, cursor, &status",
      "maxlen = 128",
      "if (new_len > INT_MAX)",
      "efree(replaced",
      "RETURN_FALSE"
    ],
    "removed_lines": [
      "empty_source:",
      "next_char = get_next_char(charset, old, oldlen, cursor, &status",
      "maxlen = 128"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 761,
    "id": "CVE-2016-4998",
    "commit_id": "6e94e0cfb0887e4013b3b930fa6ab1fe6bb6ba91",
    "added_lines": [
      "(unsigned char *)e + sizeof(struct ip6t_entry) >= limit ||",
      "(unsigned char *)e + e->next_offset > limit)",
      "(unsigned char *)e + sizeof(struct compat_ip6t_entry) >= limit ||",
      "(unsigned char *)e + e->next_offset > limit)"
    ],
    "removed_lines": [
      "(unsigned char *)e + sizeof(struct ip6t_entry) >= limit)",
      "(unsigned char *)e + sizeof(struct compat_ip6t_entry) >= limit)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS  +Info",
    "score": 5.6,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow +Info ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 769,
    "id": "CVE-2016-4804",
    "commit_id": "e8eff147e9da1185f9afd5b25948153a3b97cf52",
    "added_lines": [
      "off_t fat_size;"
    ],
    "removed_lines": [
      "unsigned int fat_size;"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 2.1,
    "safe_features": [
      "INDEX_OP"
    ],
    "unsafe_features": [
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow"
    ]
  },
  {
    "index": 774,
    "id": "CVE-2016-4568",
    "commit_id": "2c1f6951a8a82e6de0d82b1158b5e493fc6c54ab",
    "added_lines": [
      "static int __verify_planes_array_core(struct vb2_buffer *vb, const void *pb",
      "return __verify_planes_array(vb, pb",
      ".verify_planes_array\t= __verify_planes_array_core,"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "ioctl call"
    ]
  },
  {
    "index": 776,
    "id": "CVE-2016-4564",
    "commit_id": "726812fa2fa7ce16bcf58f6e115f65427a1c0950",
    "added_lines": [
      "clip_mask->background_color.alpha=(MagickRealType) TransparentAlpha",
      "for (i=1; (i < (ssize_t) number_vertices) && (length >= 0.0); i++",
      "GetNextToken(q,&q,MagickPathExtent,keyword",
      "weight=(ssize_t) StringToUnsignedLong(token",
      "(void) FormatLocaleString(key,MagickPathExtent,\"%s-geometry\",",
      "name",
      "clone_info->stroke.alpha=(MagickRealType) TransparentAlpha",
      "clone_info->stroke.alpha=(MagickRealType) TransparentAlpha",
      "clone_info->stroke.alpha=(MagickRealType) TransparentAlpha",
      "draw_info->undercolor.alpha=(MagickRealType) TransparentAlpha",
      "weight=(ssize_t) StringToUnsignedLong(option",
      "if (~max_strokes < (6*BezierQuantum+360",
      "path_p=(PointInfo *) RelinquishMagickMemory(path_p",
      "path_q=(PointInfo *) RelinquishMagickMemory(path_q",
      "else",
      "max_strokes+=6*BezierQuantum+360",
      "path_p=(PointInfo *) ResizeQuantumMemory(path_p,max_strokes,",
      "sizeof(*path_p",
      "path_q=(PointInfo *) ResizeQuantumMemory(path_q,max_strokes,",
      "sizeof(*path_q",
      "if ((path_p == (PointInfo *) NULL) || (path_q == (PointInfo *) NULL",
      "if (path_p != (PointInfo *) NULL",
      "path_p=(PointInfo *) RelinquishMagickMemory(path_p",
      "if (path_q != (PointInfo *) NULL",
      "path_q=(PointInfo *) RelinquishMagickMemory(path_q",
      "polygon_primitive=(PrimitiveInfo *",
      "RelinquishMagickMemory(polygon_primitive",
      "return((PrimitiveInfo *) NULL"
    ],
    "removed_lines": [
      "clip_mask->background_color.alpha=(Quantum) TransparentAlpha",
      "for (i=1; (i < number_vertices) && (length >= 0.0); i++",
      "GetNextToken(q,&q,extent,keyword",
      "weight=StringToUnsignedLong(token",
      "(void) FormatLocaleString(key,MagickPathExtent,\"%s-geometry\",name",
      "clone_info->stroke.alpha=(Quantum) TransparentAlpha",
      "clone_info->stroke.alpha=(Quantum) TransparentAlpha",
      "clone_info->stroke.alpha=(Quantum) TransparentAlpha",
      "draw_info->undercolor.alpha=(Quantum) TransparentAlpha",
      "weight=StringToUnsignedLong(option",
      "max_strokes+=6*BezierQuantum+360",
      "path_p=(PointInfo *) ResizeQuantumMemory(path_p,(size_t) max_strokes,",
      "sizeof(*path_p",
      "path_q=(PointInfo *) ResizeQuantumMemory(path_q,(size_t) max_strokes,",
      "sizeof(*path_q",
      "if ((path_p == (PointInfo *) NULL) || (path_q == (PointInfo *) NULL",
      "polygon_primitive=(PrimitiveInfo *",
      "RelinquishMagickMemory(polygon_primitive",
      "return((PrimitiveInfo *) NULL"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "RETURN",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 782,
    "id": "CVE-2016-4478",
    "commit_id": "87580d767868360d2fed503980129504da84b63e",
    "added_lines": [
      "s->append_char(s, 0",
      "strncpy(outbuffer, s->str, XMLRPC_BUFSIZE"
    ],
    "removed_lines": [
      "memcpy(outbuffer, s->str, XMLRPC_BUFSIZE"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 787,
    "id": "CVE-2016-4303",
    "commit_id": "91f2fa59e8ed80dfbf400add0164ee0e508e412a",
    "added_lines": [
      "j = cJSON_CreateNumber(va_arg(argp, int64_t",
      "j = cJSON_CreateNumber(va_arg(argp, double"
    ],
    "removed_lines": [
      "j = cJSON_CreateInt(va_arg(argp, int64_t",
      "j = cJSON_CreateFloat(va_arg(argp, double"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 788,
    "id": "CVE-2016-4302",
    "commit_id": "05caadc7eedbef471ac9610809ba683f0c698700",
    "added_lines": [
      "if (rar->dictionary_size == 0)",
      "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,",
      "\"Invalid zero dictionary size\"",
      "return (ARCHIVE_FATAL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 789,
    "id": "CVE-2016-4301",
    "commit_id": "a550daeecf6bc689ade371349892ea17b5b97c77",
    "added_lines": [
      "if (argc >= MAX_PACK_ARGS)",
      "numbers[argc++] = (unsigned long)mtree_atol(&p"
    ],
    "removed_lines": [
      "numbers[argc++] = (unsigned long)mtree_atol(&p",
      "if (argc > MAX_PACK_ARGS)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 790,
    "id": "CVE-2016-4300",
    "commit_id": "e79ef306afe332faf22e9b442a2c6b59cb175573",
    "added_lines": [
      "if (unpack_streams > SIZE_MAX - UMAX_ENTRY)",
      "return (-1"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 791,
    "id": "CVE-2016-3955",
    "commit_id": "b348d7dddb6c4fbfc810b7a0626e8ec9e29f7cbb",
    "added_lines": [
      "if (size > urb->transfer_buffer_length)",
      "if (ud->side == USBIP_STUB)",
      "usbip_event_add(ud, SDEV_EVENT_ERROR_TCP",
      "return 0",
      "} else",
      "usbip_event_add(ud, VDEV_EVENT_ERROR_TCP",
      "return -EPIPE"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 10.0,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 805,
    "id": "CVE-2016-3135",
    "commit_id": "d157bd761585605b7882935ffb86286919f62ea1",
    "added_lines": [
      "if (sz < sizeof(*info",
      "return NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  +Priv Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow +Priv Mem. Corr. ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 806,
    "id": "CVE-2016-3134",
    "commit_id": "54d83fc74aa9ec72794373cb47432c5f7fb1a309",
    "added_lines": [
      "static inline bool unconditional(const struct ip6t_entry *e",
      "return e->target_offset == sizeof(struct ip6t_entry) &&",
      "memcmp(&e->ipv6, &uncond, sizeof(uncond)) == 0",
      "if (unconditional(s) &&",
      "t->verdict < 0)",
      "if ((unconditional(e) &&",
      "t->verdict < 0) || visited)",
      "if (!unconditional(e",
      "pr_debug(\"Underflows must be unconditional and \"",
      "\"use the STANDARD target with \"",
      "\"ACCEPT/DROP\\n\""
    ],
    "removed_lines": [
      "static inline bool unconditional(const struct ip6t_ip6 *ipv6",
      "return memcmp(ipv6, &uncond, sizeof(uncond)) == 0",
      "if (s->target_offset == sizeof(struct ip6t_entry) &&",
      "t->verdict < 0 &&",
      "unconditional(&s->ipv6))",
      "if ((e->target_offset == sizeof(struct ip6t_entry) &&",
      "t->verdict < 0 &&",
      "unconditional(&e->ipv6)) || visited)",
      "if (!unconditional(&e->ipv6",
      "pr_err(\"Underflows must be unconditional and \"",
      "\"use the STANDARD target with \"",
      "\"ACCEPT/DROP\\n\""
    ],
    "cause": [
      "Improper Input Validation"
    ],
    "effect": "DoS  +Priv Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "SIZE_CHECK",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow +Priv Mem. Corr. ",
    "summary": [
      "does not validate certain offset fields"
    ]
  },
  {
    "index": 810,
    "id": "CVE-2016-3078",
    "commit_id": "3b8d4de300854b3517c7acb239b84f7726c1353c?w=1",
    "added_lines": [
      "buffer = zend_string_safe_alloc(1, len, 0, 0",
      "buffer = zend_string_safe_alloc(1, len, 0, 0"
    ],
    "removed_lines": [
      "buffer = zend_string_alloc(len, 0",
      "buffer = zend_string_alloc(len, 0"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 811,
    "id": "CVE-2016-3074",
    "commit_id": "2bb97f407c1145c850416a3bfbcc8cf124e68a19",
    "added_lines": [
      "#include \"gd.h\"",
      "#include <stdio.h>",
      "#include <stdlib.h>",
      "#include \"gdtest.h\"",
      "int main",
      "gdImagePtr im",
      "FILE *fp",
      "char path[1024]",
      "sprintf(path, \"%s/gd2/invalid_neg_size.gd2\", GDTEST_TOP_DIR",
      "fp = fopen(path, \"rb\"",
      "if (!fp)",
      "printf(\"failed, cannot open file\\n\"",
      "return 1",
      "im = gdImageCreateFromGd2(fp",
      "fclose(fp",
      "return im == NULL ? 0 : 1"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "integer signedness error",
      "buffer overflow"
    ]
  },
  {
    "index": 813,
    "id": "CVE-2016-3062",
    "commit_id": "689e59b7ffed34eba6159dcc78e87133862e3746",
    "added_lines": [
      "sc->drefs_count = 0"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 823,
    "id": "CVE-2016-2385",
    "commit_id": "f50c9c853e7809810099c970780c30b0765b0643",
    "added_lines": [
      "if(len < j + msg->len + 1)",
      "LM_ERR(\"not enough space to encode sip message\\n\"",
      "return -1"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 10.0,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 826,
    "id": "CVE-2016-2324",
    "commit_id": "de1e67d0703894cb6ea782e36abb63976ab07e60",
    "added_lines": [
      "extern void show_object_with_name(FILE *, struct object *, const char *"
    ],
    "removed_lines": [
      "extern void show_object_with_name(FILE *, struct object *,",
      "struct strbuf *, const char *"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 10.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 827,
    "id": "CVE-2016-2315",
    "commit_id": "34fa79a6cde56d6d428ab0d3160cb094ebad3305",
    "added_lines": [
      "memcpy(m, name, nlen + 1"
    ],
    "removed_lines": [
      "strcpy(m, name"
    ],
    "cause": [
      "Memory Management",
      "Logical Flaws"
    ],
    "effect": "ExecCode ",
    "score": 10.0,
    "safe_features": [
      "MEM_COPY",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_COPY"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "incorrect integer data type",
      "buffer overflow"
    ]
  },
  {
    "index": 841,
    "id": "CVE-2016-1904",
    "commit_id": "2871c70efaaaa0f102557a17c727fd4d5204dd4b",
    "added_lines": [
      "cmd = zend_string_safe_alloc(2, l, 0, 0",
      "cmd = zend_string_safe_alloc(4, l, 2, 0);"
    ],
    "removed_lines": [
      "cmd = zend_string_alloc(2 * l, 0",
      "cmd = zend_string_alloc(4 * l + 2, 0);"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 842,
    "id": "CVE-2016-1583",
    "commit_id": "f5364c150aa645b3d7daa21b5c0b9feaa1c9cd6d",
    "added_lines": [
      "if (task_stack_end_corrupted(prev",
      "panic(\"corrupted stack end detected inside scheduler\\n\""
    ],
    "removed_lines": [
      "BUG_ON(task_stack_end_corrupted(prev"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  +Priv",
    "score": 7.2,
    "safe_features": [
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "stack memory consumption"
    ]
  },
  {
    "index": 843,
    "id": "CVE-2016-1541",
    "commit_id": "d0331e8e5b05b475f20b1f3101fe1ad772d7e7e7",
    "added_lines": [
      "if (rsrc->uncompressed_size != rsrc->compressed_size)",
      "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,",
      "\"Malformed OS X metadata entry: inconsistent size\"",
      "return (ARCHIVE_FATAL",
      "if (rsrc->compressed_size > (4 * 1024 * 1024))",
      "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,",
      "\"Mac metadata is too large: %jd > 4M bytes\",",
      "(intmax_t)rsrc->compressed_size",
      "return (ARCHIVE_WARN",
      "if ((size_t)bytes_avail > metadata_bytes",
      "bytes_avail = metadata_bytes"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 848,
    "id": "CVE-2016-0758",
    "commit_id": "23c8a812dc3c621009e4f0e5342aa4e2ede1ceaa",
    "added_lines": [
      "if (tag == ASN1_EOC)",
      "if (len <= 0x7f",
      "goto check_length",
      "if (unlikely(n > sizeof(len) - 1",
      "len = 0",
      "for (; n > 0; n--)",
      "check_length:",
      "if (len > datalen - dp",
      "goto data_overrun_error"
    ],
    "removed_lines": [
      "if (tag == 0)",
      "if (len <= 0x7f)",
      "dp += len",
      "goto next_tag",
      "if (unlikely(n > sizeof(size_t) - 1",
      "for (len = 0; n > 0; n--)"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": " +Priv",
    "score": 7.2,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Overflow +Priv ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 849,
    "id": "CVE-2016-0728",
    "commit_id": "23567fd052a9abb6d67fe8e7a9ccdd9800a540f2",
    "added_lines": [
      "key_put(keyring"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  +Priv",
    "score": 7.2,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "use-after-free",
      "integer overflow"
    ]
  },
  {
    "index": 851,
    "id": "CVE-2016-0546",
    "commit_id": "0dbd5a8797ed4bd18e8b883988fb62177eb0f73f",
    "added_lines": [
      "snprintf(grump, sizeof(grump),",
      "\"start %ld end %ld\", (long)sub.rm_so,",
      "snprintf(grump, sizeof(grump),",
      "\"start %ld end %ld, past end of string\",",
      "snprintf(grump, sizeof(grump),",
      "\"matched `%.*s'\", len, p",
      "snprintf(grump, sizeof(grump),",
      "\"matched `%.*s' instead\", len, p",
      "snprintf(grump, sizeof(grump),",
      "\"matched null at `%.20s'\", p",
      "snprintf(efbuf, sizeof(efbuf), \"REG_%s\", name"
    ],
    "removed_lines": [
      "sprintf(grump, \"start %ld end %ld\", (long)sub.rm_so,",
      "sprintf(grump, \"start %ld end %ld, past end of string\",",
      "sprintf(grump, \"matched `%.*s'\", len, p",
      "sprintf(grump, \"matched `%.*s' instead\", len, p",
      "sprintf(grump, \"matched null at `%.20s'\", p",
      "sprintf(efbuf, \"REG_%s\", name"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 7.2,
    "safe_features": [
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_COPY",
      "MEM_COPY"
    ],
    "vuln": "Overflow ",
    "summary": [
      "unknown vectors",
      "Unspecified vulnerability",
      "buffer overflow"
    ]
  },
  {
    "index": 864,
    "id": "CVE-2015-8947",
    "commit_id": "f96664974774bfeb237a7274f512f64aaafb201e",
    "added_lines": [
      "if (!c->check_struct (this)) return_trace (false",
      "return_trace (coverage.sanitize (c, this) && pairSet.sanitize (c, this, &closure"
    ],
    "removed_lines": [
      "return_trace (c->check_struct (this) && coverage.sanitize (c, this) && pairSet.sanitize (c, this, &closure"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 869,
    "id": "CVE-2015-8865",
    "commit_id": "6713ca45e7757297381f4b4cdb9cf5e624a9ad36",
    "added_lines": [
      "FILE_RCSID(\"@(#)$File: funcs.c,v 1.81 2015/05/28 19:26:59 christos Exp $\"",
      "len = (ms->c.len = 20 + level) * sizeof(*ms->c.li"
    ],
    "removed_lines": [
      "FILE_RCSID(\"@(#)$File: funcs.c,v 1.80 2015/01/02 21:29:39 christos Exp $\"",
      "len = (ms->c.len += 20) * sizeof(*ms->c.li"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 870,
    "id": "CVE-2015-8863",
    "commit_id": "8eb1367ca44e772963e704a700ef72ae2e12babd",
    "added_lines": [
      "if (p->tokenpos >= (p->tokenlen - 1))",
      "p->tokenbuf[p->tokenpos] = 0"
    ],
    "removed_lines": [
      "if (p->tokenpos == p->tokenlen)",
      "p->tokenbuf[p->tokenpos] = 0; // FIXME: invalid"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 10.0,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "off-by-one",
      "buffer overflow",
      "off-by-one error"
    ]
  },
  {
    "index": 876,
    "id": "CVE-2015-8830",
    "commit_id": "c4f4b82694fe48b02f7a881a1797131a6dad1364",
    "added_lines": [
      "size_t len = kiocb->ki_nbytes",
      "if (len > MAX_RW_COUNT",
      "len = MAX_RW_COUNT",
      "if (unlikely(!access_ok(!rw, buf, len",
      "iovec->iov_len = len"
    ],
    "removed_lines": [
      "if (unlikely(!access_ok(!rw, buf, kiocb->ki_nbytes",
      "iovec->iov_len = kiocb->ki_nbytes"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 879,
    "id": "CVE-2015-8792",
    "commit_id": "0a2d3e3644a7453b6513db2f9bc270f77943573f",
    "added_lines": [
      "if (!FrameSize || (static_cast<uint32>(FrameSize + SizeRead) > LastBufferSize",
      "throw SafeReadIOCallback::EndOfStreamX(SizeRead",
      "if (!FrameSize || (static_cast<uint32>(FrameSize + SizeRead) > LastBufferSize",
      "throw SafeReadIOCallback::EndOfStreamX(SizeRead"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 5"
    ],
    "effect": " +Info",
    "score": 5.0,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow +Info ",
    "summary": [
      "invalid memory access",
      "EBML lacing"
    ]
  },
  {
    "index": 885,
    "id": "CVE-2015-8784",
    "commit_id": "b18012dae552f85dcc5c57d3bf4e997a15b1cc1c",
    "added_lines": [
      "case 3:\t*op++ |= (v);\t   op_offset++; break;\t\\",
      "tmsize_t op_offset = 0",
      "while (n-- > 0 && npixels < imagewidth && op_offset < scanline",
      "if (op_offset >= scanline )",
      "TIFFErrorExt(tif->tif_clientdata, module, \"Invalid data for scanline %ld\",",
      "(long) tif->tif_row",
      "return (0"
    ],
    "removed_lines": [
      "case 3:\t*op++ |= (v);\t   break;\t\\",
      "while (n-- > 0 && npixels < imagewidth"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 889,
    "id": "CVE-2015-8631",
    "commit_id": "83ed75feba32e46f736fcce0d96a0445f29b96c2",
    "added_lines": [
      "gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER",
      "gss_release_buffer(&minor_stat, &client_name",
      "gss_release_buffer(&minor_stat, &service_name",
      "gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER",
      "gss_release_buffer(&minor_stat, &client_name",
      "gss_release_buffer(&minor_stat, &service_name",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "gss_release_buffer(&minor_stat, &client_name",
      "gss_release_buffer(&minor_stat, &service_name",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "char                        *prime_arg1 = NULL, *prime_arg2 = NULL",
      "gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc             client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc             service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc                 client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc                 service_name = GSS_C_EMPTY_BUFFER",
      "exit_func:",
      "gss_buffer_desc            client_name = GSS_C_EMPTY_BUFFER",
      "gss_buffer_desc            service_name = GSS_C_EMPTY_BUFFER",
      "gss_release_buffer(&minor_stat, &client_name",
      "gss_release_buffer(&minor_stat, &service_name"
    ],
    "removed_lines": [
      "gss_buffer_desc             client_name, service_name",
      "gss_release_buffer(&minor_stat, &client_name",
      "gss_release_buffer(&minor_stat, &service_name",
      "gss_buffer_desc             client_name, service_name",
      "gss_release_buffer(&minor_stat, &client_name",
      "gss_release_buffer(&minor_stat, &service_name",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "gss_release_buffer(&minor_stat, &client_name",
      "gss_release_buffer(&minor_stat, &service_name",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "char                        *prime_arg1,",
      "gss_buffer_desc             client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc             client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc             client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc             client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                client_name, service_name",
      "exit_func:",
      "gss_buffer_desc             client_name, service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc                 client_name,",
      "service_name",
      "exit_func:",
      "gss_buffer_desc            client_name,",
      "service_name",
      "gss_release_buffer(&minor_stat, &client_name",
      "gss_release_buffer(&minor_stat, &service_name"
    ],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "memory leak"
    ]
  },
  {
    "index": 891,
    "id": "CVE-2015-8629",
    "commit_id": "df17a1224a3406f57477bcd372c61e04c0e5a5bb",
    "added_lines": [
      "if (!xdr_opaque(xdrs, *objp, size",
      "return FALSE",
      "if ((*objp)[size - 1] != '\\0'",
      "return FALSE",
      "if (memchr(*objp, '\\0', size - 1) != NULL",
      "return FALSE",
      "return TRUE"
    ],
    "removed_lines": [
      "return (xdr_opaque(xdrs, *objp, size"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  +Info",
    "score": 2.1,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow +Info ",
    "summary": [
      "'0' character",
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 912,
    "id": "CVE-2014-9904",
    "commit_id": "6217e5ede23285ddfee10d2e4ba0cc2d4c046205",
    "added_lines": [
      "params->buffer.fragments > INT_MAX / params->buffer.fragment_size"
    ],
    "removed_lines": [
      "params->buffer.fragments > SIZE_MAX / params->buffer.fragment_size"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "ioctl call",
      "integer overflow"
    ]
  },
  {
    "index": 920,
    "id": "CVE-2014-9765",
    "commit_id": "ef93ff74203e030073b898c05e8b4860b5d09ef2",
    "added_lines": [
      "(1812433253UL * (mt->mt_buffer_[i-1] ^",
      "y = (mt->mt_buffer_[kk] & UPPER_MASK) |",
      "mt->mt_buffer_[kk] = mt->mt_buffer_[kk + MT_IA] ^",
      "y = (mt->mt_buffer_[kk] & UPPER_MASK) |",
      "mt->mt_buffer_[kk] = mt->mt_buffer_[kk + (MT_IA - MT_LEN)] ^",
      "y = (mt->mt_buffer_[MT_LEN - 1] & UPPER_MASK) |",
      "mt->mt_buffer_[MT_LEN - 1] = mt->mt_buffer_[MT_IA - 1] ^",
      "return ret",
      "usize_t ts = (mt_random (&static_mtrand) % TEST_FILE_MEAN) +",
      "TEST_FILE_MEAN / 2",
      "usize_t ss = (mt_random (&static_mtrand) % TEST_FILE_MEAN) +",
      "TEST_FILE_MEAN / 2",
      "XPR(NT \"byte %u (read %u @ %\"Q\"u) %d != %d\\n\",",
      "if (diffs != 0",
      "test_copy_to (const char *from, const char *to",
      "snprintf_func (buf, TESTBUFSIZE, \"cp -f %s %s\", from, to",
      "static int",
      "test_save_copy (const char *origname",
      "return test_copy_to(origname, TEST_COPY_FILE",
      "if ((ret = xd3_read_uint32_t (stream, & inp, max, & rval)) !=",
      "for (i = 0; i < (2 << 20); i += 256",
      "for (j = 0; j < 256; j++",
      "if ((ret = test_streaming (stream,",
      "buf,",
      "buf + (1 << 20),",
      "buf + (2 << 20),",
      "1 << 12",
      "snprintf_func (ecmd, TESTBUFSIZE, \"%s %s -f %s %s %s %s %s %s %s\",",
      "!change_apphead ? \"\" :",
      "static int",
      "test_appheader (xd3_stream *stream, int ignore",
      "int i",
      "int ret",
      "char buf[TESTBUFSIZE]",
      "char bogus[TESTBUFSIZE]",
      "xoff_t ssize, tsize",
      "test_setup",
      "if ((ret = test_make_inputs (stream, &ssize, &tsize))) { return ret;",
      "snprintf_func (buf, TESTBUFSIZE, \"%s -q -f -e -s %s %s %s\", program_name,",
      "TEST_SOURCE_FILE, TEST_TARGET_FILE, TEST_DELTA_FILE",
      "if ((ret = do_cmd (stream, buf))) { return ret;",
      "if ((ret = test_copy_to (program_name, TEST_RECON2_FILE))) { return ret;",
      "snprintf_func (buf, TESTBUFSIZE, \"chmod 0700 %s\", TEST_RECON2_FILE",
      "if ((ret = do_cmd (stream, buf))) { return ret;",
      "if ((ret = test_save_copy (TEST_TARGET_FILE))) { return ret;",
      "if ((ret = test_copy_to (TEST_SOURCE_FILE, TEST_TARGET_FILE))) { return ret;",
      "if ((ret = test_compare_files (TEST_TARGET_FILE, TEST_COPY_FILE)) == 0",
      "return XD3_INVALID;  // I.e., files are different!",
      "snprintf_func (buf, TESTBUFSIZE, \"(cd /tmp && %s -q -f -d %s)\",",
      "TEST_RECON2_FILE,",
      "TEST_DELTA_FILE",
      "if ((ret = do_cmd (stream, buf))) { return ret;",
      "if ((ret = test_compare_files (TEST_TARGET_FILE, TEST_COPY_FILE)) != 0",
      "return ret",
      "for (i = 0; i < TESTBUFSIZE / 4; ++i",
      "bogus[2*i] = 'G'",
      "bogus[2*i+1] = '/'",
      "bogus[TESTBUFSIZE/2-1] = 0",
      "snprintf_func (buf, TESTBUFSIZE,",
      "\"%s -q -f -A=%s -e -s %s %s %s\", program_name, bogus,",
      "TEST_SOURCE_FILE, TEST_TARGET_FILE, TEST_DELTA_FILE",
      "if ((ret = do_cmd (stream, buf))) { return ret;",
      "snprintf_func (buf, TESTBUFSIZE, \"(cd /tmp && %s -q -f -d %s)\",",
      "TEST_RECON2_FILE,",
      "TEST_DELTA_FILE",
      "if ((ret = do_cmd (stream, buf)) == 0",
      "return XD3_INVALID;  // Impossible",
      "if (!WIFEXITED(ret",
      "return XD3_INVALID;  // Must have crashed!",
      "return 0",
      "snprintf_func (rptr, rbuf+TESTBUFSIZE-rptr, \"%d/%d\",",
      "DO_TEST (appheader, 0, 0"
    ],
    "removed_lines": [
      "(1812433253UL * (mt->mt_buffer_[i-1] ^",
      "y = (mt->mt_buffer_[kk] & UPPER_MASK) |",
      "mt->mt_buffer_[kk] = mt->mt_buffer_[kk + MT_IA] ^",
      "y = (mt->mt_buffer_[kk] & UPPER_MASK) |",
      "mt->mt_buffer_[kk] = mt->mt_buffer_[kk + (MT_IA - MT_LEN)] ^",
      "y = (mt->mt_buffer_[MT_LEN - 1] & UPPER_MASK) |",
      "mt->mt_buffer_[MT_LEN - 1] = mt->mt_buffer_[MT_IA - 1] ^",
      "return XD3_INTERNAL",
      "usize_t ts = (mt_random (&static_mtrand) % TEST_FILE_MEAN) + TEST_FILE_MEAN / 2",
      "usize_t ss = (mt_random (&static_mtrand) % TEST_FILE_MEAN) + TEST_FILE_MEAN / 2",
      "XPR(NT \"byte %u (read %u @ %\"Q\"u) %d != %d\\n\",",
      "if (diffs != 0",
      "test_save_copy (const char *origname",
      "snprintf_func (buf, TESTBUFSIZE, \"cp -f %s %s\", origname, TEST_COPY_FILE",
      "if ((ret = xd3_read_uint32_t (stream, & inp, max, & rval)) !=",
      "for (i = 0; i < (2 << 20); i += 256",
      "for (j = 0; j < 256; j++",
      "if ((ret = test_streaming (stream,",
      "buf,",
      "buf + (1 << 20),",
      "buf + (2 << 20),",
      "1 << 12",
      "snprintf_func (ecmd, TESTBUFSIZE, \"%s %s -f %s %s %s %s %s %s %s\",",
      "!change_apphead ? \"\" :",
      "snprintf_func (rptr, rbuf+TESTBUFSIZE-rptr, \"%d/%d\","
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 926,
    "id": "CVE-2013-4312",
    "commit_id": "712f4aad406bb1ed67f3f98d04c044191f0ff593",
    "added_lines": [
      "spin_lock(&unix_gc_lock",
      "fp->f_cred->user->unix_inflight++",
      "spin_unlock(&unix_gc_lock",
      "spin_lock(&unix_gc_lock",
      "fp->f_cred->user->unix_inflight--",
      "spin_unlock(&unix_gc_lock"
    ],
    "removed_lines": [
      "spin_lock(&unix_gc_lock",
      "spin_unlock(&unix_gc_lock",
      "spin_lock(&unix_gc_lock",
      "spin_unlock(&unix_gc_lock"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Bypass",
    "score": 4.9,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow Bypass ",
    "summary": [
      "by sending each descriptor over a UNIX socket before closing it"
    ]
  },
  {
    "index": 929,
    "id": "CVE-2012-6704",
    "commit_id": "82981930125abfd39d7c8378a9cfdf5e1be2002b",
    "added_lines": [
      "val = min_t(u32, val, sysctl_wmem_max",
      "sk->sk_sndbuf = max_t(u32, val * 2, SOCK_MIN_SNDBUF",
      "val = min_t(u32, val, sysctl_rmem_max",
      "sk->sk_rcvbuf = max_t(u32, val * 2, SOCK_MIN_RCVBUF",
      "v.val = !!test_bit(SOCK_PASSCRED, &sock->flags",
      "v.val = !!test_bit(SOCK_PASSSEC, &sock->flags"
    ],
    "removed_lines": [
      "about it this is right. Otherwise apps have to",
      "play 'guess the biggest size' games. RCVBUF/SNDBUF",
      "are treated in BSD as hints */",
      "if (val > sysctl_wmem_max",
      "val = sysctl_wmem_max",
      "if ((val * 2) < SOCK_MIN_SNDBUF",
      "sk->sk_sndbuf = SOCK_MIN_SNDBUF",
      "else",
      "sk->sk_sndbuf = val * 2",
      "about it this is right. Otherwise apps have to",
      "play 'guess the biggest size' games. RCVBUF/SNDBUF",
      "are treated in BSD as hints */",
      "if (val > sysctl_rmem_max",
      "val = sysctl_rmem_max",
      "if ((val * 2) < SOCK_MIN_RCVBUF",
      "sk->sk_rcvbuf = SOCK_MIN_RCVBUF",
      "else",
      "sk->sk_rcvbuf = val * 2",
      "v.val = test_bit(SOCK_PASSCRED, &sock->flags) ? 1 : 0",
      "v.val = test_bit(SOCK_PASSSEC, &sock->flags) ? 1 : 0"
    ],
    "cause": [
      "Parsing or Interpretation Errors",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "mishandles negative values of sk_sndbuf and sk_rcvbuf",
      "leveraging the CAP_NET_ADMIN capability"
    ]
  },
  {
    "index": 930,
    "id": "CVE-2012-6703",
    "commit_id": "b35cc8225845112a616e3a2266d2fde5ab13d3ab",
    "added_lines": [
      "if (params->buffer.fragment_size == 0 ||",
      "params->buffer.fragments > SIZE_MAX / params->buffer.fragment_size",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "ioctl call",
      "integer overflow"
    ]
  },
  {
    "index": 931,
    "id": "CVE-2012-6701",
    "commit_id": "a70b52ec1aaeaf60f4739edb1b422827cb6f3893",
    "added_lines": [
      "ret = rw_verify_area(type, kiocb->ki_filp, &kiocb->ki_pos, ret",
      "if (ret < 0",
      "goto out",
      "static ssize_t aio_setup_single_vector(int type, struct file * file, struct kiocb *kiocb",
      "int bytes",
      "bytes = rw_verify_area(type, file, &kiocb->ki_pos, kiocb->ki_left",
      "if (bytes < 0",
      "return bytes",
      "kiocb->ki_iovec->iov_len = bytes",
      "ret = aio_setup_single_vector(READ, file, kiocb",
      "ret = aio_setup_single_vector(WRITE, file, kiocb"
    ],
    "removed_lines": [
      "static ssize_t aio_setup_single_vector(struct kiocb *kiocb",
      "kiocb->ki_iovec->iov_len = kiocb->ki_left",
      "ret = security_file_permission(file, MAY_READ",
      "if (unlikely(ret",
      "break",
      "ret = aio_setup_single_vector(kiocb",
      "ret = security_file_permission(file, MAY_WRITE",
      "if (unlikely(ret",
      "break",
      "ret = aio_setup_single_vector(kiocb",
      "ret = security_file_permission(file, MAY_READ",
      "if (unlikely(ret",
      "break",
      "ret = security_file_permission(file, MAY_WRITE",
      "if (unlikely(ret",
      "break"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 938,
    "id": "CVE-2017-1000251",
    "commit_id": "f2fcfcd670257236ebf2088bbdf26f6a8ef459fe",
    "added_lines": [
      "case L2CAP_MODE_STREAMING:",
      "case L2CAP_MODE_STREAMING:",
      "static int l2cap_mode_supported(__u8 mode, __u32 feat_mask",
      "u32 local_feat_mask = l2cap_feat_mask",
      "if (enable_ertm",
      "local_feat_mask |= L2CAP_FEAT_ERTM",
      "switch (mode)",
      "case L2CAP_MODE_ERTM:",
      "return L2CAP_FEAT_ERTM & feat_mask & local_feat_mask",
      "case L2CAP_MODE_STREAMING:",
      "return L2CAP_FEAT_STREAMING & feat_mask & local_feat_mask",
      "default:",
      "return 0x00",
      "static inline __u8 l2cap_select_mode(__u8 mode, __u16 remote_feat_mask",
      "switch (mode)",
      "case L2CAP_MODE_STREAMING:",
      "case L2CAP_MODE_ERTM:",
      "if (l2cap_mode_supported(mode, remote_feat_mask",
      "return mode",
      "default:",
      "return L2CAP_MODE_BASIC",
      "struct l2cap_conf_rfc rfc = { .mode = L2CAP_MODE_ERTM",
      "if (pi->num_conf_req || pi->num_conf_rsp",
      "goto done",
      "switch (pi->mode)",
      "case L2CAP_MODE_STREAMING:",
      "case L2CAP_MODE_ERTM:",
      "pi->conf_state |= L2CAP_CONF_STATE2_DEVICE",
      "if (!l2cap_mode_supported(pi->mode, pi->conn->feat_mask))",
      "struct l2cap_disconn_req req",
      "req.dcid = cpu_to_le16(pi->dcid",
      "req.scid = cpu_to_le16(pi->scid",
      "l2cap_send_cmd(pi->conn, l2cap_get_ident(pi->conn),",
      "L2CAP_DISCONN_REQ, sizeof(req), &req",
      "break",
      "default:",
      "pi->mode = l2cap_select_mode(rfc.mode, pi->conn->feat_mask",
      "break",
      "done:",
      "rfc.txwin_size      = L2CAP_DEFAULT_TX_WINDOW",
      "rfc.retrans_timeout = 0",
      "rfc.monitor_timeout = 0",
      "rfc.max_pdu_size    = cpu_to_le16(L2CAP_DEFAULT_MAX_RX_APDU",
      "l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,",
      "sizeof(rfc), (unsigned long) &rfc",
      "break",
      "case L2CAP_MODE_STREAMING:",
      "rfc.mode            = L2CAP_MODE_STREAMING",
      "rfc.txwin_size      = 0",
      "rfc.max_transmit    = 0",
      "rfc.retrans_timeout = 0",
      "rfc.monitor_timeout = 0",
      "if (pi->num_conf_rsp || pi->num_conf_req",
      "goto done",
      "switch (pi->mode)",
      "case L2CAP_MODE_STREAMING:",
      "case L2CAP_MODE_ERTM:",
      "pi->conf_state |= L2CAP_CONF_STATE2_DEVICE",
      "if (!l2cap_mode_supported(pi->mode, pi->conn->feat_mask",
      "return -ECONNREFUSED",
      "break",
      "default:",
      "pi->mode = l2cap_select_mode(rfc.mode, pi->conn->feat_mask",
      "break",
      "done:",
      "if (pi->mode != rfc.mode)",
      "result = L2CAP_CONF_UNACCEPT",
      "rfc.mode = pi->mode",
      "if (pi->num_conf_rsp == 1",
      "return -ECONNREFUSED",
      "l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,",
      "sizeof(rfc), (unsigned long) &rfc",
      "if (mtu < L2CAP_DEFAULT_MIN_MTU",
      "result = L2CAP_CONF_UNACCEPT",
      "else",
      "pi->omtu = mtu",
      "pi->conf_state |= L2CAP_CONF_MTU_DONE",
      "l2cap_add_conf_opt(&ptr, L2CAP_CONF_MTU, 2, pi->omtu",
      "switch (rfc.mode)",
      "case L2CAP_MODE_BASIC:",
      "pi->fcs = L2CAP_FCS_NONE",
      "pi->conf_state |= L2CAP_CONF_MODE_DONE",
      "break",
      "case L2CAP_MODE_ERTM:",
      "pi->remote_tx_win = rfc.txwin_size",
      "pi->remote_max_tx = rfc.max_transmit",
      "pi->max_pdu_size = rfc.max_pdu_size",
      "rfc.retrans_timeout = L2CAP_DEFAULT_RETRANS_TO",
      "rfc.monitor_timeout = L2CAP_DEFAULT_MONITOR_TO",
      "pi->conf_state |= L2CAP_CONF_MODE_DONE",
      "break",
      "case L2CAP_MODE_STREAMING:",
      "pi->remote_tx_win = rfc.txwin_size",
      "pi->max_pdu_size = rfc.max_pdu_size",
      "pi->conf_state |= L2CAP_CONF_MODE_DONE",
      "break",
      "default:",
      "rfc.mode = pi->mode",
      "l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,",
      "if (result == L2CAP_CONF_SUCCESS",
      "pi->conf_state |= L2CAP_CONF_OUTPUT_DONE",
      "static int l2cap_parse_conf_rsp(struct sock *sk, void *rsp, int len, void *data, u16 *result",
      "struct l2cap_pinfo *pi = l2cap_pi(sk",
      "struct l2cap_conf_req *req = data",
      "void *ptr = req->data",
      "int type, olen",
      "unsigned long val",
      "struct l2cap_conf_rfc rfc",
      "BT_DBG(\"sk %p, rsp %p, len %d, req %p\", sk, rsp, len, data",
      "while (len >= L2CAP_CONF_OPT_SIZE)",
      "len -= l2cap_get_conf_opt(&rsp, &type, &olen, &val",
      "switch (type)",
      "case L2CAP_CONF_MTU:",
      "if (val < L2CAP_DEFAULT_MIN_MTU)",
      "pi->omtu = L2CAP_DEFAULT_MIN_MTU",
      "} else",
      "pi->omtu = val",
      "l2cap_add_conf_opt(&ptr, L2CAP_CONF_MTU, 2, pi->omtu",
      "break",
      "case L2CAP_CONF_FLUSH_TO:",
      "pi->flush_to = val",
      "l2cap_add_conf_opt(&ptr, L2CAP_CONF_FLUSH_TO,",
      "2, pi->flush_to",
      "break",
      "case L2CAP_CONF_RFC:",
      "if (olen == sizeof(rfc",
      "memcpy(&rfc, (void *)val, olen",
      "if ((pi->conf_state & L2CAP_CONF_STATE2_DEVICE) &&",
      "rfc.mode != pi->mode",
      "return -ECONNREFUSED",
      "pi->mode = rfc.mode",
      "pi->fcs = 0",
      "l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,",
      "sizeof(rfc), (unsigned long) &rfc",
      "break",
      "if (*result == L2CAP_CONF_SUCCESS)",
      "switch (rfc.mode)",
      "case L2CAP_MODE_ERTM:",
      "pi->remote_tx_win   = rfc.txwin_size",
      "pi->retrans_timeout = rfc.retrans_timeout",
      "pi->monitor_timeout = rfc.monitor_timeout",
      "pi->max_pdu_size    = le16_to_cpu(rfc.max_pdu_size",
      "break",
      "case L2CAP_MODE_STREAMING:",
      "pi->max_pdu_size    = le16_to_cpu(rfc.max_pdu_size",
      "break",
      "req->dcid   = cpu_to_le16(pi->dcid",
      "req->flags  = cpu_to_le16(0x0000",
      "return ptr - data",
      "l2cap_pi(sk)->num_conf_req++",
      "if (len < 0)",
      "struct l2cap_disconn_req req",
      "req.dcid = cpu_to_le16(l2cap_pi(sk)->dcid",
      "req.scid = cpu_to_le16(l2cap_pi(sk)->scid",
      "l2cap_send_cmd(conn, l2cap_get_ident(conn),",
      "L2CAP_DISCONN_REQ, sizeof(req), &req",
      "l2cap_pi(sk)->num_conf_rsp++",
      "l2cap_pi(sk)->num_conf_req++",
      "if (l2cap_pi(sk)->num_conf_rsp <= L2CAP_CONF_MAX_CONF_RSP)",
      "int len = cmd->len - sizeof(*rsp",
      "char req[64]",
      "result = L2CAP_CONF_SUCCESS",
      "len = l2cap_parse_conf_rsp(sk, rsp->data,",
      "len, req, &result",
      "if (len < 0)",
      "struct l2cap_disconn_req req",
      "req.dcid = cpu_to_le16(l2cap_pi(sk)->dcid",
      "req.scid = cpu_to_le16(l2cap_pi(sk)->scid",
      "l2cap_send_cmd(conn, l2cap_get_ident(conn),",
      "L2CAP_DISCONN_REQ, sizeof(req), &req",
      "goto done",
      "l2cap_send_cmd(conn, l2cap_get_ident(conn),",
      "L2CAP_CONF_REQ, len, req",
      "l2cap_pi(sk)->num_conf_req++",
      "if (result != L2CAP_CONF_SUCCESS",
      "goto done",
      "break"
    ],
    "removed_lines": [
      "struct l2cap_conf_rfc rfc = { .mode = L2CAP_MODE_BASIC",
      "rfc.txwin_size      = L2CAP_DEFAULT_RX_WINDOW",
      "rfc.retrans_timeout = cpu_to_le16(L2CAP_DEFAULT_RETRANS_TO",
      "rfc.monitor_timeout = cpu_to_le16(L2CAP_DEFAULT_MONITOR_TO",
      "if (rfc.mode == L2CAP_MODE_BASIC)",
      "if (mtu < pi->omtu",
      "result = L2CAP_CONF_UNACCEPT",
      "else",
      "pi->omtu = mtu",
      "pi->conf_state |= L2CAP_CONF_OUTPUT_DONE",
      "l2cap_add_conf_opt(&ptr, L2CAP_CONF_MTU, 2, pi->omtu",
      "} else",
      "rfc.mode = L2CAP_MODE_BASIC",
      "l2cap_add_conf_opt(&ptr, L2CAP_CONF_RFC,",
      "if (len < 0",
      "if (++l2cap_pi(sk)->conf_retry < L2CAP_CONF_MAX_RETRIES)",
      "char req[128]",
      "l2cap_send_cmd(conn, l2cap_get_ident(conn), L2CAP_CONF_REQ,",
      "l2cap_build_conf_req(sk, req), req",
      "goto done"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 8.3,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "RETURN",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "SIZE_CHECK",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "INDEX_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "SIZE_CHECK",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "SIZE_CHECK",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "SIZE_CHECK",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "SIZE_CHECK",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "stack overflow",
      "code execution"
    ]
  },
  {
    "index": 939,
    "id": "CVE-2017-1000249",
    "commit_id": "35c94dc6acc418f1ad7f6241a6680e5327495793",
    "added_lines": [
      "FILE_RCSID(\"@(#)$File: readelf.c,v 1.138 2017/08/27 07:55:02 christos Exp $\"",
      "type == NT_GNU_BUILD_ID && (descsz >= 4 && descsz <= 20))"
    ],
    "removed_lines": [
      "FILE_RCSID(\"@(#)$File: readelf.c,v 1.137 2017/08/13 00:21:47 christos Exp $\"",
      "type == NT_GNU_BUILD_ID && (descsz >= 4 || descsz <= 20))"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 2.1,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "overwrite a fixed 20 bytes stack buffer"
    ]
  },
  {
    "index": 945,
    "id": "CVE-2017-1000198",
    "commit_id": "61bd03e600d2abf309173e9186f4d465bb1b7157",
    "added_lines": [],
    "removed_lines": [
      "static bool glfs_check_config(const char *cfgstring, char **reason",
      "char *path",
      "glfs_t *fs = NULL",
      "glfs_fd_t *gfd = NULL",
      "gluster_server *hosts = NULL;",
      "bool result = true",
      "path = strchr(cfgstring, '/'",
      "if (!path)",
      "if (asprintf(reason, \"No path found\") == -1",
      "result = false",
      "goto done",
      "path += 1;",
      "fs = tcmu_create_glfs_object(path, &hosts",
      "if (!fs)",
      "tcmu_err(\"tcmu_create_glfs_object failed\\n\"",
      "goto done",
      "gfd = glfs_open(fs, hosts->path, ALLOWED_BSOFLAGS",
      "if (!gfd)",
      "if (asprintf(reason, \"glfs_open failed: %m\") == -1",
      "result = false",
      "goto unref",
      "if (glfs_access(fs, hosts->path, R_OK|W_OK) == -1)",
      "if (asprintf(reason, \"glfs_access file not present, or not writable\") == -1",
      "result = false",
      "goto unref",
      "goto done",
      "unref:",
      "gluster_cache_refresh(fs, path",
      "done:",
      "if (gfd",
      "glfs_close(gfd",
      "gluster_free_server(&hosts",
      "return result",
      ".check_config \t= glfs_check_config,"
    ],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "MEM_COPY",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "MEM_COPY",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "invalid memory references"
    ]
  },
  {
    "index": 948,
    "id": "CVE-2017-17857",
    "commit_id": "ea25f914dc164c8d56b36147ecc86bc65f83c469",
    "added_lines": [
      "return -EACCES"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "mishandling of invalid variable stack read operations"
    ]
  },
  {
    "index": 949,
    "id": "CVE-2017-17856",
    "commit_id": "a5ec6ae161d72f01411169a938fa5f8baea16e8f",
    "added_lines": [
      "strict = true"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "the lack of stack-pointer alignment enforcement"
    ]
  },
  {
    "index": 950,
    "id": "CVE-2017-17855",
    "commit_id": "179d1c5602997fef5a940c6ddcf31212cbfebd14",
    "added_lines": [
      "return false"
    ],
    "removed_lines": [
      "return rold->umin_value == 0 &&",
      "rold->umax_value == U64_MAX &&",
      "rold->smin_value == S64_MIN &&",
      "rold->smax_value == S64_MAX &&",
      "tnum_is_unknown(rold->var_off"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "improper use of pointers in place of scalars"
    ]
  },
  {
    "index": 951,
    "id": "CVE-2017-17854",
    "commit_id": "bb7f0f989ca7de1153bd128a40a71709e339fa03",
    "added_lines": [
      "static bool check_reg_sane_offset(struct bpf_verifier_env *env,",
      "const struct bpf_reg_state *reg,",
      "enum bpf_reg_type type",
      "bool known = tnum_is_const(reg->var_off",
      "s64 val = reg->var_off.value",
      "s64 smin = reg->smin_value",
      "if (known && (val >= BPF_MAX_VAR_OFF || val <= -BPF_MAX_VAR_OFF))",
      "verbose(env, \"math between %s pointer and %lld is not allowed\\n\",",
      "reg_type_str[type], val",
      "return false",
      "if (reg->off >= BPF_MAX_VAR_OFF || reg->off <= -BPF_MAX_VAR_OFF)",
      "verbose(env, \"%s pointer offset %d is not allowed\\n\",",
      "reg_type_str[type], reg->off",
      "return false",
      "if (smin == S64_MIN)",
      "verbose(env, \"math between %s pointer and register with unbounded min value is not allowed\\n\",",
      "reg_type_str[type]",
      "return false",
      "if (smin >= BPF_MAX_VAR_OFF || smin <= -BPF_MAX_VAR_OFF)",
      "verbose(env, \"value %lld makes %s pointer be out of bounds\\n\",",
      "smin, reg_type_str[type]",
      "return false",
      "return true",
      "if (!check_reg_sane_offset(env, off_reg, ptr_reg->type) ||",
      "!check_reg_sane_offset(env, ptr_reg, ptr_reg->type",
      "return -EINVAL",
      "if (!check_reg_sane_offset(env, dst_reg, ptr_reg->type",
      "return -EINVAL",
      "if (!src_known &&",
      "opcode != BPF_ADD && opcode != BPF_SUB && opcode != BPF_AND)",
      "__mark_reg_unknown(dst_reg",
      "return 0"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 952,
    "id": "CVE-2017-17853",
    "commit_id": "4374f256ce8182019353c0c639bb8d0695b4c941",
    "added_lines": [
      "dst_reg->smin_value = S64_MIN",
      "dst_reg->smax_value = S64_MAX"
    ],
    "removed_lines": [
      "if (dst_reg->smin_value < 0)",
      "if (umin_val)",
      "dst_reg->smin_value = 0",
      "} else",
      "dst_reg->smin_value = S64_MIN",
      "dst_reg->smax_value = S64_MAX",
      "} else",
      "dst_reg->smin_value =",
      "(u64)(dst_reg->smin_value) >> umax_val"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "incorrect BPF_RSH signed bounds calculations"
    ]
  },
  {
    "index": 953,
    "id": "CVE-2017-17852",
    "commit_id": "468f6eafa6c44cb2c5d8aad35e12f06c240a812a",
    "added_lines": [
      "u64 insn_bitness = (BPF_CLASS(insn->code) == BPF_ALU64) ? 64 : 32",
      "if (umax_val >= insn_bitness)",
      "if (umax_val >= insn_bitness)",
      "if (BPF_CLASS(insn->code) != BPF_ALU64)",
      "coerce_reg_to_size(dst_reg, 4",
      "coerce_reg_to_size(&src_reg, 4"
    ],
    "removed_lines": [
      "if (BPF_CLASS(insn->code) != BPF_ALU64)",
      "coerce_reg_to_size(dst_reg, 4",
      "coerce_reg_to_size(&src_reg, 4",
      "if (umax_val > 63)",
      "if (umax_val > 63)"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "mishandling of 32-bit ALU ops"
    ]
  },
  {
    "index": 955,
    "id": "CVE-2017-17806",
    "commit_id": "af3ff8045bbf3e32f1a448542e73abb4c8ceb6f1",
    "added_lines": [
      "int shash_no_setkey(struct crypto_shash *tfm, const u8 *key,",
      "unsigned int keylen",
      "static inline bool crypto_shash_alg_has_setkey(struct shash_alg *alg",
      "return alg->setkey != shash_no_setkey"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 957,
    "id": "CVE-2017-17760",
    "commit_id": "7bbe1a53cfc097b82b1589f7915a2120de39274c",
    "added_lines": [
      "memcpy(data, src, img.elemSize1()*m_width"
    ],
    "removed_lines": [
      "memcpy( data, src, CV_ELEM_SIZE1(m_type)*m_width"
    ],
    "cause": [
      "Memory Management",
      "Logical Flaws"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "incorrect size",
      "buffer overflow"
    ]
  },
  {
    "index": 965,
    "id": "CVE-2017-16996",
    "commit_id": "0c17d1d2c61936401f4702e1846e2c19b200f958",
    "added_lines": [
      "static void coerce_reg_to_size(struct bpf_reg_state *reg, int size",
      "u64 mask",
      "reg->var_off = tnum_cast(reg->var_off, size",
      "mask = ((u64)1 << (size * 8)) - 1",
      "if ((reg->umin_value & ~mask) == (reg->umax_value & ~mask))",
      "reg->umin_value &= mask",
      "reg->umax_value &= mask",
      "} else",
      "reg->umin_value = 0",
      "reg->umax_value = mask",
      "reg->smin_value = reg->umin_value",
      "reg->smax_value = reg->umax_value",
      "coerce_reg_to_size(&regs[value_regno], size",
      "coerce_reg_to_size(dst_reg, 4",
      "coerce_reg_to_size(&src_reg, 4",
      "coerce_reg_to_size(&regs[insn->dst_reg], 4"
    ],
    "removed_lines": [
      "regs[value_regno].var_off =",
      "tnum_cast(regs[value_regno].var_off, size",
      "__update_reg_bounds(&regs[value_regno]",
      "static void coerce_reg_to_32(struct bpf_reg_state *reg",
      "reg->var_off = tnum_cast(reg->var_off, 4",
      "__update_reg_bounds(reg",
      "coerce_reg_to_32(dst_reg",
      "coerce_reg_to_32(&src_reg",
      "regs[insn->dst_reg].var_off = tnum_cast",
      "regs[insn->dst_reg].var_off, 4",
      "__update_reg_bounds(&regs[insn->dst_reg]"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "register truncation mishandling"
    ]
  },
  {
    "index": 966,
    "id": "CVE-2017-16995",
    "commit_id": "95a762e2c8c942780948091f8f2a4f32fce1ac6f",
    "added_lines": [
      "if (BPF_CLASS(insn->code) == BPF_ALU64)",
      "__mark_reg_known(regs + insn->dst_reg,",
      "insn->imm",
      "} else",
      "__mark_reg_known(regs + insn->dst_reg,",
      "(u32)insn->imm"
    ],
    "removed_lines": [
      "__mark_reg_known(regs + insn->dst_reg, insn->imm"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "incorrect sign extension"
    ]
  },
  {
    "index": 970,
    "id": "CVE-2017-16931",
    "commit_id": "e26630548e7d138d2c560844c43820b6767251e3",
    "added_lines": [
      "<!ENTITY % ent \"value\">",
      "%\u00e4%ent"
    ],
    "removed_lines": [],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "mishandles parameter-entity references"
    ]
  },
  {
    "index": 974,
    "id": "CVE-2017-16803",
    "commit_id": "cd4663dc80323ba64989d0c103d51ad3ee0e9c2f",
    "added_lines": [
      "#define SMKTREE_DECODE_MAX_RECURSION 32",
      "if (length > SMKTREE_DECODE_MAX_RECURSION)",
      "av_log(NULL, AV_LOG_ERROR, \"Maximum tree recursion level exceeded.\\n\"",
      "return AVERROR_INVALIDDATA"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "recursion",
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 978,
    "id": "CVE-2017-16546",
    "commit_id": "2130bf6f89ded32ef0c88a11694f107c52566c53",
    "added_lines": [
      "(Rec2.RecordLength-2-2)/3",
      "ThrowReaderException(CorruptImageError,\"InvalidColormapIndex\"",
      "if (WPG_Palette.StartIndex > WPG_Palette.NumOfEntries"
    ],
    "removed_lines": [
      "(Rec2.RecordLength-2-2) / 3"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly validate the colormap index in a WPG palette",
      "uninitialized data"
    ]
  },
  {
    "index": 980,
    "id": "CVE-2017-16534",
    "commit_id": "2e1c42391ff2556387b3cb6308b24f6f65619feb",
    "added_lines": [
      "if ((buflen < elength) || (elength < 3))",
      "dev_err(&intf->dev, \"invalid descriptor buffer length\\n\"",
      "break"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 983,
    "id": "CVE-2017-16531",
    "commit_id": "bd7a3fe770ebd8391d1c7d072ff88e9e76d063eb",
    "added_lines": [
      "#define USB_DT_INTERFACE_ASSOCIATION_SIZE\t8"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 988,
    "id": "CVE-2017-16526",
    "commit_id": "bbf26183b7a6236ba602f4d6a2f7cade35bba043",
    "added_lines": [
      "struct task_struct *task = kthread_run(uwbd, rc, \"uwbd\"",
      "if (IS_ERR(task))",
      "rc->uwbd.task = NULL",
      "} else",
      "rc->uwbd.task = task",
      "if (rc->uwbd.task",
      "kthread_stop(rc->uwbd.task"
    ],
    "removed_lines": [
      "rc->uwbd.task = kthread_run(uwbd, rc, \"uwbd\"",
      "if (rc->uwbd.task == NULL",
      "else",
      "kthread_stop(rc->uwbd.task"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 992,
    "id": "CVE-2017-16357",
    "commit_id": "0b973e28166636e0ff1fad80baa0385c9c09c53a",
    "added_lines": [
      "if (shdr->sh_size < 1 || shdr->sh_size > SIZE_MAX)",
      "if (shdr->sh_size < 1 || shdr->sh_size > SIZE_MAX)"
    ],
    "removed_lines": [
      "if (shdr->sh_size < 1)",
      "if (shdr->sh_size < 1)"
    ],
    "cause": [
      "Uncategorized Cluster 7"
    ],
    "effect": " Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "invalid free"
    ]
  },
  {
    "index": 1002,
    "id": "CVE-2017-15385",
    "commit_id": "21a6f570ba33fa9f52f1bba87f07acc4e8c178f4",
    "added_lines": [
      "for (cnt = 0, i = 0; i >= 0 && cnt < shdr->sh_info && ((char *)defs + i < end); ++cnt)",
      "if ((st32)verdef->vd_next < 1)",
      "eprintf (\"Warning: Invalid vd_next in the ELF version\\n\"",
      "break"
    ],
    "removed_lines": [
      "for (cnt = 0, i = 0; cnt < shdr->sh_info && ((char *)defs + i < end); ++cnt)"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "invalid write"
    ]
  },
  {
    "index": 1012,
    "id": "CVE-2017-15088",
    "commit_id": "fbb687db1088ddd894d975996e5f6a4252b9a2b4",
    "added_lines": [
      "static krb5_error_code",
      "rfc2253_name(X509_NAME *name, char **str_out",
      "BIO *b = NULL",
      "char *str",
      "b = BIO_new(BIO_s_mem",
      "if (b == NULL",
      "return ENOMEM",
      "if (X509_NAME_print_ex(b, name, 0, XN_FLAG_SEP_COMMA_PLUS) < 0",
      "goto error",
      "str = calloc(BIO_number_written(b) + 1, 1",
      "if (str == NULL",
      "goto error",
      "BIO_read(b, str, BIO_number_written(b",
      "BIO_free(b",
      "return 0",
      "error:",
      "BIO_free(b",
      "return ENOMEM",
      "ret = rfc2253_name(X509_get_subject_name(cert), &md->subject_dn",
      "if (ret",
      "ret = rfc2253_name(X509_get_issuer_name(cert), &md->issuer_dn",
      "if (ret"
    ],
    "removed_lines": [
      "static char *",
      "X509_NAME_oneline_ex(X509_NAME * a,",
      "char *buf,",
      "unsigned int *size,",
      "unsigned long flag",
      "BIO *out = NULL",
      "out = BIO_new(BIO_s_mem",
      "if (X509_NAME_print_ex(out, a, 0, flag) > 0)",
      "if (buf != NULL && (*size) >  (unsigned int) BIO_number_written(out))",
      "memset(buf, 0, *size",
      "BIO_read(out, buf, (int) BIO_number_written(out",
      "else",
      "BIO_free(out",
      "return (buf",
      "char buf[DN_BUF_LEN]",
      "unsigned int bufsize = sizeof(buf",
      "X509_NAME_oneline_ex(X509_get_subject_name(cert), buf, &bufsize,",
      "XN_FLAG_SEP_COMMA_PLUS",
      "md->subject_dn = strdup(buf",
      "if (md->subject_dn == NULL)",
      "ret = ENOMEM",
      "X509_NAME_oneline_ex(X509_get_issuer_name(cert), buf, &bufsize,",
      "XN_FLAG_SEP_COMMA_PLUS",
      "md->issuer_dn = strdup(buf",
      "if (md->issuer_dn == NULL)",
      "ret = ENOMEM"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "MEM_ALLOC",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_ZERO",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "INDEX_OP",
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1017,
    "id": "CVE-2017-14767",
    "commit_id": "c42a1388a6d1bfd8001bf6a4241d8ca27e49326d",
    "added_lines": [
      "if (*value == 0 || value[strlen(value) - 1] == ',')"
    ],
    "removed_lines": [
      "if (value[strlen(value) - 1] == ',')"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1018,
    "id": "CVE-2017-14727",
    "commit_id": "f105c6f0b56fb5687b2d2aedf37cb1d1b434d556",
    "added_lines": [
      "char *mask2, *mask3, *mask4, *mask5, *mask6, *mask7",
      "mask3 = NULL",
      "mask4 = NULL",
      "mask5 = NULL",
      "mask6 = NULL",
      "mask7 = NULL",
      "length = strlen (mask) + 256 + 1",
      "mask2 = malloc (length",
      "if (!mask2",
      "goto end",
      "seconds = time (NULL",
      "date_tmp = localtime (&seconds",
      "mask2[0] = '\\0'",
      "if (strftime (mask2, length - 1, mask, date_tmp) == 0",
      "mask2[0] = '\\0'",
      "mask3 = weechat_string_replace (mask2, dir_separator, \"\\01\"",
      "if (!mask3",
      "mask4 = weechat_buffer_string_replace_local_var (buffer, mask3",
      "if (!mask4",
      "mask5 = weechat_string_replace (mask4,",
      "dir_separator,",
      "weechat_config_string (logger_config_file_replacement_char",
      "if (!mask5",
      "mask6 = weechat_string_replace (mask5, \"\\\\\",",
      "weechat_config_string (logger_config_file_replacement_char",
      "mask6 = strdup (mask5",
      "if (!mask6",
      "mask7 = weechat_string_replace (mask6,",
      "\"\\01\", dir_separator",
      "if (!mask7",
      "weechat_string_tolower (mask7",
      "mask, mask7",
      "if (mask3",
      "free (mask3",
      "if (mask4",
      "free (mask4",
      "if (mask5",
      "free (mask5",
      "if (mask6",
      "free (mask6",
      "return mask7"
    ],
    "removed_lines": [
      "char *mask2, *mask_decoded, *mask_decoded2, *mask_decoded3, *mask_decoded4",
      "char *mask_decoded5",
      "mask_decoded = NULL",
      "mask_decoded2 = NULL",
      "mask_decoded3 = NULL",
      "mask_decoded4 = NULL",
      "mask_decoded5 = NULL",
      "mask2 = weechat_string_replace (mask, dir_separator, \"\\01\"",
      "if (!mask2",
      "mask_decoded = weechat_buffer_string_replace_local_var (buffer, mask2",
      "if (!mask_decoded",
      "mask_decoded2 = weechat_string_replace (mask_decoded,",
      "dir_separator,",
      "weechat_config_string (logger_config_file_replacement_char",
      "if (!mask_decoded2",
      "mask_decoded3 = weechat_string_replace (mask_decoded2, \"\\\\\",",
      "weechat_config_string (logger_config_file_replacement_char",
      "mask_decoded3 = strdup (mask_decoded2",
      "if (!mask_decoded3",
      "mask_decoded4 = weechat_string_replace (mask_decoded3,",
      "\"\\01\", dir_separator",
      "if (!mask_decoded4",
      "goto end",
      "length = strlen (mask_decoded4) + 256 + 1",
      "mask_decoded5 = malloc (length",
      "if (!mask_decoded5",
      "seconds = time (NULL",
      "date_tmp = localtime (&seconds",
      "mask_decoded5[0] = '\\0'",
      "strftime (mask_decoded5, length - 1, mask_decoded4, date_tmp",
      "weechat_string_tolower (mask_decoded5",
      "mask, mask_decoded5",
      "if (mask_decoded",
      "free (mask_decoded",
      "if (mask_decoded2",
      "free (mask_decoded2",
      "if (mask_decoded3",
      "free (mask_decoded3",
      "if (mask_decoded4",
      "free (mask_decoded4",
      "return mask_decoded5"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_ALLOC",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "MEM_FREE",
      "CONTROL_FLOW",
      "MEM_FREE",
      "CONTROL_FLOW",
      "MEM_FREE",
      "CONTROL_FLOW",
      "MEM_FREE",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_ALLOC",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "MEM_FREE",
      "CONTROL_FLOW",
      "MEM_FREE",
      "CONTROL_FLOW",
      "MEM_FREE",
      "CONTROL_FLOW",
      "MEM_FREE",
      "RETURN"
    ],
    "vuln": "Overflow ",
    "summary": [
      "because a buffer is not initialized"
    ]
  },
  {
    "index": 1030,
    "id": "CVE-2017-14497",
    "commit_id": "edbd58be15a957f6a760c4a514cd475217eb97fd",
    "added_lines": [
      "bool do_vnet = false",
      "if (po->has_vnet_hdr)",
      "do_vnet = true",
      "if ((int)snaplen < 0)",
      "do_vnet = false",
      "do_vnet = false",
      "if (do_vnet)"
    ],
    "removed_lines": [
      "if (po->has_vnet_hdr",
      "if ((int)snaplen < 0",
      "if (po->has_vnet_hdr)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1039,
    "id": "CVE-2017-14173",
    "commit_id": "48bcf7c39302cdf9b0d9202ad03bf1b95152c44d",
    "added_lines": [
      "if ((max_value == 0) || (max_value > 4294967295",
      "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\"",
      "for (depth=1; (GetQuantumRange(depth)+1) < max_value; depth++)"
    ],
    "removed_lines": [
      "for (depth=1; (GetQuantumRange(depth)+1) < max_value; depth++",
      "if (depth >= 64",
      "break"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "infinite loop",
      "integer overflow"
    ]
  },
  {
    "index": 1045,
    "id": "CVE-2017-14164",
    "commit_id": "dcac91b8c72f743bda7dbfa9032356bc8110098a",
    "added_lines": [
      "OPJ_UINT32 p_total_data_size,",
      "OPJ_UINT32 p_total_data_size,",
      "if (p_total_data_size < 12)",
      "opj_event_msg(p_manager, EVT_ERROR,",
      "\"Not enough bytes in output buffer to write SOT marker\\n\"",
      "return OPJ_FALSE",
      "if (! opj_j2k_write_sot(p_j2k, p_data, p_total_data_size,",
      "&l_current_nb_bytes_written, p_stream,",
      "if (! opj_j2k_write_sot(p_j2k, p_data,",
      "p_total_data_size,",
      "&l_current_nb_bytes_written,",
      "p_stream,",
      "if (! opj_j2k_write_sot(p_j2k, p_data,",
      "p_total_data_size,",
      "&l_current_nb_bytes_written, p_stream,"
    ],
    "removed_lines": [
      "if (! opj_j2k_write_sot(p_j2k, p_data, &l_current_nb_bytes_written, p_stream,",
      "if (! opj_j2k_write_sot(p_j2k, p_data, &l_current_nb_bytes_written, p_stream,",
      "if (! opj_j2k_write_sot(p_j2k, p_data, &l_current_nb_bytes_written, p_stream,"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "INDEX_OP",
      "INDEX_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "INDEX_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds write",
      "code execution"
    ]
  },
  {
    "index": 1046,
    "id": "CVE-2017-14152",
    "commit_id": "4241ae6fbbf1de9658764a80944dc8108f2b4154",
    "added_lines": [
      "if (parameters->numresolution == 1)",
      "parameters->res_spec = 1",
      "parameters->prcw_init[0] = 128",
      "parameters->prch_init[0] = 128",
      "} else",
      "parameters->res_spec = parameters->numresolution - 1",
      "for (i = 0; i < parameters->res_spec; i++)",
      "parameters->prcw_init[i] = 256",
      "parameters->prch_init[i] = 256"
    ],
    "removed_lines": [
      "parameters->res_spec = parameters->numresolution - 1",
      "for (i = 0; i < parameters->res_spec; i++)",
      "parameters->prcw_init[i] = 256",
      "parameters->prch_init[i] = 256"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds write",
      "code execution"
    ]
  },
  {
    "index": 1047,
    "id": "CVE-2017-14151",
    "commit_id": "afb308b9ccbe129608c9205cf3bb39bbefad90b9",
    "added_lines": [
      "opj_compress -i @INPUT_NR_PATH@/issue982.bmp -o @TEMP_PATH@/issue982.j2k -n 1"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "out-of-bounds",
      "off-by-one",
      "buffer overflow",
      "out-of-bounds write",
      "code execution",
      "off-by-one error"
    ]
  },
  {
    "index": 1049,
    "id": "CVE-2017-14107",
    "commit_id": "9b46957ec98d85a572e9ef98301247f39338a3b5",
    "added_lines": [
      "if (offset+size > buf_offset + eocd_offset)",
      "zip_error_set(error, ZIP_ER_INCONS, 0",
      "return NULL",
      "if ((flags & ZIP_CHECKCONS) && offset+size != buf_offset + eocd_offset)"
    ],
    "removed_lines": [
      "if ((flags & ZIP_CHECKCONS) && offset+size != eocd_offset)"
    ],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "memory allocation failure"
    ]
  },
  {
    "index": 1057,
    "id": "CVE-2017-14041",
    "commit_id": "e5285319229a5d77bf316bb0d3a6cbd3cb8666d9",
    "added_lines": [
      "if (fscanf(f, \"PG%31[ \\t]%c%c%31[ \\t+-]%d%31[ \\t]%d%31[ \\t]%d\", temp, &endian1,"
    ],
    "removed_lines": [
      "if (fscanf(f, \"PG%[ \\t]%c%c%[ \\t+-]%d%[ \\t]%d%[ \\t]%d\", temp, &endian1,"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds write",
      "code execution"
    ]
  },
  {
    "index": 1059,
    "id": "CVE-2017-14039",
    "commit_id": "c535531f03369623b9b833ef41952c62257b507e",
    "added_lines": [
      "if (length < 6)",
      "if (p_t2_mode == FINAL_PASS)",
      "opj_event_msg(p_manager, EVT_ERROR,",
      "\"opj_t2_encode_packet(): only %u bytes remaining in \"",
      "\"output buffer. %u needed.\\n\",",
      "length, 6",
      "return OPJ_FALSE",
      "if (length < 2)",
      "if (p_t2_mode == FINAL_PASS)",
      "opj_event_msg(p_manager, EVT_ERROR,",
      "\"opj_t2_encode_packet(): only %u bytes remaining in \"",
      "\"output buffer. %u needed.\\n\",",
      "length, 2",
      "return OPJ_FALSE"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "RETURN",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds write"
    ]
  },
  {
    "index": 1122,
    "id": "CVE-2017-13011",
    "commit_id": "9f0730bee3eb65d07b49fd468bc2f269173352fe",
    "added_lines": [
      "static char buf[1024+1];",
      "char *bufp = buf",
      "size_t space_left = sizeof(buf), string_size",
      "if (space_left <= 1",
      "return (buf);",
      "string_size = strlcpy(bufp, sepstr, space_left",
      "if (string_size >= space_left",
      "return (buf);",
      "bufp += string_size",
      "space_left -= string_size",
      "if (space_left <= 1",
      "return (buf);",
      "string_size = strlcpy(bufp, lp->s, space_left",
      "if (string_size >= space_left",
      "return (buf);",
      "bufp += string_size",
      "space_left -= string_size",
      "if (bufp == buf"
    ],
    "removed_lines": [
      "static char buf[256];",
      "int buflen=0",
      "buflen+=snprintf(buf+buflen, sizeof(buf)-buflen, \"%s%s\",",
      "sepstr, lp->s",
      "if (buflen == 0"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "INDEX_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1149,
    "id": "CVE-2017-12982",
    "commit_id": "baf0c1ad4572daa89caa3b12985bdd93530f0dd7",
    "added_lines": [
      "if (header->biBitCount == 0)",
      "fprintf(stderr, \"Error, invalid biBitCount %d\\n\", 0",
      "return OPJ_FALSE"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "memory allocation failure"
    ]
  },
  {
    "index": 1163,
    "id": "CVE-2017-12876",
    "commit_id": "1cc6f0ccc92c20c7cab6c4a7335daf29c91f0d8e",
    "added_lines": [
      "#include \"MagickCore/cache-private.h\"",
      "if (SyncImagePixelCache(image,exception) == MagickFalse",
      "return(MagickFalse",
      "if (SyncImagePixelCache(image,exception) == MagickFalse",
      "return(MagickFalse"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1190,
    "id": "CVE-2017-11721",
    "commit_id": "d2b1d124d4055c2fcbe5126863487c52fd58cca1",
    "added_lines": [
      "void\tHuff_transmit (huff_t *huff, int ch, byte *fout, int maxoffset",
      "void\tHuff_offsetReceive (node_t *node, int *ch, byte *fin, int *offset, int maxoffset",
      "void\tHuff_offsetTransmit (huff_t *huff, int ch, byte *fout, int *offset, int maxoffset"
    ],
    "removed_lines": [
      "void\tHuff_transmit (huff_t *huff, int ch, byte *fout",
      "void\tHuff_offsetReceive (node_t *node, int *ch, byte *fin, int *offset",
      "void\tHuff_offsetTransmit (huff_t *huff, int ch, byte *fout, int *offset"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "ioquake3"
    ]
  },
  {
    "index": 1202,
    "id": "CVE-2017-11399",
    "commit_id": "ba4beaf6149f7241c8bd85fe853318c2f6837ad0",
    "added_lines": [
      "uint64_t decoded_buffer_size",
      "if (!nblocks || nblocks > INT_MAX / 2 / sizeof(*s->decoded_buffer) - 8)",
      "decoded_buffer_size = 2LL * FFALIGN(blockstodecode, 8) * sizeof(*s->decoded_buffer",
      "av_assert0(decoded_buffer_size <= INT_MAX",
      "av_fast_malloc(&s->decoded_buffer, &s->decoded_size, decoded_buffer_size"
    ],
    "removed_lines": [
      "if (!nblocks || nblocks > INT_MAX)",
      "av_fast_malloc(&s->decoded_buffer, &s->decoded_size,",
      "2 * FFALIGN(blockstodecode, 8) * sizeof(*s->decoded_buffer"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-array access",
      "integer overflow"
    ]
  },
  {
    "index": 1204,
    "id": "CVE-2017-11328",
    "commit_id": "4a342f01e5439b9bb901aff1c6c23c536baeeb3f",
    "added_lines": [
      "assert_true_rule",
      "\"import \\\"tests\\\" \\",
      "rule test { \\",
      "condition: tests.integer_array[256] == 256 \\",
      "}\",",
      "NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1210,
    "id": "CVE-2017-10929",
    "commit_id": "c57997e76ec70862174a1b3b3aeb62a6f8570e85",
    "added_lines": [
      "if (buf)",
      "if (pos + real_offset + len >= size)",
      "grub_errno = GRUB_ERR_BAD_FS",
      "return grub_errno"
    ],
    "removed_lines": [
      "if (buf"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONTROL_FLOW",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1214,
    "id": "CVE-2017-10671",
    "commit_id": "c0dc63a49d8605649f1d8e4a96c9b468b0bff660",
    "added_lines": [
      "(void) memmove( cp, cp + 2, strlen( cp ) - 1"
    ],
    "removed_lines": [
      "(void) memmove( cp, cp + 2, strlen( file ) - 1"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1218,
    "id": "CVE-2017-9996",
    "commit_id": "1e42736b95065c69a7481d0cf55247024f54b660",
    "added_lines": [
      "} else if (encoding == 1 && (c->bpp == 6 || c->bpp == 8) && c->format != CHUNKY)"
    ],
    "removed_lines": [
      "} else if (encoding == 1 && (c->bpp == 6 || c->bpp == 8))"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1219,
    "id": "CVE-2017-9995",
    "commit_id": "7ac5067146613997bb38442cb022d7f41321a706",
    "added_lines": [
      "if (y >= avctx->height",
      "return AVERROR_INVALIDDATA"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1220,
    "id": "CVE-2017-9994",
    "commit_id": "6b5d3fb26fb4be48e4966e4b1d97c2165538d4ef",
    "added_lines": [
      "avctx->pix_fmt = s->has_alpha ? AV_PIX_FMT_YUVA420P : AV_PIX_FMT_YUV420P"
    ],
    "removed_lines": [
      "if (s->has_alpha",
      "avctx->pix_fmt = AV_PIX_FMT_YUVA420P"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1222,
    "id": "CVE-2017-9992",
    "commit_id": "f52fbf4f3ed02a7d872d8a102006f29b4421f360",
    "added_lines": [
      "if (frame_end - frame < width + 4"
    ],
    "removed_lines": [
      "if (frame_end - frame < width + 3"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1223,
    "id": "CVE-2017-9991",
    "commit_id": "441026fcb13ac23aa10edc312bdacb6445a0ad06",
    "added_lines": [
      "if (bpp == 1 && pixdepth == 1)",
      "} else if (bpp == 8 && pixdepth == 8)"
    ],
    "removed_lines": [
      "if (pixdepth == 1)",
      "} else if (pixdepth == 8)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1224,
    "id": "CVE-2017-9990",
    "commit_id": "cb243972b121b1ae6b60a78ff55a0506c69f3879",
    "added_lines": [
      "uint8_t   *buf",
      "int        buf_size",
      "len = FFMIN(FFMAX(len, 0), sizeof(color_name) - 1",
      "const uint8_t *end, *ptr",
      "av_fast_padded_malloc(&x->buf, &x->buf_size, avpkt->size",
      "if (!x->buf",
      "return AVERROR(ENOMEM",
      "memcpy(x->buf, avpkt->data, avpkt->size",
      "x->buf[avpkt->size] = 0",
      "ptr = x->buf",
      "end = x->buf + avpkt->size",
      "while (end - ptr > 9 && memcmp(ptr, \"\", 9",
      "if (end - ptr <= 9)",
      "size *= 95",
      "if (end - ptr < 1",
      "return AVERROR_INVALIDDATA",
      "if (end - ptr < cpp",
      "if (end - ptr < 1",
      "return AVERROR_INVALIDDATA",
      "if (end - ptr < 1",
      "return AVERROR_INVALIDDATA",
      "if (end - ptr < 1",
      "return AVERROR_INVALIDDATA",
      "if (end - ptr < cpp",
      "av_freep(&x->buf",
      "x->buf_size = 0"
    ],
    "removed_lines": [
      "const uint8_t *end, *ptr = avpkt->data",
      "end = avpkt->data + avpkt->size",
      "while (memcmp(ptr, \"\", 9) && ptr < end - 9",
      "if (ptr >= end)",
      "size *= 94",
      "if (ptr + cpp > end",
      "if (ptr + cpp > end"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "MEM_COPY",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1228,
    "id": "CVE-2017-9763",
    "commit_id": "65000a7fd9eea62359e6d6714f17b94a99a82edd",
    "added_lines": [
      "grub|fs)RebuildFs;"
    ],
    "removed_lines": [
      "fs)     RebuildFs;"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "use of a variable-size stack array"
    ]
  },
  {
    "index": 1229,
    "id": "CVE-2017-9761",
    "commit_id": "00e8f205475332d7842d0f0d1481eeab4e83017c",
    "added_lines": [
      "case 'l':",
      "RBinObject *obj = r_bin_cur_object (core->bin",
      "RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs): 0",
      "break",
      "case 'i':",
      "RBinObject *obj = r_bin_cur_object (core->bin",
      "RBININFO (\"imports\", R_CORE_BIN_ACC_IMPORTS, NULL,",
      "obj? r_list_length (obj->imports): 0",
      "break"
    ],
    "removed_lines": [
      "case 'l': RBININFO (\"libs\", R_CORE_BIN_ACC_LIBS, NULL, obj? r_list_length (obj->libs): 0); break",
      "case 'i': RBININFO (\"imports\",R_CORE_BIN_ACC_IMPORTS, NULL, obj? r_list_length (obj->imports): 0); break"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 1237,
    "id": "CVE-2017-9454",
    "commit_id": "d67a9ca6fd06ca65d23e313bdbad1ef4dd3aa0df",
    "added_lines": [
      "if (aptr + rr_len > abuf + alen",
      "free(rr_name",
      "status = ARES_EBADRESP",
      "break"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_FREE"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow"
    ]
  },
  {
    "index": 1240,
    "id": "CVE-2017-9432",
    "commit_id": "2d6253c7a692a3d92785dd990fce7256ea05e794",
    "added_lines": [
      "for (int j=0; j<2; ++j) positions[j]=int(input->readULong(4"
    ],
    "removed_lines": [
      "for (int j=0; j<2; ++j) positions[i]=int(input->readULong(4"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds write"
    ]
  },
  {
    "index": 1248,
    "id": "CVE-2017-9225",
    "commit_id": "166a6c3999bf06b4de0ab4ce6b088a468cc4029f",
    "added_lines": [
      "if (code == gcode && wordlist[key].index >= 0"
    ],
    "removed_lines": [
      "if (code == gcode"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds write"
    ]
  },
  {
    "index": 1273,
    "id": "CVE-2017-8807",
    "commit_id": "176f8a075a963ffbfa56f1c460c15f6a1a6af5a7",
    "added_lines": [
      "if (l > ll",
      "l = ll"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": " +Info",
    "score": 6.4,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "Overflow +Info ",
    "summary": [
      "VFP_GetStorage buffer is larger than intended"
    ]
  },
  {
    "index": 1280,
    "id": "CVE-2017-8073",
    "commit_id": "2fb346f25f79e412cf0ed314fdf791763c19b70b",
    "added_lines": [
      "if (length > 1"
    ],
    "removed_lines": [
      "if (length > 0"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1283,
    "id": "CVE-2017-8070",
    "commit_id": "2d6a0e9de03ee658a9adc3bfb2f0ca55dff1e478",
    "added_lines": [
      "int pktsz, ret",
      "u32 *buf",
      "int i",
      "buf = kmalloc(4, GFP_KERNEL",
      "if (!buf)",
      "ret = -ENOMEM",
      "goto fail_free",
      "catc_write_mem(catc, 0x7a80, buf, 4",
      "catc_write_mem(catc, 0xfa80, buf, 4",
      "catc_read_mem(catc, 0x7a80, buf, 4",
      "switch (*buf)",
      "kfree(buf"
    ],
    "removed_lines": [
      "int i, pktsz, ret",
      "i = 0x12345678",
      "catc_write_mem(catc, 0x7a80, &i, 4",
      "i = 0x87654321",
      "catc_write_mem(catc, 0xfa80, &i, 4",
      "catc_read_mem(catc, 0x7a80, &i, 4",
      "switch (i)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1284,
    "id": "CVE-2017-8069",
    "commit_id": "7926aff5c57b577ab0f43364ff0c59d968f6a414",
    "added_lines": [
      "void *buf",
      "int ret",
      "buf = kmalloc(size, GFP_NOIO",
      "if (!buf",
      "return -ENOMEM",
      "ret = usb_control_msg(dev->udev, usb_rcvctrlpipe(dev->udev, 0),",
      "RTL8150_REQ_GET_REGS, RTL8150_REQT_READ,",
      "indx, 0, buf, size, 500",
      "if (ret > 0 && ret <= size",
      "memcpy(data, buf, ret",
      "kfree(buf",
      "return ret",
      "static int set_registers(rtl8150_t * dev, u16 indx, u16 size, const void *data",
      "void *buf",
      "int ret",
      "buf = kmemdup(data, size, GFP_NOIO",
      "if (!buf",
      "return -ENOMEM",
      "ret = usb_control_msg(dev->udev, usb_sndctrlpipe(dev->udev, 0),",
      "RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE,",
      "indx, 0, buf, size, 500",
      "kfree(buf",
      "return ret"
    ],
    "removed_lines": [
      "return usb_control_msg(dev->udev, usb_rcvctrlpipe(dev->udev, 0),",
      "RTL8150_REQ_GET_REGS, RTL8150_REQT_READ,",
      "indx, 0, data, size, 500",
      "static int set_registers(rtl8150_t * dev, u16 indx, u16 size, void *data",
      "return usb_control_msg(dev->udev, usb_sndctrlpipe(dev->udev, 0),",
      "RTL8150_REQ_SET_REGS, RTL8150_REQT_WRITE,",
      "indx, 0, data, size, 500"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "MEM_COPY",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "RETURN",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "RETURN",
      "ARITH_OP",
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1285,
    "id": "CVE-2017-8068",
    "commit_id": "5593523f968bc86d42a035c6df47d5e0979b5ace",
    "added_lines": [
      "u8 *buf",
      "buf = kmalloc(size, GFP_NOIO",
      "if (!buf",
      "return -ENOMEM",
      "indx, buf, size, 1000",
      "else if (ret <= size",
      "memcpy(data, buf, ret",
      "kfree(buf",
      "static int set_registers(pegasus_t *pegasus, __u16 indx, __u16 size,",
      "const void *data",
      "u8 *buf",
      "buf = kmemdup(data, size, GFP_NOIO",
      "if (!buf",
      "return -ENOMEM",
      "indx, buf, size, 100",
      "kfree(buf",
      "u8 *buf",
      "buf = kmemdup(&data, 1, GFP_NOIO",
      "if (!buf",
      "return -ENOMEM",
      "indx, buf, 1, 1000",
      "kfree(buf"
    ],
    "removed_lines": [
      "indx, data, size, 1000",
      "static int set_registers(pegasus_t *pegasus, __u16 indx, __u16 size, void *data",
      "indx, data, size, 100",
      "indx, &data, 1, 1000"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "INDEX_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1286,
    "id": "CVE-2017-8067",
    "commit_id": "c4baad50297d84bde1a7ad45e50c73adae4a2192",
    "added_lines": [
      "void *data",
      "int ret",
      "data = kmemdup(buf, count, GFP_ATOMIC",
      "if (!data",
      "return -ENOMEM",
      "sg_init_one(sg, data, count",
      "ret = __send_to_port(port, sg, 1, count, data, false",
      "kfree(data",
      "return ret"
    ],
    "removed_lines": [
      "sg_init_one(sg, buf, count",
      "return __send_to_port(port, sg, 1, count, (void *)buf, false"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "RETURN",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1287,
    "id": "CVE-2017-8066",
    "commit_id": "c919a3069c775c1c876bec55e00b2305d5125caa",
    "added_lines": [
      "struct gs_host_config *hconf",
      "struct gs_device_config *dconf",
      "hconf = kmalloc(sizeof(*hconf), GFP_KERNEL",
      "if (!hconf",
      "return -ENOMEM",
      "hconf->byte_order = 0x0000beef",
      "hconf,",
      "sizeof(*hconf),",
      "kfree(hconf",
      "dconf = kmalloc(sizeof(*dconf), GFP_KERNEL",
      "if (!dconf",
      "return -ENOMEM",
      "dconf,",
      "sizeof(*dconf),",
      "kfree(dconf",
      "icount = dconf->icount + 1",
      "kfree(dconf",
      "if (!dev)",
      "kfree(dconf",
      "dev->canch[i] = gs_make_candev(i, intf, dconf",
      "kfree(dconf",
      "kfree(dconf"
    ],
    "removed_lines": [
      "struct gs_host_config hconf =",
      ".byte_order = 0x0000beef,",
      "struct gs_device_config dconf",
      "&hconf,",
      "sizeof(hconf),",
      "&dconf,",
      "sizeof(dconf),",
      "icount = dconf.icount + 1",
      "if (!dev",
      "dev->canch[i] = gs_make_candev(i, intf, &dconf"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "SIZE_CHECK",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1288,
    "id": "CVE-2017-8065",
    "commit_id": "3b30460c5b0ed762be75a004e924ec3f8711e032",
    "added_lines": [
      "u8 idata[16]",
      "u8 *odata = pctx->odata",
      "u8 *idata = pctx->idata"
    ],
    "removed_lines": [
      "u8 odata[16]",
      "u8 idata[16]"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1289,
    "id": "CVE-2017-8064",
    "commit_id": "005145378c9ad7575a01b6ce1ba118fb427f583a",
    "added_lines": [
      "const char *devname = kstrdup(dev_name(&d->udev->dev), GFP_KERNEL",
      "const char *drvname = d->name",
      "pr_info(\"%s: '%s:%s' successfully deinitialized and disconnected\\n\",",
      "KBUILD_MODNAME, drvname, devname",
      "kfree(devname"
    ],
    "removed_lines": [
      "const char *name = d->name",
      "struct device dev = d->udev->dev",
      "dev_info(&dev, \"%s: '%s' successfully deinitialized and disconnected\\n\",",
      "KBUILD_MODNAME, name"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1290,
    "id": "CVE-2017-8063",
    "commit_id": "3f190e3aec212fc8c61e202c51400afa7384d4bc",
    "added_lines": [
      "int ret",
      "if (rlen > MAX_XFER_SIZE)",
      "warn(\"i2c rd: len=%d is too big!\\n\", rlen",
      "return -EOPNOTSUPP",
      "ret = dvb_usb_generic_rw(d, st->data, 1 + wlen, st->data, rlen, 0",
      "if (!ret && rbuf && rlen",
      "memcpy(rbuf, st->data, rlen"
    ],
    "removed_lines": [
      "int ret, wo",
      "wo = (rbuf == NULL || rlen == 0);",
      "if (wo",
      "ret = dvb_usb_generic_write(d, st->data, 1 + wlen",
      "else",
      "ret = dvb_usb_generic_rw(d, st->data, 1 + wlen,",
      "rbuf, rlen, 0"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "MEM_COPY",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1291,
    "id": "CVE-2017-8062",
    "commit_id": "606142af57dad981b78707234cfbd15f9f7b7125",
    "added_lines": [
      "u8 data[MAX_XFER_SIZE + 4]",
      "struct dw2102_state *state",
      "state = d->priv",
      "if (mutex_lock_interruptible(&d->data_mutex) < 0)",
      "mutex_unlock(&d->i2c_mutex",
      "return -EAGAIN",
      "state->data[0] = msg[0].buf[0] + 0x36",
      "state->data[1] = 3",
      "state->data[2] = 0",
      "if (dvb_usb_generic_rw(d, state->data, 3,",
      "state->data, 0, 0) < 0",
      "state->data[0] = 0x10",
      "if (dvb_usb_generic_rw(d, state->data, 1,",
      "state->data, 2, 0) < 0",
      "msg[0].buf[1] = state->data[0]",
      "msg[0].buf[0] = state->data[1]",
      "state->data[0] = 0x08",
      "state->data[1] = msg[0].addr",
      "state->data[2] = msg[0].len",
      "memcpy(&state->data[3], msg[0].buf, msg[0].len",
      "if (dvb_usb_generic_rw(d, state->data, msg[0].len + 3,",
      "state->data, 1, 0) < 0",
      "state->data[0] = 0x09",
      "state->data[1] = msg[0].len",
      "state->data[2] = msg[1].len",
      "state->data[3] = msg[0].addr",
      "memcpy(&state->data[4], msg[0].buf, msg[0].len",
      "if (dvb_usb_generic_rw(d, state->data, msg[0].len + 4,",
      "state->data, msg[1].len + 1, 0) < 0",
      "memcpy(msg[1].buf, &state->data[1], msg[1].len",
      "mutex_unlock(&d->data_mutex",
      "int ret = 0",
      "mutex_lock(&d->data_mutex",
      "state->data[0] = 0xde",
      "state->data[1] = 0",
      "ret = dvb_usb_generic_rw(d, state->data, 2, NULL, 0, 0",
      "mutex_unlock(&d->data_mutex",
      "return ret",
      "static int su3000_frontend_attach(struct dvb_usb_adapter *adap",
      "struct dvb_usb_device *d = adap->dev",
      "struct dw2102_state *state = d->priv",
      "mutex_lock(&d->data_mutex",
      "state->data[0] = 0xe",
      "state->data[1] = 0x80",
      "state->data[2] = 0",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0xe",
      "state->data[1] = 0x02",
      "state->data[2] = 1",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0xe",
      "state->data[1] = 0x83",
      "state->data[2] = 0",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0xe",
      "state->data[1] = 0x83",
      "state->data[2] = 1",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0x51",
      "if (dvb_usb_generic_rw(d, state->data, 1, state->data, 1, 0) < 0",
      "mutex_unlock(&d->data_mutex",
      "adap->fe_adap[0].fe = dvb_attach(ds3000_attach, &su3000_ds3000_config,",
      "&d->i2c_adap",
      "if (adap->fe_adap[0].fe == NULL",
      "if (dvb_attach(ts2020_attach, adap->fe_adap[0].fe,",
      "&d->i2c_adap))",
      "static int t220_frontend_attach(struct dvb_usb_adapter *adap",
      "struct dvb_usb_device *d = adap->dev",
      "struct dw2102_state *state = d->priv",
      "mutex_lock(&d->data_mutex",
      "state->data[0] = 0xe",
      "state->data[1] = 0x87",
      "state->data[2] = 0x0",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0xe",
      "state->data[1] = 0x86",
      "state->data[2] = 1",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0xe",
      "state->data[1] = 0x80",
      "state->data[2] = 0",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0xe",
      "state->data[1] = 0x80",
      "state->data[2] = 1",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0x51",
      "if (dvb_usb_generic_rw(d, state->data, 1, state->data, 1, 0) < 0",
      "mutex_unlock(&d->data_mutex",
      "adap->fe_adap[0].fe = dvb_attach(cxd2820r_attach, &cxd2820r_config,",
      "&d->i2c_adap, NULL",
      "if (adap->fe_adap[0].fe != NULL)",
      "if (dvb_attach(tda18271_attach, adap->fe_adap[0].fe, 0x60,",
      "&d->i2c_adap, &tda18271_config))",
      "static int m88rs2000_frontend_attach(struct dvb_usb_adapter *adap",
      "struct dvb_usb_device *d = adap->dev",
      "struct dw2102_state *state = d->priv",
      "mutex_lock(&d->data_mutex",
      "state->data[0] = 0x51",
      "if (dvb_usb_generic_rw(d, state->data, 1, state->data, 1, 0) < 0",
      "mutex_unlock(&d->data_mutex",
      "adap->fe_adap[0].fe = dvb_attach(m88rs2000_attach,",
      "&s421_m88rs2000_config,",
      "&d->i2c_adap",
      "if (adap->fe_adap[0].fe == NULL",
      "if (dvb_attach(ts2020_attach, adap->fe_adap[0].fe,",
      "&d->i2c_adap))",
      "mutex_lock(&d->data_mutex",
      "state->data[0] = 0xe",
      "state->data[1] = 0x80",
      "state->data[2] = 0x0",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0xe",
      "state->data[1] = 0x02",
      "state->data[2] = 1",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0xe",
      "state->data[1] = 0x83",
      "state->data[2] = 0",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0xe",
      "state->data[1] = 0x83",
      "state->data[2] = 1",
      "if (dvb_usb_generic_rw(d, state->data, 3, state->data, 1, 0) < 0",
      "state->data[0] = 0x51",
      "if (dvb_usb_generic_rw(d, state->data, 1, state->data, 1, 0) < 0",
      "mutex_unlock(&d->data_mutex"
    ],
    "removed_lines": [
      "u8 obuf[0x40], ibuf[0x40]",
      "obuf[0] = msg[0].buf[0] + 0x36",
      "obuf[1] = 3",
      "obuf[2] = 0",
      "if (dvb_usb_generic_rw(d, obuf, 3, ibuf, 0, 0) < 0",
      "obuf[0] = 0x10",
      "if (dvb_usb_generic_rw(d, obuf, 1, ibuf, 2, 0) < 0",
      "msg[0].buf[1] = ibuf[0]",
      "msg[0].buf[0] = ibuf[1]",
      "obuf[0] = 0x08",
      "obuf[1] = msg[0].addr",
      "obuf[2] = msg[0].len",
      "memcpy(&obuf[3], msg[0].buf, msg[0].len",
      "if (dvb_usb_generic_rw(d, obuf, msg[0].len + 3,",
      "ibuf, 1, 0) < 0",
      "obuf[0] = 0x09",
      "obuf[1] = msg[0].len",
      "obuf[2] = msg[1].len",
      "obuf[3] = msg[0].addr",
      "memcpy(&obuf[4], msg[0].buf, msg[0].len",
      "if (dvb_usb_generic_rw(d, obuf, msg[0].len + 4,",
      "ibuf, msg[1].len + 1, 0) < 0",
      "memcpy(msg[1].buf, &ibuf[1], msg[1].len",
      "u8 obuf[] = {0xde, 0",
      "return dvb_usb_generic_rw(d, obuf, 2, NULL, 0, 0",
      "return 0",
      "static int su3000_frontend_attach(struct dvb_usb_adapter *d",
      "u8 obuf[3] = { 0xe, 0x80, 0",
      "u8 ibuf[] = { 0",
      "if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0xe",
      "obuf[1] = 0x02",
      "obuf[2] = 1",
      "if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0xe",
      "obuf[1] = 0x83",
      "obuf[2] = 0",
      "if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0xe",
      "obuf[1] = 0x83",
      "obuf[2] = 1",
      "if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0x51",
      "if (dvb_usb_generic_rw(d->dev, obuf, 1, ibuf, 1, 0) < 0",
      "d->fe_adap[0].fe = dvb_attach(ds3000_attach, &su3000_ds3000_config,",
      "&d->dev->i2c_adap",
      "if (d->fe_adap[0].fe == NULL",
      "if (dvb_attach(ts2020_attach, d->fe_adap[0].fe,",
      "&d->dev->i2c_adap))",
      "static int t220_frontend_attach(struct dvb_usb_adapter *d",
      "u8 obuf[3] = { 0xe, 0x87, 0",
      "u8 ibuf[] = { 0",
      "if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0xe",
      "obuf[1] = 0x86",
      "obuf[2] = 1",
      "if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0xe",
      "obuf[1] = 0x80",
      "obuf[2] = 0",
      "if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0xe",
      "obuf[1] = 0x80",
      "obuf[2] = 1",
      "if (dvb_usb_generic_rw(d->dev, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0x51",
      "if (dvb_usb_generic_rw(d->dev, obuf, 1, ibuf, 1, 0) < 0",
      "d->fe_adap[0].fe = dvb_attach(cxd2820r_attach, &cxd2820r_config,",
      "&d->dev->i2c_adap, NULL",
      "if (d->fe_adap[0].fe != NULL)",
      "if (dvb_attach(tda18271_attach, d->fe_adap[0].fe, 0x60,",
      "&d->dev->i2c_adap, &tda18271_config))",
      "static int m88rs2000_frontend_attach(struct dvb_usb_adapter *d",
      "u8 obuf[] = { 0x51",
      "u8 ibuf[] = { 0",
      "if (dvb_usb_generic_rw(d->dev, obuf, 1, ibuf, 1, 0) < 0",
      "d->fe_adap[0].fe = dvb_attach(m88rs2000_attach, &s421_m88rs2000_config,",
      "&d->dev->i2c_adap",
      "if (d->fe_adap[0].fe == NULL",
      "if (dvb_attach(ts2020_attach, d->fe_adap[0].fe,",
      "&d->dev->i2c_adap))",
      "u8 obuf[3] = { 0xe, 0x80, 0",
      "u8 ibuf[] = { 0",
      "if (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0xe",
      "obuf[1] = 0x02",
      "obuf[2] = 1",
      "if (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0xe",
      "obuf[1] = 0x83",
      "obuf[2] = 0",
      "if (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0xe",
      "obuf[1] = 0x83",
      "obuf[2] = 1",
      "if (dvb_usb_generic_rw(d, obuf, 3, ibuf, 1, 0) < 0",
      "obuf[0] = 0x51",
      "if (dvb_usb_generic_rw(d, obuf, 1, ibuf, 1, 0) < 0"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1292,
    "id": "CVE-2017-8061",
    "commit_id": "67b0503db9c29b04eadfeede6bebbfe5ddad94ef",
    "added_lines": [
      "u8 *buf",
      "int ret, pos = 0",
      "u16 cpu_cs_register = cypress[type].cpu_cs_register",
      "buf = kmalloc(sizeof(*hx), GFP_KERNEL",
      "if (!buf",
      "hx = (struct hexline *)buf",
      "buf[0] = 1",
      "if (usb_cypress_writemem(udev, cpu_cs_register, buf, 1) != 1",
      "kfree(buf",
      "buf[0] = 0",
      "if (usb_cypress_writemem(udev, cpu_cs_register, buf, 1) != 1)",
      "kfree(buf"
    ],
    "removed_lines": [
      "u8 reset",
      "int ret,pos=0",
      "hx = kmalloc(sizeof(*hx), GFP_KERNEL",
      "if (!hx",
      "reset = 1",
      "if ((ret = usb_cypress_writemem(udev,cypress[type].cpu_cs_register,&reset,1)) != 1",
      "kfree(hx",
      "reset = 0",
      "if (ret || usb_cypress_writemem(udev,cypress[type].cpu_cs_register,&reset,1) != 1)",
      "kfree(hx"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1295,
    "id": "CVE-2017-7895",
    "commit_id": "13bf9fbff0e5e099e2b6f003a0ab8ae145436309",
    "added_lines": [
      "if (hdr > head->iov_len",
      "return 0"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 10"
    ],
    "effect": "",
    "score": 10.0,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "pointer-arithmetic errors"
    ]
  },
  {
    "index": 1297,
    "id": "CVE-2017-7875",
    "commit_id": "f7a547b7ef8fc8ebdeaa4c28515c9d72e592fb6d",
    "added_lines": [
      "static size_t len = 0"
    ],
    "removed_lines": [
      "static unsigned short len = 0"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 7"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "double free",
      "integer overflow"
    ]
  },
  {
    "index": 1298,
    "id": "CVE-2017-7866",
    "commit_id": "e371f031b942d73e02c090170975561fabd5c264",
    "added_lines": [
      "av_bprint_get_buffer(bp, 2, &buf, &buf_size",
      "if (buf_size < 2)",
      "zstream.avail_out = buf_size - 1"
    ],
    "removed_lines": [
      "av_bprint_get_buffer(bp, 1, &buf, &buf_size",
      "if (!buf_size)",
      "zstream.avail_out = buf_size"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds write"
    ]
  },
  {
    "index": 1299,
    "id": "CVE-2017-7865",
    "commit_id": "2080bc33717955a0e4268e738acf8c1eeddbf8cb",
    "added_lines": [
      "if (s->codec_id == AV_CODEC_ID_INTERPLAY_VIDEO)",
      "w_align = 8",
      "h_align = 8",
      "if (s->codec_id == AV_CODEC_ID_JV ||",
      "s->codec_id == AV_CODEC_ID_INTERPLAY_VIDEO)"
    ],
    "removed_lines": [
      "if (s->codec_id == AV_CODEC_ID_JV)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds write"
    ]
  },
  {
    "index": 1300,
    "id": "CVE-2017-7863",
    "commit_id": "e477f09d0b3619f3d29173b2cd593e17e2d1978e",
    "added_lines": [
      "if (!(s->state & PNG_IHDR))",
      "av_log(avctx, AV_LOG_ERROR, \"trns before IHDR\\n\"",
      "return AVERROR_INVALIDDATA",
      "if (s->state & PNG_IDAT)",
      "av_log(avctx, AV_LOG_ERROR, \"trns after IDAT\\n\"",
      "return AVERROR_INVALIDDATA",
      "(s->color_type == PNG_COLOR_TYPE_RGB && length != 6) ||",
      "s->bit_depth == 1",
      "av_assert0(s->bit_depth > 1"
    ],
    "removed_lines": [
      "(s->color_type == PNG_COLOR_TYPE_RGB && length != 6"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds write"
    ]
  },
  {
    "index": 1301,
    "id": "CVE-2017-7862",
    "commit_id": "8c2ea3030af7b40a3c4275696fb5c76cdb80950a",
    "added_lines": [
      "if (s->width != avctx->width || s->height != avctx->height)"
    ],
    "removed_lines": [
      "if (s->width != avctx->width && s->height != avctx->height)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds write"
    ]
  },
  {
    "index": 1303,
    "id": "CVE-2017-7742",
    "commit_id": "60b234301adf258786d8b90be5c1d437fc8799e0",
    "added_lines": [
      "if (pflac->remain % channels != 0",
      "{\tpsf_log_printf (psf, \"Error: pflac->remain %u    channels %u\\n\", pflac->remain, channels)",
      "return 0",
      "}",
      "FLAC__StreamDecoderState state",
      "state = FLAC__stream_decoder_get_state (pflac->fsd)",
      "if (state > FLAC__STREAM_DECODER_END_OF_STREAM",
      "{\tpsf_log_printf (psf, \"FLAC__stream_decoder_get_state returned %s\\n\", FLAC__StreamDecoderStateString [state])",
      "pflac->frame = NULL",
      "}",
      "state = FLAC__stream_decoder_get_state (pflac->fsd)",
      "if (state >= FLAC__STREAM_DECODER_END_OF_STREAM",
      "{\tpsf_log_printf (psf, \"FLAC__stream_decoder_get_state returned %s\\n\", FLAC__StreamDecoderStateString [state])",
      "pflac->frame = NULL",
      "}"
    ],
    "removed_lines": [
      "FLAC__bool bufferbackup",
      "pflac->bufferbackup = SF_TRUE",
      "pflac->bufferbackup = SF_FALSE",
      "if (FLAC__stream_decoder_get_state (pflac->fsd) >= FLAC__STREAM_DECODER_END_OF_STREAM"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "segmentation violation"
    ]
  },
  {
    "index": 1306,
    "id": "CVE-2017-7586",
    "commit_id": "f457b7b5ecfe91697ed01cfc825772c4d8de1236",
    "added_lines": [
      "if (psf->fileoffset < psf->filelength",
      "{\tpsf_binheader_readf (psf, \"p\", psf->fileoffset)",
      "return 1",
      "}"
    ],
    "removed_lines": [
      "psf_binheader_readf (psf, \"p\", psf->fileoffset)",
      "return 1"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1307,
    "id": "CVE-2017-7542",
    "commit_id": "6399f1fae4ec29fab5ec76070435555e256ca3a6",
    "added_lines": [
      "unsigned int offset = sizeof(struct ipv6hdr",
      "unsigned int len",
      "len = ipv6_optlen(exthdr",
      "if (len + offset >= IPV6_MAXPLEN",
      "return -EINVAL",
      "offset += len"
    ],
    "removed_lines": [
      "u16 offset = sizeof(struct ipv6hdr",
      "offset += ipv6_optlen(exthdr"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "SIZE_CHECK",
      "INDEX_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "SIZE_CHECK",
      "INDEX_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "infinite loop",
      "integer overflow"
    ]
  },
  {
    "index": 1308,
    "id": "CVE-2017-7541",
    "commit_id": "8f44c9a41386729fea410e688959ddaa9d51be7c",
    "added_lines": [
      "if (len > BRCMF_FIL_ACTION_FRAME_SIZE + DOT11_MGMT_HDR_LEN)",
      "brcmf_err(\"invalid action frame length\\n\"",
      "err = -EINVAL",
      "goto exit"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  +Priv",
    "score": 7.2,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1317,
    "id": "CVE-2017-7407",
    "commit_id": "1890d59905414ab84a35892b2e45833654aa5c13",
    "added_lines": [
      "<testcase>",
      "<info>",
      "<keywords>",
      "--write-out",
      "</keywords>",
      "</info>",
      "# Server-side",
      "<reply>",
      "</reply>",
      "# Client-side",
      "<client>",
      "<server>",
      "file",
      "</server>",
      "<name>",
      "Check --write-out with trailing %",
      "</name>",
      "<command>",
      "file://localhost/%PWD/log/ --write-out '%'",
      "</command>",
      "</client>",
      "# Verify data",
      "<verify>",
      "<stdout nonewline=\"yes\">",
      "%",
      "</stdout>",
      "</verify>",
      "</testcase>"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": " +Info",
    "score": 2.1,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow +Info ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 1319,
    "id": "CVE-2017-7395",
    "commit_id": "bf3bdac082978ca32895a4b6a123016094905689",
    "added_lines": [
      "if (len < 0)",
      "throw Exception(\"Cut text too long.\""
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.0,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1329,
    "id": "CVE-2017-6952",
    "commit_id": "6fe86eef621b9849f51a5e1e5d73258a93440403",
    "added_lines": [
      "#include <Ntintsafe.h>",
      "size_t number_of_bytes = 0",
      "CS_WINKERNEL_MEMBLOCK *block = NULL",
      "if (!NT_SUCCESS(RtlSizeTAdd(size, sizeof(CS_WINKERNEL_MEMBLOCK), &number_of_bytes)))",
      "return NULL",
      "block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag",
      "NonPagedPool, number_of_bytes, CS_WINKERNEL_POOL_TAG"
    ],
    "removed_lines": [
      "CS_WINKERNEL_MEMBLOCK *block = (CS_WINKERNEL_MEMBLOCK *)ExAllocatePoolWithTag",
      "NonPagedPool, size + sizeof(CS_WINKERNEL_MEMBLOCK), CS_WINKERNEL_POOL_TAG"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 1331,
    "id": "CVE-2017-6892",
    "commit_id": "f833c53cb596e9e1792949f762e0b33661822748",
    "added_lines": [
      "{\tsize_t chanmap_size = SF_MIN (psf->sf.channels, layout_tag & 0xffff) * sizeof (psf->channel_map [0])"
    ],
    "removed_lines": [
      "{\tsize_t chanmap_size = psf->sf.channels * sizeof (psf->channel_map [0])"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 1332,
    "id": "CVE-2017-6890",
    "commit_id": "194f592e205990ea8fce72b6c571c14350aca716",
    "added_lines": [
      "ushort huff[1024], vpred[2][2], hpred[2]",
      "ushort huff[1024], vpred[2][2] = {{512,512},{512,512}}, hpred[2]",
      "#ifdef LIBRAW_LIBRARY_BUILD",
      "if(wide>32767 || high > 32767 || wide*high > 20000000",
      "throw LIBRAW_EXCEPTION_IO_CORRUPT",
      "#endif"
    ],
    "removed_lines": [
      "ushort huff[512], vpred[2][2], hpred[2]",
      "ushort huff[258], vpred[2][2] = {{512,512},{512,512}}, hpred[2]"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "boundary error"
    ]
  },
  {
    "index": 1333,
    "id": "CVE-2017-6887",
    "commit_id": "d7c3d2cb460be10a3ea7b32e9443a83c243b2251",
    "added_lines": [
      "#ifdef LIBRAW_LIBRARY_BUILD",
      "if (ifd >= sizeof tiff_ifd / sizeof tiff_ifd[0]",
      "throw LIBRAW_EXCEPTION_IO_CORRUPT",
      "#endif",
      "if (len < 1 || len > 2560000 || !(cbuf = (char *)malloc(len",
      "if (get4() == 0x48454150",
      "#ifdef LIBRAW_LIBRARY_BUILD",
      "&& (save+hlen) >= 0 && (save+hlen)<=ifp->size",
      "#endif",
      ")"
    ],
    "removed_lines": [
      "if (len > 2560000 || !(cbuf = (char *)malloc(len",
      "if (get4() == 0x48454150)"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": " Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "boundary error"
    ]
  },
  {
    "index": 1336,
    "id": "CVE-2017-6839",
    "commit_id": "beacc44eb8cdf6d58717ec1a5103c5141f1b37f9",
    "added_lines": [
      "int firstBitSet(int x",
      "int position=0",
      "while (x!=0",
      "x>>=1",
      "++position",
      "return position",
      "#ifndef __has_builtin",
      "#define __has_builtin(x) 0",
      "#endif",
      "int multiplyCheckOverflow(int a, int b, int *result",
      "#if (defined __GNUC__ && __GNUC__ >= 5) || ( __clang__ && __has_builtin(__builtin_mul_overflow",
      "return __builtin_mul_overflow(a, b, result",
      "#else",
      "if (firstBitSet(a)+firstBitSet(b)>31) // int is signed, so we can't use 32 bits",
      "return true",
      "return false",
      "#endif",
      "uint8_t code, const int16_t *coefficient, bool *ok=NULL",
      "int delta",
      "if (multiplyCheckOverflow(state.delta, adaptationTable[code], &delta",
      "if (ok) *ok=false",
      "_af_error(AF_BAD_COMPRESSION, \"Error decoding sample\"",
      "return 0",
      "delta >>= 8",
      "if (ok) *ok=true",
      "bool ok",
      "newSample = decodeSample(*state[0], code, coefficient[0], &ok",
      "if (!ok) return 0",
      "newSample = decodeSample(*state[1], code, coefficient[1], &ok",
      "if (!ok) return 0"
    ],
    "removed_lines": [
      "uint8_t code, const int16_t *coefficient",
      "int delta = (state.delta * adaptationTable[code]) >> 8",
      "newSample = decodeSample(*state[0], code, coefficient[0]",
      "newSample = decodeSample(*state[1], code, coefficient[1]"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1337,
    "id": "CVE-2017-6838",
    "commit_id": "7d65f89defb092b63bcbc5d98349fb222ca73b3c",
    "added_lines": [
      "int firstBitSet(int x",
      "int position=0",
      "while (x!=0",
      "x>>=1",
      "++position",
      "return position",
      "#ifndef __has_builtin",
      "#define __has_builtin(x) 0",
      "#endif",
      "int multiplyCheckOverflow(int a, int b, int *result",
      "#if (defined __GNUC__ && __GNUC__ >= 5) || ( __clang__ && __has_builtin(__builtin_mul_overflow",
      "return __builtin_mul_overflow(a, b, result",
      "#else",
      "if (firstBitSet(a)+firstBitSet(b)>31) // int is signed, so we can't use 32 bits",
      "return true",
      "return false",
      "#endif",
      "int kBufferFrameCount = 65536",
      "int bufferSize",
      "while (multiplyCheckOverflow(kBufferFrameCount, frameSize, &bufferSize",
      "kBufferFrameCount /= 2",
      "void *buffer = malloc(bufferSize"
    ],
    "removed_lines": [
      "const int kBufferFrameCount = 65536",
      "void *buffer = malloc(kBufferFrameCount * frameSize"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1339,
    "id": "CVE-2017-6831",
    "commit_id": "a2e9eab8ea87c4ffc494d839ebb4ea145eb9f2e6",
    "added_lines": [
      "return AF_FAIL",
      "return AF_FAIL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1344,
    "id": "CVE-2017-6502",
    "commit_id": "126c7c98ea788241922c30df4a5633ea692cf8df",
    "added_lines": [
      "(void) CloseBlob(image"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 8"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "file-descriptor leak"
    ]
  },
  {
    "index": 1350,
    "id": "CVE-2017-6448",
    "commit_id": "f41e941341e44aa86edd4483c4487ec09a074257",
    "added_lines": [
      "snprintf (op->buf_asm, sizeof(op->buf_asm), \"packed-switch-payload %d, %d\", array_size, first_key",
      "snprintf (op->buf_asm, sizeof (op->buf_asm), \"sparse-switch-payload %d\", array_size",
      "snprintf (str, sizeof (str), \" v%i, v%i\", vA, vB",
      "snprintf (str, sizeof (str), \" v%i, v%i\", vA, vB",
      "snprintf (str, sizeof (str), \" v%i, v%i\", vA, vB",
      "snprintf (str, sizeof (str), \" v%i\", vA",
      "snprintf (str, sizeof (str), \" v%i, %#x\", vA, vB",
      "snprintf (str, sizeof (str), \" v%i, %#04hx\", vA, sB",
      "snprintf (str, sizeof (str), \" v%i:v%i, 0x%\"PFMT64x, vA, vA + 1, lB",
      "snprintf (str, sizeof (str), \" v%i, v%i, v%i\", vA, vB, vC",
      "snprintf (str, sizeof (str), \" v%i, v%i, %#x\", vA, vB, vC",
      "snprintf (str, sizeof (str), \" v%i, v%i, %#x\", vA, vB, vC",
      "snprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f",
      "snprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4",
      "snprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4, buf[5] & 0x0f",
      "snprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "snprintf (str, sizeof (str), \" {}\"",
      "snprintf (str, sizeof (str), \", [%04x]\", vB",
      "snprintf (str, sizeof (str), \" {v%i..v%i}, [%04x]\", vC, vC + vA - 1, vB",
      "snprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f",
      "snprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4",
      "snprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "snprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "snprintf (str, sizeof (str), \" {}\"",
      "snprintf (str, sizeof (str), \", [%04x]\", vB",
      "snprintf (str, sizeof (str), \" v%i, string+%i\", vA, vB",
      "snprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset",
      "snprintf (str, sizeof (str), \" v%i, class+%i\", vA, vB",
      "snprintf (str, sizeof (str), \" v%i, %s\", vA, flag_str",
      "snprintf (str, sizeof (str), \" v%i, field+%i\", vA, vB",
      "snprintf (str, sizeof (str), \" v%i, %s\", vA, flag_str",
      "snprintf (str, sizeof (str), \" v%i, v%i, [obj+%04x]\", vA, vB, vC",
      "snprintf (str, sizeof (str), \" v%i, v%i, [0x%\"PFMT64x\"]\", vA, vB, offset",
      "snprintf (str, sizeof (str), \" v%i, thing+%i\", vA, vB",
      "snprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset",
      "snprintf (str, sizeof (str), \" v%i, v%i, %s\", vA, vB, flag_str",
      "snprintf (str, sizeof (str), \" v%i, v%i, class+%i\", vA, vB, vC",
      "snprintf (str, sizeof (str), \" v%i, v%i, %s\", vA, vB, flag_str",
      "snprintf (str, sizeof (str), \" v%i, v%i, field+%i\", vA, vB, vC",
      "snprintf (str, sizeof (str), \" v%i, string+%i\", vA, vB",
      "snprintf (str, sizeof (str), \" v%i, 0x%\"PFMT64x, vA, offset",
      "snprintf (str, sizeof (str), \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str",
      "snprintf (str, sizeof (str), \" {v%i..v%i}, class+%i\", vC, vC + vA - 1, vB",
      "snprintf (str, sizeof (str), \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str",
      "snprintf (str, sizeof (str), \" {v%i..v%i}, method+%i\", vC, vC + vA - 1, vB",
      "snprintf (str, sizeof (str), \" {v%i}\", buf[4] & 0x0f",
      "snprintf (str, sizeof (str), \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4",
      "snprintf (str, sizeof (str), \" {v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "snprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "snprintf (str, sizeof (str), \" {v%i, v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "snprintf (str, sizeof (str), \" {}\"",
      "snprintf (str, sizeof (str), \", %s ; 0x%x\", flag_str, vB",
      "snprintf (str, sizeof (str), \", class+%i\", vB",
      "snprintf (str, sizeof (str), \", %s ; 0x%x\", flag_str, vB",
      "snprintf (str, sizeof (str), \", method+%i\", vB"
    ],
    "removed_lines": [
      "sprintf (op->buf_asm, \"packed-switch-payload %d, %d\", array_size, first_key",
      "sprintf (op->buf_asm, \"sparse-switch-payload %d\", array_size",
      "sprintf (str, \" v%i, v%i\", vA, vB",
      "sprintf (str, \" v%i, v%i\", vA, vB",
      "sprintf (str, \" v%i, v%i\", vA, vB",
      "sprintf (str, \" v%i\", vA",
      "sprintf (str, \" v%i, %#x\", vA, vB",
      "sprintf (str, \" v%i, %#04hx\", vA, sB",
      "sprintf (str, \" v%i:v%i, 0x%\"PFMT64x, vA, vA + 1, lB",
      "sprintf (str, \" v%i, v%i, v%i\", vA, vB, vC",
      "sprintf (str, \" v%i, v%i, %#x\", vA, vB, vC",
      "sprintf (str, \" v%i, v%i, %#x\", vA, vB, vC",
      "sprintf (str, \" {v%i}\", buf[4] & 0x0f",
      "sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4",
      "sprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4, buf[5] & 0x0f",
      "sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "sprintf (str, \" {}\"",
      "sprintf (str, \", [%04x]\", vB",
      "sprintf (str, \" {v%i..v%i}, [%04x]\", vC, vC + vA - 1, vB",
      "sprintf (str, \" {v%i}\", buf[4] & 0x0f",
      "sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4",
      "sprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "sprintf (str, \" {}\"",
      "sprintf (str, \", [%04x]\", vB",
      "sprintf (str, \" v%i, string+%i\", vA, vB",
      "sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset",
      "sprintf (str, \" v%i, class+%i\", vA, vB",
      "sprintf (str, \" v%i, %s\", vA, flag_str",
      "sprintf (str, \" v%i, field+%i\", vA, vB",
      "sprintf (str, \" v%i, %s\", vA, flag_str",
      "sprintf (str, \" v%i, v%i, [obj+%04x]\", vA, vB, vC",
      "sprintf (str, \" v%i, v%i, [0x%\"PFMT64x\"]\", vA, vB, offset",
      "sprintf (str, \" v%i, thing+%i\", vA, vB",
      "sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset",
      "sprintf (str, \" v%i, v%i, %s\", vA, vB, flag_str",
      "sprintf (str, \" v%i, v%i, class+%i\", vA, vB, vC",
      "sprintf (str, \" v%i, v%i, %s\", vA, vB, flag_str",
      "sprintf (str, \" v%i, v%i, field+%i\", vA, vB, vC",
      "sprintf (str, \" v%i, string+%i\", vA, vB",
      "sprintf (str, \" v%i, 0x%\"PFMT64x, vA, offset",
      "sprintf (str, \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str",
      "sprintf (str, \" {v%i..v%i}, class+%i\", vC, vC + vA - 1, vB",
      "sprintf (str, \" {v%i..v%i}, %s\", vC, vC + vA - 1, flag_str",
      "sprintf (str, \" {v%i..v%i}, method+%i\", vC, vC + vA - 1, vB",
      "sprintf (str, \" {v%i}\", buf[4] & 0x0f",
      "sprintf (str, \" {v%i, v%i}\", buf[4] & 0x0f, (buf[4] & 0xf0) >> 4",
      "sprintf (str, \" {v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "sprintf (str, \" {v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "sprintf (str, \" {v%i, v%i, v%i, v%i, v%i}\", buf[4] & 0x0f,",
      "sprintf (str, \" {}\"",
      "sprintf (str, \", %s ; 0x%x\", flag_str, vB",
      "sprintf (str, \", class+%i\", vB",
      "sprintf (str, \", %s ; 0x%x\", flag_str, vB",
      "sprintf (str, \", method+%i\", vB"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "INDEX_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "INDEX_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "INDEX_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "INDEX_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "INDEX_OP",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "INDEX_OP",
      "MEM_COPY",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "INDEX_OP",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "MEM_COPY",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1351,
    "id": "CVE-2017-6439",
    "commit_id": "32ee5213fe64f1e10ec76c1ee861ee6f233120dd",
    "added_lines": [
      "if (*object + size < *object || *object + size > bplist->offset_table)",
      "if (*object + size < *object || *object + size > bplist->offset_table)",
      "if (*object + size*2 < *object || *object + size*2 > bplist->offset_table)",
      "if (*object + size < *object || *object + size > bplist->offset_table)",
      "if (*object + size < *object || *object + size > bplist->offset_table)",
      "PLIST_BIN_ERR(\"%s: BPLIST_DICT data bytes point outside of valid range\\n\", __func__"
    ],
    "removed_lines": [
      "if (*object + size > bplist->offset_table)",
      "if (*object + size > bplist->offset_table)",
      "if (*object + size*2 > bplist->offset_table)",
      "if (*object + size > bplist->offset_table)",
      "if (*object + size > bplist->offset_table)",
      "PLIST_BIN_ERR(\"%s: BPLIST_REAL data bytes point outside of valid range\\n\", __func__"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 1.9,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds write"
    ]
  },
  {
    "index": 1352,
    "id": "CVE-2017-6435",
    "commit_id": "fbd8494d5e4e46bf2e90cb6116903e404374fb56",
    "added_lines": [
      "if (!data->strval)",
      "plist_free_data(data",
      "PLIST_BIN_ERR(\"%s: Could not allocate %\" PRIu64 \" bytes\\n\", __func__, sizeof(char) * (size + 1",
      "return NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 1.9,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 1354,
    "id": "CVE-2017-6429",
    "commit_id": "d689d14dbcd768c028eab2fb378d849e543dcfe9",
    "added_lines": [
      "if (caplentoobig)",
      "printf(\"\\n\\nCapture file appears to be damaged or corrupt.\\n\"",
      "\"Contains packet of size %u, bigger than snap length %u\\n\",",
      "caplen, pcap_fh.snaplen",
      "close(fd",
      "break",
      "break"
    ],
    "removed_lines": [
      "continue"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "CONTROL_FLOW",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1356,
    "id": "CVE-2017-6419",
    "commit_id": "a83773682e856ad6529ba6db8d1792e6d515d7f1",
    "added_lines": [
      "if(mem)",
      "free(mem",
      "mem = NULL",
      "return"
    ],
    "removed_lines": [
      "free(mem"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONTROL_FLOW",
      "MEM_FREE",
      "RETURN"
    ],
    "unsafe_features": [
      "MEM_FREE"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "libmspack"
    ]
  },
  {
    "index": 1366,
    "id": "CVE-2017-6319",
    "commit_id": "ad55822430a03fe075221b543efb434567e9e431",
    "added_lines": [
      "if (argReg > regsz)",
      "return; // this return breaks tests"
    ],
    "removed_lines": [
      "if (argReg >= regsz)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1368,
    "id": "CVE-2017-6308",
    "commit_id": "c5044689e50039635e7700fe2472fd632ac77176",
    "added_lines": [
      "extern void* checked_xmalloc (size_t num, size_t size",
      "extern void* xmalloc (size_t num, size_t size",
      "((_type*)xmalloc((_num), sizeof(_type",
      "((_type*)checked_xmalloc((_num),sizeof(_type",
      "do { if (_ptr) { free (_ptr); _ptr = 0; } } while (0"
    ],
    "removed_lines": [
      "extern void* checked_xmalloc (size_t size",
      "extern void* xmalloc (size_t size",
      "((_type*)xmalloc((_num)*sizeof(_type",
      "((_type*)checked_xmalloc((_num)*sizeof(_type",
      "do { if (_ptr) { free (_ptr); _ptr = 0; } } while (0"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_FREE"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_FREE"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow",
      "heap overflow"
    ]
  },
  {
    "index": 1372,
    "id": "CVE-2017-6194",
    "commit_id": "72794dc3523bbd5bb370de3c5857cb736c387e18",
    "added_lines": [
      "if (!tbuf)",
      "return NULL",
      "static int search_old_relocation (struct reloc_struct_t *reloc_table,",
      "ut32 addr_to_patch, int n_reloc)",
      "struct reloc_struct_t *got_table = calloc",
      "1, n_got * sizeof (struct reloc_struct_t"
    ],
    "removed_lines": [
      "static int search_old_relocation(struct reloc_struct_t *reloc_table, ut32 addr_to_patch, int n_reloc)",
      "struct reloc_struct_t *got_table = calloc (1, n_got * sizeof (ut32"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1389,
    "id": "CVE-2017-5581",
    "commit_id": "18c020124ff1b2441f714da2017f63dba50720ba",
    "added_lines": [
      "Rect drect",
      "drect = r",
      "if (!drect.enclosed_by(getRect()))",
      "vlog.error(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",",
      "drect.width(), drect.height(), drect.tl.x, drect.tl.y, width_, height_",
      "drect = drect.intersect(getRect",
      "if (drect.is_empty",
      "return",
      "w = drect.width",
      "h = drect.height",
      "buf = getBufferRW(drect, &stride",
      "commitBufferRW(drect"
    ],
    "removed_lines": [
      "w = r.width",
      "h = r.height",
      "buf = getBufferRW(r, &stride",
      "commitBufferRW(r"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1390,
    "id": "CVE-2017-5577",
    "commit_id": "6b8ac63847bc2f958dd93c09edc941a0118992d9",
    "added_lines": [
      "ret = -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Logical Flaws",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "incorrect pointer",
      "ioctl call"
    ]
  },
  {
    "index": 1391,
    "id": "CVE-2017-5576",
    "commit_id": "0f2ff82e11c86c05d051cae32b58226392d33bbf",
    "added_lines": [
      "if (shader_rec_offset < args->bin_cl_size ||",
      "uniforms_offset < shader_rec_offset ||"
    ],
    "removed_lines": [
      "if (uniforms_offset < shader_rec_offset ||"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "ioctl call",
      "integer overflow"
    ]
  },
  {
    "index": 1395,
    "id": "CVE-2017-5548",
    "commit_id": "05a974efa4bdf6e2a150e3f27dc6fcf0a9ad5655",
    "added_lines": [
      "uint8_t *buffer",
      "buffer = kmalloc(1, GFP_KERNEL",
      "if (!buffer",
      "return -ENOMEM",
      "0, reg, buffer, 1, 1000",
      "if (ret >= 0)",
      "value = buffer[0]",
      "kfree(buffer",
      "return value",
      "} else",
      "kfree(buffer",
      "return ret",
      "unsigned char *buffer",
      "buffer = kmalloc(3, GFP_KERNEL",
      "if (!buffer",
      "return -ENOMEM",
      "kfree(buffer",
      "char *build",
      "build = kmalloc(ATUSB_BUILD_SIZE + 1, GFP_KERNEL",
      "if (!build",
      "return -ENOMEM",
      "kfree(build"
    ],
    "removed_lines": [
      "0, reg, &value, 1, 1000",
      "return ret >= 0 ? value : ret",
      "unsigned char buffer[3]",
      "char build[ATUSB_BUILD_SIZE + 1]"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "RETURN",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1396,
    "id": "CVE-2017-5547",
    "commit_id": "6d104af38b570d37aa32a5803b04c354f8ed513d",
    "added_lines": [
      "char *data",
      "data = kmalloc(8, GFP_KERNEL",
      "if (!data",
      "return -ENOMEM",
      "ret = -EIO",
      "goto out",
      "ret = -EIO",
      "goto out",
      "ret = brightness",
      "out:",
      "kfree(data",
      "return ret",
      "char *data",
      "data = kmalloc(2, GFP_KERNEL",
      "if (!data",
      "return -ENOMEM",
      "ret = -EIO",
      "goto out",
      "ret = -EIO",
      "goto out",
      "ret = snprintf(buf, PAGE_SIZE, \"%s\\n\", macro_mode",
      "out:",
      "kfree(data",
      "return ret",
      "char *data",
      "data = kmalloc(8, GFP_KERNEL",
      "if (!data",
      "return -ENOMEM",
      "ret = -EIO",
      "goto out",
      "ret = -EIO",
      "goto out",
      "ret = snprintf(buf, PAGE_SIZE, \"%d\\n\", current_profile",
      "out:",
      "kfree(data",
      "return ret"
    ],
    "removed_lines": [
      "char data[8]",
      "return -EIO",
      "return -EIO",
      "return brightness",
      "char data[8]",
      "return -EIO",
      "return -EIO",
      "return snprintf(buf, PAGE_SIZE, \"%s\\n\", macro_mode",
      "char data[8]",
      "return -EIO",
      "return -EIO",
      "return snprintf(buf, PAGE_SIZE, \"%d\\n\", current_profile"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "MEM_COPY",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "MEM_COPY",
      "RETURN"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "RETURN",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "RETURN",
      "ARRAY_ACCESS",
      "RETURN",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "MEM_COPY",
      "RETURN",
      "ARRAY_ACCESS",
      "RETURN",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "MEM_COPY",
      "RETURN"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1399,
    "id": "CVE-2017-5522",
    "commit_id": "e52a436c0e1c5e9f7ef13428dba83194a800f4df",
    "added_lines": [
      "if( 1 + 2 * nLength + 1 + 1 >= sizeof(szTmp)",
      "return NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1400,
    "id": "CVE-2017-5511",
    "commit_id": "c8c6a0f123d5e35c173125365c97e2c0fc7eca42",
    "added_lines": [
      "length=(MagickSizeType) (unsigned char) ReadBlobByte(image"
    ],
    "removed_lines": [
      "length=(MagickSizeType) ReadBlobByte(image"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP"
    ],
    "unsafe_features": [
      "INDEX_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1403,
    "id": "CVE-2017-5508",
    "commit_id": "c073a7712d82476b5fbee74856c46b88af9c3175",
    "added_lines": [
      "tiff_pixels=(unsigned char *) AcquireMagickMemory(MagickMax",
      "TIFFScanlineSize(tiff),(size_t) (image->columns*samples_per_pixel*",
      "pow(2.0,ceil(log(bits_per_sample)/log(2.0"
    ],
    "removed_lines": [
      "tiff_pixels=(unsigned char *) AcquireMagickMemory(TIFFScanlineSize(tiff)+",
      "sizeof(uint32"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "SIZE_CHECK"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1406,
    "id": "CVE-2017-5340",
    "commit_id": "4cc0286f2f3780abc6084bcdae5dce595daa3c12",
    "added_lines": [
      "ht->nTableSize = zend_hash_check_size(nSize"
    ],
    "removed_lines": [
      "ht->nTableSize = zend_hash_check_size(nSize"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "integer overflow",
      "uninitialized memory"
    ]
  },
  {
    "index": 1408,
    "id": "CVE-2017-5225",
    "commit_id": "5c080298d59efa53264d7248bbe3a04660db6ef7",
    "added_lines": [
      "uint16 bitspersample = 1, samplesperpixel = 1",
      "uint16 bps = 0",
      "(void) TIFFGetField(in, TIFFTAG_BITSPERSAMPLE, &bps",
      "if( bps != 8",
      "TIFFError(TIFFFileName(in),",
      "\"Error, can only handle BitsPerSample=8 in %s\",",
      "\"cpContig2SeparateByRow\"",
      "return 0",
      "uint16 bps = 0",
      "(void) TIFFGetField(in, TIFFTAG_BITSPERSAMPLE, &bps",
      "if( bps != 8",
      "TIFFError(TIFFFileName(in),",
      "\"Error, can only handle BitsPerSample=8 in %s\",",
      "\"cpSeparate2ContigByRow\"",
      "return 0",
      "(void) TIFFGetFieldDefaulted(in, TIFFTAG_PLANARCONFIG, &shortv"
    ],
    "removed_lines": [
      "uint16 bitspersample, samplesperpixel = 1",
      "(void) TIFFGetField(in, TIFFTAG_PLANARCONFIG, &shortv"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 1412,
    "id": "CVE-2017-3738",
    "commit_id": "e502cc86df9dafded1694fceb3228ee34d11c11a",
    "added_lines": [
      "vmovdqu\t.Land_mask(%rip), $AND_MASK",
      "vpblendd\t\\$3, $ZERO, $ACC9, $TEMP1\t# correct $ACC3",
      "vpaddq\t\t$TEMP1, $ACC3, $ACC3\t\t# correct $ACC3",
      "vpblendd\t\\$0xfc, $ZERO, $ACC9, $ACC9\t# correct $ACC3",
      "vpaddq\t\t$ACC9,$ACC4,$ACC4\t\t# correct $ACC3",
      "#\tavoid performance penalties completely.",
      ".quad\t0x1fffffff,0x1fffffff,0x1fffffff,0x1fffffff"
    ],
    "removed_lines": [
      "vpbroadcastq\t.Land_mask(%rip), $AND_MASK",
      "vpblendd\t\\$3, $ZERO, $ACC9, $ACC9\t# correct $ACC3",
      "vpaddq\t\t$ACC9, $ACC3, $ACC3\t\t# correct $ACC3",
      "#\tavoid performance penalties completely. Also note that we",
      "#\tcorrect only three digits out of four. This works because",
      "#\tmost significant digit is subjected to less additions.",
      "vpermq\t\t\\$0, $AND_MASK, $AND_MASK",
      ".quad\t0x1fffffff,0x1fffffff,0x1fffffff,-1"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": " +Info",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow +Info ",
    "summary": [
      "OpenSSL 1.0.2",
      "overflow bug"
    ]
  },
  {
    "index": 1415,
    "id": "CVE-2017-3735",
    "commit_id": "068b963bb7afc57f5bdd723de0dd15e7795d5822",
    "added_lines": [
      "if (f == NULL",
      "|| f->addressFamily == NULL",
      "|| f->addressFamily->data == NULL",
      "|| f->addressFamily->length < 2",
      "return 0",
      "return (f->addressFamily->data[0] << 8) | f->addressFamily->data[1]"
    ],
    "removed_lines": [
      "return ((f != NULL &&",
      "f->addressFamily != NULL && f->addressFamily->data != NULL",
      "? ((f->addressFamily->data[0] << 8) | (f->addressFamily->data[1]",
      ": 0"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "one-byte overread"
    ]
  },
  {
    "index": 1420,
    "id": "CVE-2017-2920",
    "commit_id": "a70934eea95c76a7737b83773bffe8738935082d",
    "added_lines": [
      "size_t input_string_size = input_string.size",
      "for (i = 0; i < std::min(input_string_size, size_t(READ_BUFFER_SIZE)); i++"
    ],
    "removed_lines": [
      "size_t input_string_size",
      "input_string_size = input_string.size",
      "for (i = 0; i < input_string_size; i++"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode  Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "INDEX_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Exec Code Overflow Mem. Corr. ",
    "summary": [
      "code execution"
    ]
  },
  {
    "index": 1431,
    "id": "CVE-2016-10507",
    "commit_id": "da940424816e11d624362ce080bc026adffa26e8",
    "added_lines": [
      "if (Info_h.biWidth == 0 || Info_h.biHeight == 0)",
      "fclose(IN",
      "return NULL",
      "if (Info_h.biBitCount > (((OPJ_UINT32)-1) - 31) / Info_h.biWidth)",
      "fclose(IN",
      "return NULL",
      "if (8 > (((OPJ_UINT32)-1) - 31) / Info_h.biWidth)",
      "fclose(IN",
      "return NULL",
      "if (stride > ((OPJ_UINT32)-1) / sizeof(OPJ_UINT8) / Info_h.biHeight)",
      "fclose(IN",
      "return NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer over-read",
      "integer overflow"
    ]
  },
  {
    "index": 1433,
    "id": "CVE-2016-10504",
    "commit_id": "397f62c0a838e15d667ef50e27d5d011d2c79c04",
    "added_lines": [
      "l_data_size = 1 + (OPJ_UINT32)((p_code_block->x1 - p_code_block->x0) *",
      "(p_code_block->y1 - p_code_block->y0) * (OPJ_INT32)sizeof(OPJ_UINT32"
    ],
    "removed_lines": [
      "l_data_size = (OPJ_UINT32)((p_code_block->x1 - p_code_block->x0) *",
      "(p_code_block->y1 - p_code_block->y0) * (OPJ_INT32)sizeof(OPJ_UINT32"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1434,
    "id": "CVE-2016-10375",
    "commit_id": "fd85f8c94182558ff1480d06a236d6fb927979a3",
    "added_lines": [
      "size_t original_length = memory_length",
      "memcpy(cp, qp->d_memory, original_length"
    ],
    "removed_lines": [
      "memcpy(cp, qp->d_memory, memory_length"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP",
      "MEM_COPY",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 1438,
    "id": "CVE-2016-10272",
    "commit_id": "9657bbe3cdce4aaa90e07d50c1c70ae52da0ba6a",
    "added_lines": [
      "bufp += stripsize"
    ],
    "removed_lines": [
      "bufp += bytes_read"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1444,
    "id": "CVE-2016-10251",
    "commit_id": "1f0dfe5a42911b6880a1445f13f6d615ddb55387",
    "added_lines": [
      "uint_fast32_t hsamp",
      "uint_fast32_t vsamp",
      "uint_fast32_t x",
      "uint_fast32_t y",
      "uint_fast32_t xstep",
      "uint_fast32_t ystep",
      "uint_fast32_t xstart",
      "uint_fast32_t ystart",
      "uint_fast32_t xend",
      "uint_fast32_t yend"
    ],
    "removed_lines": [
      "int hsamp",
      "int vsamp",
      "int x",
      "int y",
      "int xstep",
      "int ystep",
      "int xstart",
      "int ystart",
      "int xend",
      "int yend"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1446,
    "id": "CVE-2016-10249",
    "commit_id": "988f8365f7d8ad8073b6786e433d34c553ecf568",
    "added_lines": [
      "size_t size",
      "matrix = 0",
      "goto error",
      "goto error",
      "matrix->datasize_ = 0",
      "if (!jas_safe_size_mul(numrows, numcols, &size))",
      "goto error",
      "matrix->datasize_ = size",
      "goto error",
      "goto error",
      "error:",
      "if (matrix)",
      "jas_matrix_destroy(matrix",
      "return 0"
    ],
    "removed_lines": [
      "return 0",
      "return 0",
      "matrix->datasize_ = numrows * numcols",
      "jas_matrix_destroy(matrix",
      "return 0",
      "jas_matrix_destroy(matrix",
      "return 0"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 8"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN",
      "RETURN"
    ],
    "vuln": "Overflow ",
    "summary": [
      "crafted image file",
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 1452,
    "id": "CVE-2016-10207",
    "commit_id": "8aa4bc53206c2430bbf0c8f4b642f59a379ee649",
    "added_lines": [],
    "removed_lines": [
      "static void initGlobal"
    ],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "invalid memory access"
    ]
  },
  {
    "index": 1455,
    "id": "CVE-2016-10196",
    "commit_id": "329acc18a0768c21ba22522f01a5c7f46cacc4d5",
    "added_lines": [
      "size_t len",
      "len = ( cp-(ip_as_string + 1)",
      "if (len > sizeof(buf)-1)"
    ],
    "removed_lines": [
      "int len",
      "len = (int) ( cp-(ip_as_string + 1)",
      "if (len > (int)sizeof(buf)-1)"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "segmentation fault",
      "buffer overflow"
    ]
  },
  {
    "index": 1457,
    "id": "CVE-2016-10192",
    "commit_id": "a5d25faa3f4b18dac737fdb35d0dd68eb0dc2156",
    "added_lines": [
      "if (c->chunk_size <= 0) { // end of stream or invalid chunk size",
      "c->chunk_size = 0",
      "av_assert0(len <= c->chunk_size"
    ],
    "removed_lines": [
      "if (c->chunk_size == 0) // end of stream"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1458,
    "id": "CVE-2016-10191",
    "commit_id": "7d57ca4d9a75562fa32e40766211de150f8b3ee7",
    "added_lines": [
      "if (prev_pkt[channel_id].read && size != prev_pkt[channel_id].size)",
      "av_log(NULL, AV_LOG_ERROR, \"RTMP packet size mismatch %d != %d\\n\",",
      "size,",
      "prev_pkt[channel_id].size",
      "ff_rtmp_packet_destroy(&prev_pkt[channel_id]",
      "prev_pkt[channel_id].read = 0"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "INDEX_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1459,
    "id": "CVE-2016-10190",
    "commit_id": "2a05c8f813de6f2278827734bf8102291e7484aa",
    "added_lines": [
      "uint64_t chunksize",
      "uint64_t off, end_off, filesize",
      "uint64_t icy_data_read",
      "uint64_t icy_metaint",
      "s->filesize = UINT64_MAX",
      "s->off = strtoull(p, NULL, 10",
      "s->filesize = strtoull(slash + 1, NULL, 10",
      "} else if (!av_strcasecmp(tag, \"Content-Length\") &&",
      "s->filesize == UINT64_MAX)",
      "s->filesize = strtoull(p, NULL, 10",
      "s->filesize  = UINT64_MAX",
      "s->icy_metaint = strtoull(p, NULL, 10",
      "s->chunksize = UINT64_MAX",
      "uint64_t off = s->off",
      "\"Range: bytes=%\"PRIu64\"-\", s->off",
      "s->filesize         = UINT64_MAX",
      "uint64_t target_end = s->end_off ? s->end_off : s->filesize",
      "if ((!s->willclose || s->chunksize == UINT64_MAX) && s->off >= target_end",
      "if (!len && (!s->willclose || s->chunksize == UINT64_MAX) && s->off < target_end)",
      "\"Stream ends prematurely at %\"PRIu64\", should be %\"PRIu64\"\\n\",",
      "if (s->chunksize != UINT64_MAX)",
      "s->chunksize = strtoull(line, NULL, 16",
      "av_log(h, AV_LOG_TRACE,",
      "\"Chunked encoding data size: %\"PRIu64\"'\\n\",",
      "else if (s->chunksize == UINT64_MAX)",
      "av_log(h, AV_LOG_ERROR, \"Invalid chunk size %\"PRIu64\"\\n\",",
      "s->chunksize",
      "return AVERROR(EINVAL",
      "uint64_t target = h->is_streamed ? 0 : s->off",
      "av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRIu64\" error=%s.\\n\", s->off, av_err2str(read_ret",
      "av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRIu64\".\\n\", target",
      "uint64_t remaining",
      "if (s->icy_metaint < s->icy_data_read",
      "remaining = s->icy_metaint - s->icy_data_read",
      "uint64_t old_off = s->off",
      "else if ((s->filesize == UINT64_MAX && whence == SEEK_END",
      "s->filesize   = UINT64_MAX"
    ],
    "removed_lines": [
      "int64_t chunksize",
      "int64_t off, end_off, filesize",
      "int icy_data_read",
      "int icy_metaint",
      "s->filesize = -1",
      "s->off = strtoll(p, NULL, 10",
      "s->filesize = strtoll(slash + 1, NULL, 10",
      "} else if (!av_strcasecmp(tag, \"Content-Length\") && s->filesize == -1)",
      "s->filesize = strtoll(p, NULL, 10",
      "s->filesize  = -1",
      "s->icy_metaint = strtoll(p, NULL, 10",
      "s->chunksize = -1",
      "int64_t off = s->off",
      "\"Range: bytes=%\"PRId64\"-\", s->off",
      "s->filesize         = -1",
      "int64_t target_end = s->end_off ? s->end_off : s->filesize",
      "if ((!s->willclose || s->chunksize < 0) &&",
      "target_end >= 0 && s->off >= target_end",
      "if (!len && (!s->willclose || s->chunksize < 0) &&",
      "target_end >= 0 && s->off < target_end)",
      "\"Stream ends prematurely at %\"PRId64\", should be %\"PRId64\"\\n\",",
      "if (s->chunksize >= 0)",
      "s->chunksize = strtoll(line, NULL, 16",
      "av_log(NULL, AV_LOG_TRACE, \"Chunked encoding data size: %\"PRId64\"'\\n\",",
      "int64_t target = h->is_streamed ? 0 : s->off",
      "av_log(h, AV_LOG_INFO, \"Will reconnect at %\"PRId64\" error=%s.\\n\", s->off, av_err2str(read_ret",
      "av_log(h, AV_LOG_ERROR, \"Failed to reconnect at %\"PRId64\".\\n\", target",
      "int remaining = s->icy_metaint - s->icy_data_read",
      "if (remaining < 0",
      "int64_t old_off = s->off",
      "else if ((s->filesize == -1 && whence == SEEK_END",
      "s->filesize   = -1"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP",
      "INDEX_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "INDEX_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1462,
    "id": "CVE-2016-10168",
    "commit_id": "69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6",
    "added_lines": [
      "#include \"gd.h\"",
      "#include \"gdtest.h\"",
      "int main",
      "gdImagePtr im",
      "FILE *fp",
      "fp = gdTestFileOpen2(\"gd2\", \"bug00354a.gd2\"",
      "gdTestAssert(fp != NULL",
      "im = gdImageCreateFromGd2(fp",
      "gdTestAssert(im == NULL",
      "fclose(fp",
      "fp = gdTestFileOpen2(\"gd2\", \"bug00354b.gd2\"",
      "gdTestAssert(fp != NULL",
      "im = gdImageCreateFromGd2(fp",
      "gdTestAssert(im == NULL",
      "fclose(fp",
      "return gdNumFailures"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1468,
    "id": "CVE-2016-10160",
    "commit_id": "b28b8b2fee6dfa6fcd13305c581bb835689ac3be",
    "added_lines": [
      "--TEST--",
      "Phar: PHP bug #73768: Memory corruption when loading hostile phar",
      "--SKIPIF--",
      "<?php if (!extension_loaded(\"phar\")) die(\"skip\"); ?>",
      "--FILE--",
      "<?php",
      "chdir(__DIR__",
      "try",
      "$p = Phar::LoadPhar('bug73768.phar', 'alias.phar'",
      "echo \"OK\\n\"",
      "} catch(PharException $e)",
      "echo $e->getMessage",
      "?>",
      "--EXPECTF--",
      "cannot load phar \"%sbug73768.phar\" with implicit alias \"\" under different alias \"alias.phar\""
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "off-by-one",
      "off-by-one error"
    ]
  },
  {
    "index": 1469,
    "id": "CVE-2016-10159",
    "commit_id": "ca46d0acbce55019b970fcd4c1e8a10edfdded93",
    "added_lines": [
      "--TEST--",
      "Phar: PHP bug #73764: Crash while loading hostile phar archive",
      "--SKIPIF--",
      "<?php if (!extension_loaded(\"phar\")) die(\"skip\"); ?>",
      "--FILE--",
      "<?php",
      "chdir(__DIR__",
      "try",
      "$p = Phar::LoadPhar('bug73764.phar', 'alias.phar'",
      "echo \"OK\\n\"",
      "} catch(PharException $e)",
      "echo $e->getMessage",
      "?>",
      "--EXPECTF--",
      "internal corruption of phar \"%sbug73764.phar\" (truncated manifest entry"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1472,
    "id": "CVE-2016-10154",
    "commit_id": "06deeec77a5a689cc94b21a8a91a76e42176685d",
    "added_lines": [
      "#include <linux/crypto.h>",
      "struct crypto_cipher *tfm_des",
      "tfm_des = crypto_alloc_cipher(\"des\", 0, 0",
      "return PTR_ERR(tfm_des",
      "crypto_cipher_setkey(tfm_des, key2, 8",
      "crypto_cipher_encrypt_one(tfm_des, out, in",
      "crypto_free_cipher(tfm_des",
      "return 0"
    ],
    "removed_lines": [
      "#include <crypto/skcipher.h>",
      "int rc",
      "struct crypto_skcipher *tfm_des",
      "struct scatterlist sgin, sgout",
      "struct skcipher_request *req",
      "tfm_des = crypto_alloc_skcipher(\"ecb(des)\", 0, CRYPTO_ALG_ASYNC",
      "rc = PTR_ERR(tfm_des",
      "cifs_dbg(VFS, \"could not allocate des crypto API\\n\"",
      "goto smbhash_err",
      "req = skcipher_request_alloc(tfm_des, GFP_KERNEL",
      "if (!req)",
      "rc = -ENOMEM",
      "goto smbhash_free_skcipher",
      "crypto_skcipher_setkey(tfm_des, key2, 8",
      "sg_init_one(&sgin, in, 8",
      "sg_init_one(&sgout, out, 8",
      "skcipher_request_set_callback(req, 0, NULL, NULL",
      "skcipher_request_set_crypt(req, &sgin, &sgout, 8, NULL",
      "rc = crypto_skcipher_encrypt(req",
      "if (rc",
      "cifs_dbg(VFS, \"could not encrypt crypt key rc: %d\\n\", rc",
      "skcipher_request_free(req",
      "smbhash_free_skcipher:",
      "crypto_free_skcipher(tfm_des",
      "smbhash_err:",
      "return rc"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 4.9,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "interacts incorrectly with the CONFIG_VMAP_STACK option"
    ]
  },
  {
    "index": 1481,
    "id": "CVE-2016-10128",
    "commit_id": "66e3774d279672ee51c3b54545a79d20d1ada834",
    "added_lines": [
      "if (len != 0 && len < PKT_LEN_SIZE",
      "return GIT_ERROR"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1484,
    "id": "CVE-2016-10093",
    "commit_id": "787c0ee906430b772f33ca50b97b8b5ca070faec",
    "added_lines": [
      "uint32 rows, uint32 cols, int outskew, int64 inskew",
      "int64 iskew = (int64)imagew - (int64)tilew",
      "if (colb > iskew)"
    ],
    "removed_lines": [
      "uint32 rows, uint32 cols, int outskew, int inskew",
      "int iskew = imagew - tilew",
      "if (colb + tilew > imagew)"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 1486,
    "id": "CVE-2016-10070",
    "commit_id": "b173a352397877775c51c9a0e9d59eb6ce24c455",
    "added_lines": [
      "quantum_info=DestroyQuantumInfo(quantum_info"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds read"
    ]
  },
  {
    "index": 1489,
    "id": "CVE-2016-10067",
    "commit_id": "0474237508f39c4f783208123431815f1ededb76",
    "added_lines": [
      "if (HeapOverflowSanityCheck(count,quantum) != MagickFalse",
      "if (HeapOverflowSanityCheck(count,quantum) != MagickFalse",
      "if (HeapOverflowSanityCheck(count,quantum) != MagickFalse",
      "+   H e a p O v e r f l o w S a n i t y C h e c k                             %",
      "%                                                                             %",
      "%                                                                             %",
      "%                                                                             %",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "%",
      "%  HeapOverflowSanityCheck() returns MagickTrue if the heap allocation request",
      "%  does not exceed the maximum limits of a size_t otherwise MagickFalse.",
      "%",
      "%  The format of the HeapOverflowSanityCheck method is:",
      "%",
      "%      MagickBooleanType HeapOverflowSanityCheck(const size_t count,",
      "%        const size_t quantum",
      "%",
      "%  A description of each parameter follows:",
      "%",
      "%    o size: the size of the memory in bytes we require.",
      "%",
      "MagickExport MagickBooleanType HeapOverflowSanityCheck(const size_t count,",
      "const size_t quantum",
      "size_t",
      "size",
      "size=count*quantum",
      "if ((count == 0) || (quantum != (size/count",
      "errno=ENOMEM",
      "return(MagickTrue",
      "return(MagickFalse",
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%",
      "%                                                                             %",
      "%                                                                             %",
      "%                                                                             %",
      "if (HeapOverflowSanityCheck(count,quantum) != MagickFalse"
    ],
    "removed_lines": [
      "static MagickBooleanType CheckMemoryOverflow(const size_t count,",
      "const size_t quantum",
      "size_t",
      "size",
      "size=count*quantum",
      "if ((count == 0) || (quantum != (size/count",
      "errno=ENOMEM",
      "return(MagickTrue",
      "return(MagickFalse",
      "if (CheckMemoryOverflow(count,quantum) != MagickFalse",
      "if (CheckMemoryOverflow(count,quantum) != MagickFalse",
      "if (CheckMemoryOverflow(count,quantum) != MagickFalse",
      "if (CheckMemoryOverflow(count,quantum) != MagickFalse"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1490,
    "id": "CVE-2016-10066",
    "commit_id": "f6e9d0d9955e85bdd7540b251cd50d598dacc5e6",
    "added_lines": [
      "status=SetImageExtent(image,image->columns,image->rows",
      "if (status == MagickFalse",
      "InheritException(exception,&image->exception",
      "return(DestroyImageList(image",
      "status=SetImageExtent(image,image->columns,image->rows",
      "if (status == MagickFalse",
      "InheritException(exception,&image->exception",
      "return(DestroyImageList(image"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1492,
    "id": "CVE-2016-10064",
    "commit_id": "f8877abac8e568b2f339cca70c2c3c1b6eaec288",
    "added_lines": [
      "#include \"magick/memory-private.h\"",
      "if (HeapOverflowSanityCheck(rows,sizeof(*tile_pixels)) != MagickFalse",
      "tile_pixels=(uint32 *) AcquireQuantumMemory(columns,",
      "rows*sizeof(*tile_pixels",
      "if (HeapOverflowSanityCheck(image->rows,sizeof(*pixels)) != MagickFalse",
      "sizeof(*pixels"
    ],
    "removed_lines": [
      "if ((number_pixels*sizeof(uint32)) != (MagickSizeType) ((size_t",
      "(number_pixels*sizeof(uint32",
      "tile_pixels=(uint32 *) AcquireQuantumMemory(number_pixels,",
      "sizeof(*tile_pixels",
      "if ((number_pixels*sizeof(uint32)) != (MagickSizeType) ((size_t",
      "(number_pixels*sizeof(uint32",
      "sizeof(uint32"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "SIZE_CHECK"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1493,
    "id": "CVE-2016-10063",
    "commit_id": "2bb6941a2d557f26a2f2049ade466e118eeaab91",
    "added_lines": [
      "status=SetImageExtent(image,image->columns,image->rows",
      "if (status == MagickFalse",
      "InheritException(exception,&image->exception",
      "return(DestroyImageList(image"
    ],
    "removed_lines": [
      "status=SetImageExtent(image,image->columns,image->rows",
      "if (status == MagickFalse",
      "InheritException(exception,&image->exception",
      "return(DestroyImageList(image"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1496,
    "id": "CVE-2016-10059",
    "commit_id": "58cf5bf4fade82e3b510e8f3463a967278a3e410",
    "added_lines": [
      "number_pixels=(MagickSizeType) columns*rows",
      "if ((number_pixels*sizeof(uint32)) != (MagickSizeType) ((size_t",
      "(number_pixels*sizeof(uint32",
      "TIFFClose(tiff",
      "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\""
    ],
    "removed_lines": [
      "size_t",
      "number_pixels",
      "number_pixels=columns*rows"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1498,
    "id": "CVE-2016-10057",
    "commit_id": "10b3823a7619ed22d42764733eb052c4159bc8c1",
    "added_lines": [
      "(void) SetImageType(image,BilevelType"
    ],
    "removed_lines": [
      "(void) SetImageType(image,BilevelType"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1500,
    "id": "CVE-2016-10052",
    "commit_id": "9e187b73a8a1290bb0e1a1c878f8be1917aa8742",
    "added_lines": [
      "<message name=\"ExifProfileSizeExceedsLimit\">",
      "exif profile size exceeds limit and will be truncated",
      "</message>"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1502,
    "id": "CVE-2016-10050",
    "commit_id": "73fb0aac5b958521e1511e179ecc0ad49f70ebaf",
    "added_lines": [
      "offset,",
      "if ((offset < 0) ||",
      "(offset+((size_t) operand*number_planes) > pixel_info_length",
      "if ((offset < 0) ||",
      "(offset+((size_t) operand*number_planes) > pixel_info_length",
      "p=pixels+offset"
    ],
    "removed_lines": [
      "offset,",
      "if (offset+((size_t) operand*number_planes) > pixel_info_length",
      "p=pixels+offset",
      "if (offset+((size_t) operand*number_planes) > pixel_info_length"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "INDEX_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1503,
    "id": "CVE-2016-10049",
    "commit_id": "3e9165285eda6e1bb71172031d3048b51bb443a4",
    "added_lines": [
      "MagickMax(number_planes_filled,4)*sizeof(*pixels",
      "pixel_info_length=image->columns*image->rows*",
      "MagickMax(number_planes_filled,4"
    ],
    "removed_lines": [
      "number_planes_filled*sizeof(*pixels",
      "pixel_info_length=image->columns*image->rows*number_planes_filled"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1505,
    "id": "CVE-2016-10046",
    "commit_id": "989f9f88ea6db09b99d25586e912c921c0da8d3f",
    "added_lines": [
      "length=length*BezierQuantum"
    ],
    "removed_lines": [
      "length=length*BezierQuantum/2"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 8"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "crafted image file",
      "buffer overflow"
    ]
  },
  {
    "index": 1508,
    "id": "CVE-2016-10012",
    "commit_id": "3095060f479b86288e31c79ecbc5131a66bcd2f9",
    "added_lines": [
      "#\t$OpenBSD: Makefile,v 1.90 2016/09/28 16:33:07 djm Exp $",
      "monitor.c monitor_wrap.c \\"
    ],
    "removed_lines": [
      "#\t$OpenBSD: Makefile,v 1.89 2016/08/13 17:47:41 markus Exp $",
      "monitor_mm.c monitor.c monitor_wrap.c \\"
    ],
    "cause": [
      "Uncategorized Cluster 8"
    ],
    "effect": " +Priv",
    "score": 7.2,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "Overflow +Priv ",
    "summary": [
      "bounds check"
    ]
  },
  {
    "index": 1515,
    "id": "CVE-2016-9933",
    "commit_id": "863d37ea66d5c960db08d6f4a2cbd2518f0f80d1",
    "added_lines": [
      "--TEST--",
      "Bug #72696 (imagefilltoborder stackoverflow on truecolor images",
      "--SKIPIF--",
      "<?php",
      "if (!extension_loaded('gd')) die('skip gd extension not available'",
      "?>",
      "--FILE--",
      "<?php",
      "$im = imagecreatetruecolor(10, 10",
      "imagefilltoborder($im, 0, 0, 1, -2",
      "?>",
      "===DONE===",
      "--EXPECT--",
      "===DONE==="
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "segmentation violation",
      "stack consumption"
    ]
  },
  {
    "index": 1521,
    "id": "CVE-2016-9560",
    "commit_id": "1abc2e5a401a4bf1d5ca4df91358ce5df111f495",
    "added_lines": [
      "jpc_tsfb_band_t bnds[JPC_MAXBANDS]"
    ],
    "removed_lines": [
      "jpc_tsfb_band_t bnds[64]"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1523,
    "id": "CVE-2016-9557",
    "commit_id": "d42b2388f7f8e0332c846675133acea151fc557a",
    "added_lines": [
      "2_crashes.bmp",
      "#jasper-doublefree-mem_close.jpg",
      "# Thie file 2_crashes.bmp must be skipped since it will try",
      "# to allocate a huge palette which can cause an ASAN failure.",
      "imginfo_opts=",
      "imginfo_opts+=(--max-samples 100000000",
      "ASAN_OPTIONS=\"${special_asan_options[*]}\" \\",
      "\"$imginfo\" \"${imginfo_opts[@]}\" < \"$in_file\""
    ],
    "removed_lines": [
      "2_crashes.bmp|jasper-doublefree-mem_close.jpg",
      "ASAN_OPTIONS=\"${special_asan_options[*]}\" \"$imginfo\" < \"$in_file\""
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1524,
    "id": "CVE-2016-9556",
    "commit_id": "ce98a7acbcfca7f0a178f4b1e7b957e419e0cc99",
    "added_lines": [
      "if ((iris_info.dimension == 0) || (iris_info.dimension > 3",
      "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\""
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 8"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "crafted image file",
      "out-of-bounds"
    ]
  },
  {
    "index": 1526,
    "id": "CVE-2016-9400",
    "commit_id": "ff254722a2683867fcb3e67569ffd36226c4bc62",
    "added_lines": [
      "MAX_PARTS\t= 64,",
      "MAX_SIZE\t= MAX_PARTS*1024"
    ],
    "removed_lines": [
      "MAX_SIZE=64*1024"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 1532,
    "id": "CVE-2016-9387",
    "commit_id": "d91198abd00fc435a397fe6bad906a4c1748e9cf",
    "added_lines": [
      "size_t size",
      "if (!jas_safe_size_mul(dec->numhtiles, dec->numvtiles, &size))",
      "return -1",
      "dec->numtiles = size"
    ],
    "removed_lines": [
      "dec->numtiles = dec->numhtiles * dec->numvtiles"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "INDEX_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "assertion failure",
      "integer overflow"
    ]
  },
  {
    "index": 1534,
    "id": "CVE-2016-9298",
    "commit_id": "3cbfb163cff9e5b8cdeace8312e9bfee810ed02b",
    "added_lines": [
      "$example->Label('Wavelet Denoise'"
    ],
    "removed_lines": [
      "$example->Label('WaveletDenoise'"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "heap overflow"
    ]
  },
  {
    "index": 1535,
    "id": "CVE-2016-9262",
    "commit_id": "634ce8e8a5accc0fa05dd2c20d42b4749d4b2735",
    "added_lines": [
      "size_t bufsize_",
      "It will eventually replace jas_stream_memopen. */",
      "jas_stream_t *jas_stream_memopen2(char *buf, size_t bufsize"
    ],
    "removed_lines": [
      "int bufsize_"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 7"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "use after free",
      "integer overflow"
    ]
  },
  {
    "index": 1536,
    "id": "CVE-2016-9132",
    "commit_id": "987ad747db6d0d7e36f840398f3cf02e2fbfd90f",
    "added_lines": [
      "#ifndef BOTAN_UTILS_SAFE_INT_H__",
      "#define BOTAN_UTILS_SAFE_INT_H__",
      "#include <botan/exceptn.h>",
      "#include <string>",
      "namespace Botan",
      "class Integer_Overflow_Detected : public Exception",
      "public:",
      "Integer_Overflow_Detected(const std::string& file, int line) :",
      "Exception(\"Integer overflow detected at \" + file + \":\" + std::to_string(line",
      "inline size_t checked_add(size_t x, size_t y, const char* file, int line",
      "size_t z = x + y",
      "if(z < x",
      "throw Integer_Overflow_Detected(file, line",
      "return z",
      "#define BOTAN_CHECKED_ADD(x,y) checked_add(x,y,__FILE__,__LINE__",
      "#endif"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": " Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1539,
    "id": "CVE-2016-8860",
    "commit_id": "3cea86eb2fbb65949673eb4ba8ebb695c87a57ce",
    "added_lines": [
      "#define SENTINEL_LEN 4",
      "#define CHUNK_OVERHEAD (CHUNK_HEADER_LEN + SENTINEL_LEN",
      "#define CHUNK_ALLOC_SIZE(memlen) (CHUNK_OVERHEAD + (memlen",
      "#define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_OVERHEAD",
      "#define DEBUG_SENTINEL",
      "#ifdef DEBUG_SENTINEL",
      "#define DBG_S(s) s",
      "#else",
      "#define DBG_S(s) (void)0",
      "#endif",
      "#define CHUNK_SET_SENTINEL(chunk, alloclen) do {                        \\",
      "uint8_t *a = (uint8_t*) &(chunk)->mem[(chunk)->memlen];             \\",
      "DBG_S(uint8_t *b = &((uint8_t*)(chunk))[(alloclen)-SENTINEL_LEN]);  \\",
      "DBG_S(tor_assert(a == b));                                          \\",
      "memset(a,0,SENTINEL_LEN);                                           \\",
      "} while (0",
      "CHUNK_SET_SENTINEL(ch, alloc",
      "const size_t memlen_orig = chunk->memlen",
      "const size_t orig_alloc = CHUNK_ALLOC_SIZE(memlen_orig",
      "const size_t new_alloc = CHUNK_ALLOC_SIZE(sz",
      "chunk = tor_realloc(chunk, new_alloc",
      "tor_assert(chunk->DBG_alloc == orig_alloc",
      "chunk->DBG_alloc = new_alloc",
      "total_bytes_allocated_in_chunks += new_alloc - orig_alloc",
      "CHUNK_SET_SENTINEL(chunk, new_alloc"
    ],
    "removed_lines": [
      "#define CHUNK_ALLOC_SIZE(memlen) (CHUNK_HEADER_LEN + (memlen",
      "#define CHUNK_SIZE_WITH_ALLOC(memlen) ((memlen) - CHUNK_HEADER_LEN",
      "size_t memlen_orig = chunk->memlen",
      "chunk = tor_realloc(chunk, CHUNK_ALLOC_SIZE(sz",
      "tor_assert(chunk->DBG_alloc == CHUNK_ALLOC_SIZE(memlen_orig",
      "chunk->DBG_alloc = CHUNK_ALLOC_SIZE(sz",
      "total_bytes_allocated_in_chunks +=",
      "CHUNK_ALLOC_SIZE(sz) - CHUNK_ALLOC_SIZE(memlen_orig"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "MEM_ZERO",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "did not ensure that NUL termination was present"
    ]
  },
  {
    "index": 1545,
    "id": "CVE-2016-8687",
    "commit_id": "e37b620fe8f14535d737e89a4dcabaed4517bf1a",
    "added_lines": [
      "if (i > (sizeof(outbuff) - 128))"
    ],
    "removed_lines": [
      "if (i > (sizeof(outbuff) - 20))"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1546,
    "id": "CVE-2016-8677",
    "commit_id": "6e48aa92ff4e6e95424300ecd52a9ea453c19c60",
    "added_lines": [
      "quantum_info=(QuantumInfo *) NULL",
      "break",
      "Allocate memory for the image and pixel buffer.",
      "quantum_info=AcquireQuantumInfo(image_info,image",
      "if (quantum_info == (QuantumInfo *) NULL",
      "TIFFClose(tiff",
      "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\"",
      "if (sample_format == SAMPLEFORMAT_UINT",
      "status=SetQuantumFormat(image,quantum_info,UnsignedQuantumFormat",
      "if (sample_format == SAMPLEFORMAT_INT",
      "status=SetQuantumFormat(image,quantum_info,SignedQuantumFormat",
      "if (sample_format == SAMPLEFORMAT_IEEEFP",
      "status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat",
      "if (status == MagickFalse",
      "TIFFClose(tiff",
      "quantum_info=DestroyQuantumInfo(quantum_info",
      "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\"",
      "status=MagickTrue",
      "switch (photometric",
      "case PHOTOMETRIC_MINISBLACK:",
      "quantum_info->min_is_white=MagickFalse",
      "break",
      "case PHOTOMETRIC_MINISWHITE:",
      "quantum_info->min_is_white=MagickTrue",
      "break",
      "default:",
      "break",
      "tiff_status=TIFFGetFieldDefaulted(tiff,TIFFTAG_EXTRASAMPLES,&extra_samples,",
      "&sample_info",
      "if (tiff_status == 1",
      "(void) SetImageProperty(image,\"tiff:alpha\",\"unspecified\",exception",
      "if (extra_samples == 0",
      "if ((samples_per_pixel == 4) && (photometric == PHOTOMETRIC_RGB",
      "image->alpha_trait=BlendPixelTrait",
      "else",
      "for (i=0; i < extra_samples; i++",
      "image->alpha_trait=BlendPixelTrait",
      "if (sample_info[i] == EXTRASAMPLE_ASSOCALPHA",
      "SetQuantumAlphaType(quantum_info,DisassociatedQuantumAlpha",
      "(void) SetImageProperty(image,\"tiff:alpha\",\"associated\",",
      "exception",
      "else",
      "if (sample_info[i] == EXTRASAMPLE_UNASSALPHA",
      "(void) SetImageProperty(image,\"tiff:alpha\",\"unassociated\",",
      "exception",
      "if (quantum_info != (QuantumInfo *) NULL",
      "quantum_info=DestroyQuantumInfo(quantum_info"
    ],
    "removed_lines": [
      "Allocate memory for the image and pixel buffer.",
      "quantum_info=AcquireQuantumInfo(image_info,image",
      "if (quantum_info == (QuantumInfo *) NULL",
      "TIFFClose(tiff",
      "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\"",
      "if (sample_format == SAMPLEFORMAT_UINT",
      "status=SetQuantumFormat(image,quantum_info,UnsignedQuantumFormat",
      "if (sample_format == SAMPLEFORMAT_INT",
      "status=SetQuantumFormat(image,quantum_info,SignedQuantumFormat",
      "if (sample_format == SAMPLEFORMAT_IEEEFP",
      "status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat",
      "if (status == MagickFalse",
      "TIFFClose(tiff",
      "quantum_info=DestroyQuantumInfo(quantum_info",
      "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\"",
      "status=MagickTrue",
      "switch (photometric",
      "case PHOTOMETRIC_MINISBLACK:",
      "quantum_info->min_is_white=MagickFalse",
      "break",
      "case PHOTOMETRIC_MINISWHITE:",
      "quantum_info->min_is_white=MagickTrue",
      "break",
      "default:",
      "break",
      "tiff_status=TIFFGetFieldDefaulted(tiff,TIFFTAG_EXTRASAMPLES,&extra_samples,",
      "&sample_info",
      "if (tiff_status == 1",
      "(void) SetImageProperty(image,\"tiff:alpha\",\"unspecified\",exception",
      "if (extra_samples == 0",
      "if ((samples_per_pixel == 4) && (photometric == PHOTOMETRIC_RGB",
      "image->alpha_trait=BlendPixelTrait",
      "else",
      "for (i=0; i < extra_samples; i++",
      "image->alpha_trait=BlendPixelTrait",
      "if (sample_info[i] == EXTRASAMPLE_ASSOCALPHA",
      "SetQuantumAlphaType(quantum_info,DisassociatedQuantumAlpha",
      "(void) SetImageProperty(image,\"tiff:alpha\",\"associated\",",
      "exception",
      "else",
      "if (sample_info[i] == EXTRASAMPLE_UNASSALPHA",
      "(void) SetImageProperty(image,\"tiff:alpha\",\"unassociated\",",
      "exception",
      "quantum_info=DestroyQuantumInfo(quantum_info",
      "break",
      "quantum_info=DestroyQuantumInfo(quantum_info"
    ],
    "cause": [
      "Uncategorized Cluster 8",
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "crafted image file",
      "memory allocation failure"
    ]
  },
  {
    "index": 1548,
    "id": "CVE-2016-8670",
    "commit_id": "53110871935244816bbb9d131da0bccff734bfe9",
    "added_lines": [
      "if(remain <= 0)"
    ],
    "removed_lines": [
      "if(remain == 0)"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer signedness error",
      "buffer overflow"
    ]
  },
  {
    "index": 1550,
    "id": "CVE-2016-8636",
    "commit_id": "647bf3d8a8e5777319da92af672289b2a6c4dc66",
    "added_lines": [
      "if (iova < mem->iova ||",
      "length > mem->length ||",
      "iova > mem->iova + mem->length - length",
      "return -EFAULT",
      "return 0"
    ],
    "removed_lines": [
      "return ((iova < mem->iova) ||",
      "((iova + length) > (mem->iova + mem->length))) ?",
      "-EFAULT : 0"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr. +Info",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. +Info ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1552,
    "id": "CVE-2016-7970",
    "commit_id": "08e754612019ed84d1db0d1fc4f5798248decd75",
    "added_lines": [
      "double mat_freq[14]"
    ],
    "removed_lines": [
      "double mat_freq[13]"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "unspecified vectors"
    ]
  },
  {
    "index": 1573,
    "id": "CVE-2016-7525",
    "commit_id": "5f16640725b1225e6337c62526e6577f0f88edb8",
    "added_lines": [
      "return(((image->columns+7)/8)*GetPSDPacketSize(image"
    ],
    "removed_lines": [
      "return((image->columns+7)/8"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds read"
    ]
  },
  {
    "index": 1575,
    "id": "CVE-2016-7521",
    "commit_id": "30eec879c8b446b0ea9a3bb0da1a441cc8482bc4",
    "added_lines": [
      "CheckNumberCompactPixels"
    ],
    "removed_lines": [
      "CheckNumberCompactPixels"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds read"
    ]
  },
  {
    "index": 1576,
    "id": "CVE-2016-7520",
    "commit_id": "14e606db148d6ebcaae20f1e1d6d71903ca4a556",
    "added_lines": [
      "count=FormatLocaleString(header,MagickPathExtent,\"GAMMA=%g\\n\",",
      "image->gamma",
      "pixels=(unsigned char *) AcquireQuantumMemory(image->columns+128,4*",
      "(void) ResetMagickMemory(pixels,0,4*(image->columns+128)*sizeof(*pixels"
    ],
    "removed_lines": [
      "count=FormatLocaleString(header,MagickPathExtent,\"GAMMA=%g\\n\",image->gamma",
      "pixels=(unsigned char *) AcquireQuantumMemory(image->columns,4*"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds read"
    ]
  },
  {
    "index": 1580,
    "id": "CVE-2016-7480",
    "commit_id": "61cdd1255d5b9c8453be71aacbbf682796ac77d4",
    "added_lines": [
      "ZVAL_UNDEF(&entry",
      "ZVAL_UNDEF(&inf",
      "if (Z_TYPE(entry) != IS_OBJECT)",
      "zval_ptr_dtor(&entry",
      "zval_ptr_dtor(&inf",
      "goto outexcept"
    ],
    "removed_lines": [
      "if (Z_TYPE(entry) != IS_OBJECT)",
      "zval_ptr_dtor(&entry",
      "goto outexcept",
      "} else",
      "ZVAL_UNDEF(&inf"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "uninitialized memory"
    ]
  },
  {
    "index": 1590,
    "id": "CVE-2016-6872",
    "commit_id": "2c9a8fcc73a151608634d3e712973d192027c271",
    "added_lines": [
      "Fatal error: String length exceeded 2^31-2: 15008494201 in %s/test/slow/string_length_overflow/implode.php on line 5"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "unknown vectors",
      "integer overflow"
    ]
  },
  {
    "index": 1591,
    "id": "CVE-2016-6871",
    "commit_id": "c00fc9d3003eb06226b58b6a48555f1456ee2475",
    "added_lines": [
      "int(1"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "unknown vectors",
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 1593,
    "id": "CVE-2016-6823",
    "commit_id": "4cc6ec8a4197d4c008577127736bf7985d632323",
    "added_lines": [
      "if ((image->columns != (signed int) image->columns) ||",
      "(image->rows != (signed int) image->rows",
      "ThrowWriterException(ImageError,\"WidthOrHeightExceedsLimit\"",
      "bmp_info.image_size=(unsigned long) (bytes_per_line*image->rows"
    ],
    "removed_lines": [
      "bmp_info.image_size=(unsigned int) (bytes_per_line*image->rows"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write",
      "integer overflow"
    ]
  },
  {
    "index": 1599,
    "id": "CVE-2016-5873",
    "commit_id": "3724cd76a28be1d6049b5537232e97ac",
    "added_lines": [
      "--TEST--",
      "Buffer overflow in HTTP url parsing functions",
      "--SKIPIF--",
      "<?php",
      "include \"skipif.inc\"",
      "?>",
      "--FILE--",
      "<?php",
      "echo \"Test\\n\"",
      "try",
      "echo new http\\Message(file_get_contents(__DIR__.\"/data/bug71719.bin\"), false",
      "} catch (Exception $e)",
      "echo $e",
      "?>",
      "===DONE===",
      "--EXPECTF--",
      "Test",
      "%r(exception ')?%rhttp\\Exception\\BadMessageException%r(' with message '|: )%rhttp\\Message::__construct(): Could not parse HTTP protocol version 'HTTP/%s.0'%r'?%r in %sbug71719.php:5",
      "Stack trace:",
      "#0 %sbug71719.php(5): http\\Message->__construct('\\x80\\xACTd 5 HTTP/1.1...', false",
      "#1 {main",
      "===DONE==="
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "MEM_ALLOC",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1600,
    "id": "CVE-2016-5735",
    "commit_id": "b7c217680cda02dddced245d237ebe8c383be285",
    "added_lines": [
      "if (rowbytes > INT_MAX/mainprog_ptr->height)",
      "png_destroy_read_struct(&png_ptr, &info_ptr, NULL",
      "return PNG_OUT_OF_MEMORY_ERROR"
    ],
    "removed_lines": [
      "if (mainprog_ptr->width > INT_MAX/mainprog_ptr->height)",
      "png_destroy_read_struct(&png_ptr, &info_ptr, NULL",
      "return PNG_OUT_OF_MEMORY_ERROR;"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 1602,
    "id": "CVE-2016-4796",
    "commit_id": "162f6199c0cd3ec1c6c6dc65e41b2faab92b2d91",
    "added_lines": [
      "# issue 774",
      "!opj_decompress -i @INPUT_NR_PATH@/issue774.jp2 -o @TEMP_PATH@/issue774.png"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1608,
    "id": "CVE-2016-1245",
    "commit_id": "cfb1fae25f8c092e0d17073eaf7bd428ce1cd546",
    "added_lines": [
      "len = rtadv_recv_packet (sock, buf, sizeof (buf), &from, &ifindex, &hoplimit"
    ],
    "removed_lines": [
      "len = rtadv_recv_packet (sock, buf, BUFSIZ, &from, &ifindex, &hoplimit"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "SIZE_CHECK"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1613,
    "id": "CVE-2015-8957",
    "commit_id": "bd96074b254c6607a0f7731e59f923ad19d5a46d",
    "added_lines": [
      "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse",
      "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\""
    ],
    "removed_lines": [
      "image->storage_class=PseudoClass",
      "case RMT_NONE:",
      "if (sun_info.depth < 24",
      "Create linear color ramp.",
      "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse",
      "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\"",
      "break",
      "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse",
      "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1620,
    "id": "CVE-2015-8026",
    "commit_id": "2e86ae5f81da11f11673d0546efb525af02b7786",
    "added_lines": [
      "if (ef->sb->sector_bits < 9",
      "exfat_close(ef->dev",
      "exfat_error(\"too small sector size: 2^%hhd\", ef->sb->sector_bits",
      "free(ef->sb",
      "return -EIO",
      "if ((int) ef->sb->sector_bits + (int) ef->sb->spc_bits > 25",
      "exfat_close(ef->dev",
      "exfat_error(\"too big cluster size: 2^(%hhd+%hhd)\",",
      "ef->sb->sector_bits, ef->sb->spc_bits",
      "free(ef->sb",
      "return -EIO"
    ],
    "removed_lines": [
      "if ((int) ef->sb->sector_bits + (int) ef->sb->spc_bits > 25",
      "free(ef->zero_cluster",
      "exfat_close(ef->dev",
      "exfat_error(\"too big cluster size: 2^%d\",",
      "(int) ef->sb->sector_bits + (int) ef->sb->spc_bits",
      "free(ef->sb",
      "return -EIO"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_FREE",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "MEM_FREE",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_FREE",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP",
      "MEM_FREE",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "infinite loop",
      "buffer overflow"
    ]
  },
  {
    "index": 1622,
    "id": "CVE-2015-7510",
    "commit_id": "cb31827d62066a04b02111df3052949fda4b6888",
    "added_lines": [
      "if (e - p > HOST_NAME_MAX - 1)",
      "goto not_found",
      "if (e - p > HOST_NAME_MAX - 1)",
      "goto not_found"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1632,
    "id": "CVE-2015-4645",
    "commit_id": "f95864afe8833fe3ad782d714b41378e860977b1",
    "added_lines": [
      "printf(\"unsquashfs version 4.3-git (2019/07/15)\\n\");\\"
    ],
    "removed_lines": [
      "printf(\"unsquashfs version 4.3-git (2019/07/05)\\n\");\\"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 1642,
    "id": "CVE-2015-2310",
    "commit_id": "f343f0dbd0a2e87f17cd74f14186ed73e3fbdbfa",
    "added_lines": [
      "KJ_REQUIRE(elementTag->structRef.wordSize() / ELEMENTS *",
      "ElementCount64(count) <= wordCount,",
      "KJ_REQUIRE(wordsPerElement * ElementCount64(elementCount) <= wordCount,",
      "KJ_REQUIRE(ElementCount64(size) * wordsPerElement <= wordCount,"
    ],
    "removed_lines": [
      "KJ_REQUIRE(elementTag->structRef.wordSize() / ELEMENTS * count <= wordCount,",
      "KJ_REQUIRE(wordsPerElement * elementCount <= wordCount,",
      "KJ_REQUIRE(size * wordsPerElement <= wordCount,"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  +Info",
    "score": 6.4,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow +Info ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1645,
    "id": "CVE-2015-1522",
    "commit_id": "6cedd67c381ff22fde653adf02ee31caf66c81a0",
    "added_lines": [
      "int AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len"
    ],
    "removed_lines": [
      "bool AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer over-read",
      "buffer overflow"
    ]
  },
  {
    "index": 1656,
    "id": "CVE-2014-1235",
    "commit_id": "d266bb2b4154d11c27252b56d86963aef4434750",
    "added_lines": [
      "agxbput (&xb, str",
      "sprintf(buf,\" in line %d near '\", line_num"
    ],
    "removed_lines": [
      "sprintf(buf,\" %s in line %d near '\", str,line_num"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "MEM_COPY"
    ],
    "unsafe_features": [
      "MEM_COPY"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1662,
    "id": "CVE-2007-6761",
    "commit_id": "0b29669c065f60501e7289e1950fa2a618962358",
    "added_lines": [
      "dprintk(2,\"vm_open %p [count=%u,vma=%08lx-%08lx]\\n\",map,",
      "dprintk(2,\"vm_close %p [count=%u,vma=%08lx-%08lx]\\n\",map,",
      "map = q->bufs[first]->map = kzalloc(sizeof(struct videobuf_mapping),GFP_KERNEL"
    ],
    "removed_lines": [
      "dprintk(2,\"vm_open %p [count=%d,vma=%08lx-%08lx]\\n\",map,",
      "dprintk(2,\"vm_close %p [count=%d,vma=%08lx-%08lx]\\n\",map,",
      "map = q->bufs[first]->map = kmalloc(sizeof(struct videobuf_mapping),GFP_KERNEL"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.6,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 1664,
    "id": "CVE-2006-3635",
    "commit_id": "4dcc29e1574d88f4465ba865ed82800032f76418",
    "added_lines": [
      "extern char __start___rse_patchlist[], __end___rse_patchlist[]"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "stack consumption"
    ]
  },
  {
    "index": 1669,
    "id": "CVE-2018-1999011",
    "commit_id": "2b46ebdbff1d8dec7a3d8ea280a612b91a582869",
    "added_lines": [
      "if (size_bmp > BMP_HEADER_SIZE &&",
      "size_bmp < INT_MAX - AV_INPUT_BUFFER_PADDING_SIZE)"
    ],
    "removed_lines": [
      "if (size_bmp > BMP_HEADER_SIZE)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "heap-buffer-overflow",
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 1678,
    "id": "CVE-2018-1000524",
    "commit_id": "252c1ca184cb38e1acb917aa0e451c5f08519996",
    "added_lines": [
      "size_t              tilemap_size",
      "tilemap_size = x_size * y_size * sizeof(struct map_tile",
      "if (x_size == 0 || tilemap_size / x_size / sizeof(struct map_tile) != y_size",
      "|| !(tilemap = malloc(tilemap_size"
    ],
    "removed_lines": [
      "if (!(tilemap = malloc(x_size * y_size * sizeof(struct map_tile"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_ALLOC",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1680,
    "id": "CVE-2018-1000127",
    "commit_id": "a8c4a82787b8b6c256d61bd5c42fb7f92d1bae00",
    "added_lines": [
      "#define IT_REFCOUNT_LIMIT 60000",
      "static inline item* limited_get(char *key, size_t nkey, conn *c)",
      "item *it = item_get(key, nkey, c, DO_UPDATE",
      "if (it && it->refcount > IT_REFCOUNT_LIMIT)",
      "item_remove(it",
      "it = NULL",
      "return it",
      "it = limited_get(key, nkey, c"
    ],
    "removed_lines": [
      "it = item_get(key, nkey, c, DO_UPDATE"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1684,
    "id": "CVE-2018-1000052",
    "commit_id": "8cf30aa2be256eba07bb1cefb998c52326e846e7",
    "added_lines": [
      "TEST(FormatTest, Regression)",
      "fmt::format(\"...........{:<77777.7p}\", \"foo\""
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "invalid write"
    ]
  },
  {
    "index": 1685,
    "id": "CVE-2018-1000050",
    "commit_id": "244d83bc3d859293f55812d48b3db168e581f6ab",
    "added_lines": [
      "unsigned int actual_size = rtype == 2 ? n*2 : n",
      "unsigned int limit_r_begin = (r->begin < actual_size ? r->begin : actual_size",
      "unsigned int limit_r_end   = (r->end   < actual_size ? r->end   : actual_size",
      "int n_read = limit_r_end - limit_r_begin",
      "unsigned int actual_size = f->blocksize_1 / 2",
      "unsigned int limit_r_begin = r->begin < actual_size ? r->begin : actual_size",
      "unsigned int limit_r_end   = r->end   < actual_size ? r->end   : actual_size",
      "int n_read = limit_r_end - limit_r_begin",
      "1.12    - 2017/11/21 - limit residue begin/end to blocksize/2 to avoid large temp allocs in bad/corrupt files",
      "1.11    - 2017/07/23 - fix MinGW compilation"
    ],
    "removed_lines": [
      "int n_read = r->end - r->begin",
      "int n_read = r->end - r->begin"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1687,
    "id": "CVE-2018-20542",
    "commit_id": "151481489192e6d1997f8bde52c5c425ea41741d",
    "added_lines": [
      "master-1.10-48"
    ],
    "removed_lines": [
      "master-1.10-47"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap-based buffer-overflow"
    ]
  },
  {
    "index": 1691,
    "id": "CVE-2018-20460",
    "commit_id": "df167c7db545953bb7f71c72e98e7a3ca0c793bf",
    "added_lines": [
      "if (operand >= MAX_OPERANDS)",
      "eprintf (\"Too many operands\\n\"",
      "return false"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1707,
    "id": "CVE-2018-19199",
    "commit_id": "f76275d4a91b28d687250525d3a0c5509bbd666f",
    "added_lines": [
      "#include <limits.h>",
      "int keyRequiredChars",
      "int valueRequiredChars",
      "if ((keyLen >= INT_MAX / worstCase) || (valueLen >= INT_MAX / worstCase))",
      "return URI_ERROR_OUTPUT_TOO_LARGE",
      "keyRequiredChars = worstCase * keyLen",
      "valueRequiredChars = worstCase * valueLen"
    ],
    "removed_lines": [
      "const int keyRequiredChars = worstCase * keyLen",
      "const int valueRequiredChars = worstCase * valueLen"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1709,
    "id": "CVE-2018-19115",
    "commit_id": "f28015671a4b04785859d1b4b1327b367b6a10e9",
    "added_lines": [
      "unsigned long code",
      "while (buffer < end && *buffer != ' ' && *buffer != '\\r'",
      "buffer++",
      "buffer++",
      "if (buffer + 3 >= end || *buffer == ' ' || buffer[3] != ' '",
      "return 0",
      "code = strtoul(buffer, &end, 10",
      "if (buffer + 3 != end",
      "return 0"
    ],
    "removed_lines": [
      "char *buf_code",
      "char *begin",
      "size_t inc = 0",
      "int code",
      "buf_code = (char *)MALLOC(10",
      "while (buffer < end && *buffer++ != ' ')",
      "begin = buffer",
      "while (buffer < end && *buffer++ != ' '",
      "inc++",
      "strncat(buf_code, begin, inc",
      "code = atoi(buf_code",
      "FREE(buf_code"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Overflow ",
    "summary": [
      "status code",
      "buffer overflow"
    ]
  },
  {
    "index": 1714,
    "id": "CVE-2018-18928",
    "commit_id": "53d8c8f3d181d87a6aa925b449b51c4a2c922a51",
    "added_lines": [
      "result = nf.parse(\".0003e-2147483644\"",
      "assertEquals(\"Should not overflow\",",
      "\"0\", result.toString"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1724,
    "id": "CVE-2018-17942",
    "commit_id": "278b4175c9d7dd47c1a3071554aac02add3b3c35",
    "added_lines": [
      "if (size < 5 + 1",
      "ASSERT (result != buf",
      "ASSERT (memcmp (buf + size, &\"DEADBEEF\"[size], 8 - size) == 0",
      "if (result != buf",
      "free (result",
      "for (size = 0; size <= 8; size++",
      "size_t length",
      "char *result",
      "memcpy (buf, \"DEADBEEF\", 8",
      "length = size",
      "result = my_asnprintf (buf, &length, \"%2.0f\", 1.6314159265358979e+125",
      "ASSERT (result != NULL",
      "ASSERT (strcmp (result, \"163141592653589790215729350939528493057529598899734151772468186268423257777068536614838678161083520756952076273094236944990208\") == 0",
      "ASSERT (length == 126",
      "if (size < 126 + 1"
    ],
    "removed_lines": [
      "if (size < 6"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "MEM_FREE",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_COPY",
      "INDEX_OP",
      "MEM_COPY",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "'0' character",
      "buffer overflow"
    ]
  },
  {
    "index": 1725,
    "id": "CVE-2018-17570",
    "commit_id": "4a7c27bfe98f409623d4d857894d017ff0672cc9#diff-515c81af848352583bff286d6224875f",
    "added_lines": [
      "# define UT_WS_SVR_MAX_HEADER_SIZE 1024"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": " Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1726,
    "id": "CVE-2018-17569",
    "commit_id": "4a7c27bfe98f409623d4d857894d017ff0672cc9#diff-9fabc53ea796ec492aef432594298baa",
    "added_lines": [
      "# define UT_WS_SVR_MAX_HEADER_SIZE 1024"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": " Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1727,
    "id": "CVE-2018-17568",
    "commit_id": "4a7c27bfe98f409623d4d857894d017ff0672cc9#diff-0c23effa84a7b85053bac7981a8580c8",
    "added_lines": [
      "# define UT_WS_SVR_MAX_HEADER_SIZE 1024"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": " Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1729,
    "id": "CVE-2018-17407",
    "commit_id": "6ed0077520e2b0da1fd060c7f88db7b2e6068e4c",
    "added_lines": [
      "alloc_array(t1_buf, strlen(t1_line_array) + strlen(t1_buf_array) + 1, T1_BUF_SIZE",
      "alloc_array(t1_line, strlen(t1_buf_array) + 1, T1_BUF_SIZE"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 1736,
    "id": "CVE-2018-17182",
    "commit_id": "7a9cdebdcc17e426fb5287e4a82db1dfe86339b2",
    "added_lines": [],
    "removed_lines": [
      "void vmacache_flush_all(struct mm_struct *mm",
      "struct task_struct *g, *p",
      "count_vm_vmacache_event(VMACACHE_FULL_FLUSHES",
      "if (atomic_read(&mm->mm_users) == 1",
      "return",
      "rcu_read_lock",
      "for_each_process_thread(g, p)",
      "if (mm == p->mm",
      "vmacache_flush(p",
      "rcu_read_unlock"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": " +Priv",
    "score": 7.2,
    "safe_features": [],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow +Priv ",
    "summary": [
      "use-after-free"
    ]
  },
  {
    "index": 1741,
    "id": "CVE-2018-16839",
    "commit_id": "f3a24d7916b9173c69a3e0ee790102993833d6c5",
    "added_lines": [
      "if((ulen > SIZE_T_MAX/4) || (plen > (SIZE_T_MAX/2 - 2"
    ],
    "removed_lines": [
      "if((ulen > SIZE_T_MAX/2) || (plen > (SIZE_T_MAX/2 - 2"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overrun"
    ]
  },
  {
    "index": 1752,
    "id": "CVE-2018-16435",
    "commit_id": "768f70ca405cd3159d990e962d54456773bb8cf8",
    "added_lines": [
      "if (t -> nSamples < 0 || t->nSamples > 0x7ffe || t->nPatches < 0 || t->nPatches > 0x7ffe",
      "SynError(it8, \"AllocateDataSet: too much data\"",
      "else",
      "t->Data = (char**)AllocChunk(it8, ((cmsUInt32Number)t->nSamples + 1) * ((cmsUInt32Number)t->nPatches + 1) * sizeof(char*",
      "if (t->Data == NULL)",
      "SynError(it8, \"AllocateDataSet: Unable to allocate data array\""
    ],
    "removed_lines": [
      "t-> Data = (char**)AllocChunk (it8, ((cmsUInt32Number) t->nSamples + 1) * ((cmsUInt32Number) t->nPatches + 1) *sizeof (char*",
      "if (t->Data == NULL)",
      "SynError(it8, \"AllocateDataSet: Unable to allocate data array\""
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 1758,
    "id": "CVE-2018-16422",
    "commit_id": "360e95d45ac4123255a4c796db96337f332160ad#diff-d64c08c80437cf0006ada91e50f20ba0",
    "added_lines": [
      "strncat(line, buf, sizeof line",
      "strncat(line, \" \", sizeof line",
      "line[(sizeof line)-1] = '\\0';"
    ],
    "removed_lines": [
      "strcat(line, buf",
      "strcat(line, \" \""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "SIZE_CHECK",
      "SIZE_CHECK",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1759,
    "id": "CVE-2018-16421",
    "commit_id": "360e95d45ac4123255a4c796db96337f332160ad#diff-848b13147a344ba2c6361d91ca77feb1",
    "added_lines": [
      "strncat(line, buf, sizeof line",
      "strncat(line, \" \", sizeof line",
      "line[(sizeof line)-1] = '\\0';"
    ],
    "removed_lines": [
      "strcat(line, buf",
      "strcat(line, \" \""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "SIZE_CHECK",
      "SIZE_CHECK",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1760,
    "id": "CVE-2018-16420",
    "commit_id": "360e95d45ac4123255a4c796db96337f332160ad#diff-b36536074d13447fbbec061e0e64d15d",
    "added_lines": [
      "strncat(line, buf, sizeof line",
      "strncat(line, \" \", sizeof line",
      "line[(sizeof line)-1] = '\\0';"
    ],
    "removed_lines": [
      "strcat(line, buf",
      "strcat(line, \" \""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "SIZE_CHECK",
      "SIZE_CHECK",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1761,
    "id": "CVE-2018-16419",
    "commit_id": "360e95d45ac4123255a4c796db96337f332160ad#diff-a6074523a9cbd875e26c58e20868fb15",
    "added_lines": [
      "strncat(line, buf, sizeof line",
      "strncat(line, \" \", sizeof line",
      "line[(sizeof line)-1] = '\\0';"
    ],
    "removed_lines": [
      "strcat(line, buf",
      "strcat(line, \" \""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "SIZE_CHECK",
      "SIZE_CHECK",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1762,
    "id": "CVE-2018-16418",
    "commit_id": "360e95d45ac4123255a4c796db96337f332160ad#diff-628c8445c4e7ae92bbc4be08ba11a4c3",
    "added_lines": [
      "strncat(line, buf, sizeof line",
      "strncat(line, \" \", sizeof line",
      "line[(sizeof line)-1] = '\\0';"
    ],
    "removed_lines": [
      "strcat(line, buf",
      "strcat(line, \" \""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "SIZE_CHECK",
      "SIZE_CHECK",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1763,
    "id": "CVE-2018-16393",
    "commit_id": "360e95d45ac4123255a4c796db96337f332160ad",
    "added_lines": [
      "strncat(line, buf, sizeof line",
      "strncat(line, \" \", sizeof line",
      "line[(sizeof line)-1] = '\\0';"
    ],
    "removed_lines": [
      "strcat(line, buf",
      "strcat(line, \" \""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "SIZE_CHECK",
      "SIZE_CHECK",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1764,
    "id": "CVE-2018-16392",
    "commit_id": "360e95d45ac4123255a4c796db96337f332160ad#diff-b2a356323a9ff2024d041cf2d7e89dd3",
    "added_lines": [
      "strncat(line, buf, sizeof line",
      "strncat(line, \" \", sizeof line",
      "line[(sizeof line)-1] = '\\0';"
    ],
    "removed_lines": [
      "strcat(line, buf",
      "strcat(line, \" \""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "SIZE_CHECK",
      "SIZE_CHECK",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1765,
    "id": "CVE-2018-16391",
    "commit_id": "360e95d45ac4123255a4c796db96337f332160ad#diff-477b7a40136bb418b10ce271c8664536",
    "added_lines": [
      "strncat(line, buf, sizeof line",
      "strncat(line, \" \", sizeof line",
      "line[(sizeof line)-1] = '\\0';"
    ],
    "removed_lines": [
      "strcat(line, buf",
      "strcat(line, \" \""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "SIZE_CHECK",
      "SIZE_CHECK",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1790,
    "id": "CVE-2018-15120",
    "commit_id": "71aaeaf020340412b8d012fe23a556c0420eda5f",
    "added_lines": [
      "if (iter->start == iter->end",
      "iter->end = g_utf8_next_char (iter->end"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 1791,
    "id": "CVE-2018-14938",
    "commit_id": "a4e1cd14eb5ccc51ed271b65b3420f7d692c40eb",
    "added_lines": [
      "if (len>=144",
      "hdr.host_time \t= EXTRACT_LE_32BITS(pc+32",
      "hdr.mac_time \t= EXTRACT_LE_32BITS(pc+44",
      "hdr.channel \t= EXTRACT_LE_32BITS(pc+56",
      "hdr.rssi \t\t= EXTRACT_LE_32BITS(pc+68",
      "hdr.sq \t\t= EXTRACT_LE_32BITS(pc+80",
      "hdr.signal  \t= EXTRACT_LE_32BITS(pc+92",
      "hdr.noise   \t= EXTRACT_LE_32BITS(pc+104",
      "hdr.rate\t\t= EXTRACT_LE_32BITS(pc+116)/2",
      "hdr.istx\t\t= EXTRACT_LE_32BITS(pc+128",
      "cbs->HandlePrism( *this, &hdr, pc + 144, len - 144",
      "handle_80211(pc+144,len-144"
    ],
    "removed_lines": [
      "hdr.host_time \t= EXTRACT_LE_32BITS(pc+32",
      "hdr.mac_time \t= EXTRACT_LE_32BITS(pc+44",
      "hdr.channel \t= EXTRACT_LE_32BITS(pc+56",
      "hdr.rssi \t\t= EXTRACT_LE_32BITS(pc+68",
      "hdr.sq \t\t= EXTRACT_LE_32BITS(pc+80",
      "hdr.signal  \t= EXTRACT_LE_32BITS(pc+92",
      "hdr.noise   \t= EXTRACT_LE_32BITS(pc+104",
      "hdr.rate\t\t= EXTRACT_LE_32BITS(pc+116)/2",
      "hdr.istx\t\t= EXTRACT_LE_32BITS(pc+128",
      "cbs->HandlePrism( *this, &hdr, pc + 144, len - 144",
      "handle_80211(pc+144,len-144"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.4,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "integer overflow"
    ]
  },
  {
    "index": 1801,
    "id": "CVE-2018-14360",
    "commit_id": "6296f7153f0c9d5e5cd3aaf08f9731e56621bdd3",
    "added_lines": [
      "char group[LONG_STRING] = \"\"",
      "if (sscanf(line, \"%1023s \" ANUM \" \" ANUM \" %c %8191[^\\n]\", group, &last, &first, &mod, desc) < 4",
      "mutt_debug(4, \"Cannot parse server line: %s\\n\", line"
    ],
    "removed_lines": [
      "char group[LONG_STRING]",
      "if (sscanf(line, \"%s \" ANUM \" \" ANUM \" %c %[^\\n]\", group, &last, &first, &mod, desc) < 4"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1802,
    "id": "CVE-2018-14359",
    "commit_id": "6f163e07ae68654d7ac5268cbb7565f6df79ad85",
    "added_lines": [
      "int len = mutt_b64_decode(buffer, encoded, sizeof(buffer",
      "declen = mutt_b64_decode(out2, out1, sizeof(out2",
      "declen = mutt_b64_decode(out2, out1, sizeof(out2"
    ],
    "removed_lines": [
      "int len = mutt_b64_decode(buffer, encoded",
      "declen = mutt_b64_decode(out2, out1",
      "declen = mutt_b64_decode(out2, out1"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "SIZE_CHECK",
      "SIZE_CHECK",
      "SIZE_CHECK"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1803,
    "id": "CVE-2018-14358",
    "commit_id": "1b0f0d0988e6df4e32e9f4bf8780846ea95d4485",
    "added_lines": [
      "while (*s && (*s != '\\\"') && (ptmp != (tmp + sizeof(tmp) - 1",
      "while (isdigit((unsigned char) *s) && (ptmp != (tmp + sizeof(tmp) - 1"
    ],
    "removed_lines": [
      "while (*s && *s != '\\\"'",
      "while (isdigit((unsigned char) *s"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1809,
    "id": "CVE-2018-14352",
    "commit_id": "e27b65b3bf8defa34db58919496056caf3850cd4",
    "added_lines": [
      "dlen -= 3"
    ],
    "removed_lines": [
      "dlen -= 2"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1818,
    "id": "CVE-2018-14015",
    "commit_id": "bd1bab05083d80464fea854bf4b5c49aaf1b8401",
    "added_lines": [
      "if (name > 1024) { // solve some null derefs",
      "sdb_set (s, \"DW_AT_comp_dir\", name, 0",
      "} else",
      "eprintf (\"Invalid string pointer at %p\\n\", name"
    ],
    "removed_lines": [
      "sdb_set (s, \"DW_AT_comp_dir\", name, 0"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "invalid read"
    ]
  },
  {
    "index": 1819,
    "id": "CVE-2018-13785",
    "commit_id": "8a05766cb74af05c04c53e6c9d60c13fc4d59bf2",
    "added_lines": [
      "(size_t)png_ptr->width",
      "+ 1",
      "+ (png_ptr->interlaced? 6: 0",
      "idat_limit = PNG_UINT_31_MAX"
    ],
    "removed_lines": [
      "(png_ptr->width * png_ptr->channels * (png_ptr->bit_depth > 8? 2: 1",
      "+ 1 + (png_ptr->interlaced? 6: 0",
      "idat_limit=PNG_UINT_31_MAX"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1820,
    "id": "CVE-2018-13406",
    "commit_id": "9f645bcc566a1e9f921bdae7528a01ced5bc3713",
    "added_lines": [
      "entries = kmalloc_array(cmap->len, sizeof(*entries),",
      "GFP_KERNEL"
    ],
    "removed_lines": [
      "entries = kmalloc(sizeof(*entries) * cmap->len, GFP_KERNEL"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1833,
    "id": "CVE-2018-12896",
    "commit_id": "78c9c4dfbf8c04883941445a195276bb4bb92c76",
    "added_lines": [
      "static inline int timer_overrun_to_int(struct k_itimer *timr, int baseval",
      "s64 sum = timr->it_overrun_last + (s64)baseval",
      "return sum > (s64)INT_MAX ? INT_MAX : (int)sum",
      "timr->it_overrun += hrtimer_forward(timer, timer->base->get_time(),",
      "timr->it_interval",
      "timr->it_overrun = -1LL",
      "info->si_overrun = timer_overrun_to_int(timr, info->si_overrun",
      "timr->it_overrun += hrtimer_forward(timer, now,",
      "timr->it_interval",
      "new_timer->it_overrun = -1LL",
      "timr->it_overrun += kc->timer_forward(timr, now",
      "overrun = timer_overrun_to_int(timr, 0"
    ],
    "removed_lines": [
      "timr->it_overrun += (unsigned int) hrtimer_forward(timer,",
      "timer->base->get_time(),",
      "timr->it_interval",
      "timr->it_overrun = -1",
      "info->si_overrun += timr->it_overrun_last",
      "timr->it_overrun += (unsigned int",
      "hrtimer_forward(timer, now,",
      "timr->it_interval",
      "new_timer->it_overrun = -1",
      "timr->it_overrun += (int)kc->timer_forward(timr, now",
      "overrun = timr->it_overrun_last"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 2.1,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1839,
    "id": "CVE-2018-12584",
    "commit_id": "2cb291191c93c7c4e371e22cb89805a5b31d6608",
    "added_lines": [
      "if (mBufferPos >= contentLength",
      "int overHang = mBufferPos - (int)contentLength",
      "char *overHangStart = mBuffer + contentLength",
      "mConnState = NewMessage",
      "mBuffer = 0",
      "if (overHang > 0",
      "size_t size = overHang * 3 / 2",
      "if (size < ConnectionBase::ChunkSize",
      "size = ConnectionBase::ChunkSize",
      "char* newBuffer = MsgHeaderScanner::allocateBuffer((int)size",
      "memcpy(newBuffer, overHangStart, overHang",
      "mBuffer = newBuffer",
      "mBufferPos = 0",
      "mBufferSize = size",
      "DebugLog(<< \"Extra bytes after message: \" << overHang",
      "bytesRead = overHang",
      "if (overHang > 0",
      "goto start",
      "assert(contentLength >= mBufferSize"
    ],
    "removed_lines": [
      "DebugLog (<< Data(mBuffer, overHang",
      "if (mBufferPos == contentLength",
      "mBuffer=0",
      "mConnState = NewMessage"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_COPY",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1847,
    "id": "CVE-2018-12326",
    "commit_id": "9fdcc15962f9ff4baebe6fdd947816f43f730d50",
    "added_lines": [
      "sds prompt = sdsempty",
      "if (config.hostsocket != NULL)",
      "prompt = sdscatfmt(prompt,\"redis %s\",config.hostsocket",
      "} else",
      "char addr[256]",
      "anetFormatAddr(addr, sizeof(addr), config.hostip, config.hostport",
      "prompt = sdscatlen(prompt,addr,strlen(addr",
      "prompt = sdscatfmt(prompt,\"[%i]\",config.dbnum",
      "prompt = sdscatlen(prompt,\"> \",2",
      "snprintf(config.prompt,sizeof(config.prompt),\"%s\",prompt",
      "sdsfree(prompt"
    ],
    "removed_lines": [
      "int len",
      "if (config.hostsocket != NULL",
      "len = snprintf(config.prompt,sizeof(config.prompt),\"redis %s\",",
      "config.hostsocket",
      "else",
      "len = anetFormatAddr(config.prompt, sizeof(config.prompt),",
      "config.hostip, config.hostport",
      "len += snprintf(config.prompt+len,sizeof(config.prompt)-len,\"[%d]\",",
      "config.dbnum",
      "snprintf(config.prompt+len,sizeof(config.prompt)-len,\"> \""
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 4.6,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "SIZE_CHECK"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "MEM_COPY",
      "SIZE_CHECK",
      "SIZE_CHECK",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 1856,
    "id": "CVE-2018-11598",
    "commit_id": "bf4416ab9129ee3afd56739ea4e3cd0da5484b6b",
    "added_lines": [
      "void jspReplaceWithOrAddToRoot(JsVar *dst, JsVar *src)",
      "if (!jsvGetRefs(dst) && jsvIsName(dst))",
      "if (!jsvIsArrayBufferName(dst) && !jsvIsNewChild(dst",
      "jsvAddName(execInfo.root, dst",
      "jspReplaceWith(dst, src",
      "jspReplaceWithOrAddToRoot(lhs, rhs",
      "jspReplaceWithOrAddToRoot(forStatement, indexValue"
    ],
    "removed_lines": [
      "if (!jsvGetRefs(lhs) && jsvIsName(lhs))",
      "if (!jsvIsArrayBufferName(lhs) && !jsvIsNewChild(lhs",
      "jsvAddName(execInfo.root, lhs",
      "jspReplaceWith(lhs, rhs",
      "bool addedIteratorToScope = false",
      "if (JSP_SHOULD_EXECUTE && !jsvGetRefs(forStatement))",
      "addedIteratorToScope = true",
      "jsvAddName(execInfo.root, forStatement",
      "jsvSetValueOfName(forStatement, indexValue",
      "if (addedIteratorToScope)",
      "jsvRemoveChild(execInfo.root, forStatement"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds read"
    ]
  },
  {
    "index": 1857,
    "id": "CVE-2018-11597",
    "commit_id": "51380baf17241728b6d48cdb84140b931e3e3cc5",
    "added_lines": [
      "if (!jspCheckStackPosition()) return 0"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "stack exhaustion",
      "buffer overflow"
    ]
  },
  {
    "index": 1858,
    "id": "CVE-2018-11596",
    "commit_id": "ce1924193862d58cb43d3d4d9dada710a8361b89",
    "added_lines": [
      "while (s[l] && l<len)"
    ],
    "removed_lines": [
      "while (*s && l<len)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1859,
    "id": "CVE-2018-11595",
    "commit_id": "0a7619875bf79877907205f6bee08465b89ff10b",
    "added_lines": [
      "str[len-1] = 0",
      "str[0] = 0"
    ],
    "removed_lines": [
      "strncpy(str, \"\", len"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "MEM_COPY"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1860,
    "id": "CVE-2018-11594",
    "commit_id": "c36d30529118aa049797db43f111ddad468aad29",
    "added_lines": [
      "if (!jspCheckStackPosition()) return 0"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1861,
    "id": "CVE-2018-11593",
    "commit_id": "bed844f109b6c222816740555068de2e101e8018",
    "added_lines": [
      "assert(len>28); // size of largest string",
      "case LEX_EOF : strcpy(str, \"EOF\"); return",
      "case LEX_ID : strcpy(str, \"ID\"); return",
      "case LEX_INT : strcpy(str, \"INT\"); return",
      "case LEX_FLOAT : strcpy(str, \"FLOAT\"); return",
      "case LEX_STR : strcpy(str, \"STRING\"); return",
      "case LEX_UNFINISHED_STR : strcpy(str, \"UNFINISHED STRING\"); return",
      "case LEX_TEMPLATE_LITERAL : strcpy(str, \"TEMPLATE LITERAL\"); return",
      "case LEX_UNFINISHED_TEMPLATE_LITERAL : strcpy(str, \"UNFINISHED TEMPLATE LITERAL\"); return",
      "case LEX_REGEX : strcpy(str, \"REGEX\"); return",
      "case LEX_UNFINISHED_REGEX : strcpy(str, \"UNFINISHED REGEX\"); return",
      "case LEX_UNFINISHED_COMMENT : strcpy(str, \"UNFINISHED COMMENT\"); return",
      "strcpy(str, &tokenNames[p]"
    ],
    "removed_lines": [
      "case LEX_EOF : strncpy(str, \"EOF\", len); return",
      "case LEX_ID : strncpy(str, \"ID\", len); return",
      "case LEX_INT : strncpy(str, \"INT\", len); return",
      "case LEX_FLOAT : strncpy(str, \"FLOAT\", len); return",
      "case LEX_STR : strncpy(str, \"STRING\", len); return",
      "case LEX_UNFINISHED_STR : strncpy(str, \"UNFINISHED STRING\", len); return",
      "case LEX_TEMPLATE_LITERAL : strncpy(str, \"TEMPLATE LITERAL\", len); return",
      "case LEX_UNFINISHED_TEMPLATE_LITERAL : strncpy(str, \"UNFINISHED TEMPLATE LITERAL\", len); return",
      "case LEX_REGEX : strncpy(str, \"REGEX\", len); return",
      "case LEX_UNFINISHED_REGEX : strncpy(str, \"UNFINISHED REGEX\", len); return",
      "case LEX_UNFINISHED_COMMENT : strncpy(str, \"UNFINISHED COMMENT\", len); return",
      "strncpy(str, &tokenNames[p], len",
      "assert(len>=10"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.8,
    "safe_features": [
      "INDEX_OP",
      "ARITH_OP",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "MEM_COPY",
      "ARRAY_ACCESS"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1864,
    "id": "CVE-2018-11590",
    "commit_id": "a0d7f432abee692402c00e8b615ff5982dde9780",
    "added_lines": [
      "const uint32_t max_stack = 1000000; // give it 1 megabyte of stack",
      "if (count>max_stack) return 0",
      "return max_stack - count"
    ],
    "removed_lines": [
      "return 1000000 - count; // give it 1 megabyte of stack"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "RETURN",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1866,
    "id": "CVE-2018-11506",
    "commit_id": "f7068114d45ec55996b9040e98111afa56e010fe",
    "added_lines": [
      "unsigned char sense_buffer[SCSI_SENSE_BUFFERSIZE], *senseptr = NULL",
      "if (cgc->sense",
      "senseptr = sense_buffer",
      "cgc->buffer, cgc->buflen, senseptr, &sshdr,",
      "if (cgc->sense",
      "memcpy(cgc->sense, sense_buffer, sizeof(*cgc->sense"
    ],
    "removed_lines": [
      "cgc->buffer, cgc->buflen,",
      "(unsigned char *)cgc->sense, &sshdr,"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "ioctl call",
      "buffer overflow"
    ]
  },
  {
    "index": 1873,
    "id": "CVE-2018-11378",
    "commit_id": "bd276ef2fd8ac3401e65be7c126a43175ccfbcd7",
    "added_lines": [
      "char *txt = op->txt",
      "int txtLen = strlen (op->txt",
      "int txtLeft = R_ASM_BUFSIZE - txtLen",
      "txt += txtLen",
      "for (i = 0; i < count && txtLen + 10 < R_ASM_BUFSIZE; i++)",
      "snprintf (txt, txtLeft, \"%d \", table[i]",
      "txtLen = strlen (txt",
      "txt += txtLen",
      "txtLeft -= txtLen",
      "snprintf (txt, txtLeft - 1, \"%d\", def",
      "beach:"
    ],
    "removed_lines": [
      "for (i = 0; i < count && strlen (op->txt) + 10 < R_ASM_BUFSIZE; i++)",
      "int optxtlen = strlen (op->txt",
      "snprintf (op->txt + optxtlen, R_ASM_BUFSIZE - optxtlen, \"%d \", table[i]",
      "snprintf (op->txt + strlen (op->txt), R_ASM_BUFSIZE, \"%d\", def",
      "beach:"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "MEM_COPY",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 1879,
    "id": "CVE-2018-11219",
    "commit_id": "e89086e09a38cc6713bcd4b9c29abf92cf393936",
    "added_lines": [
      "size_t pos = luaL_optinteger(L, 3, 1",
      "luaL_argcheck(L, pos > 0, 3, \"offset must be 1 or greater\"",
      "pos--; /* Lua indexes are 1-based, but here we want 0-based for C",
      "luaL_argcheck(L, size <= ld && pos <= ld - size,",
      "2, \"data string too short\""
    ],
    "removed_lines": [
      "size_t pos = luaL_optinteger(L, 3, 1) - 1",
      "luaL_argcheck(L, pos+size <= ld, 2, \"data string too short\""
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 8"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "bounds check",
      "integer overflow"
    ]
  },
  {
    "index": 1880,
    "id": "CVE-2018-11218",
    "commit_id": "5ccb6f7a791bf3490357b00a898885759d98bab0",
    "added_lines": [
      "luaL_checkstack(L, 1, \"in function mp_encode_lua_table_as_array\"",
      "luaL_checkstack(L, 3, \"in function mp_encode_lua_table_as_map\"",
      "luaL_checkstack(L, 1, \"in function mp_check\"",
      "luaL_checkstack(L, 1, \"in function mp_decode_to_lua_array\"",
      "luaL_checkstack(L, 1, \"in function mp_unpack_full\""
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": " Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1881,
    "id": "CVE-2018-10940",
    "commit_id": "9de4ee40547fd315d4a0ed1dd15a2fa3559ad707",
    "added_lines": [
      "if (arg >= cdi->capacity"
    ],
    "removed_lines": [
      "if ((unsigned int)arg >= cdi->capacity"
    ],
    "cause": [
      "Logical Flaws",
      "Uncategorized Cluster 8"
    ],
    "effect": "",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "incorrect bounds check",
      "bounds check"
    ]
  },
  {
    "index": 1884,
    "id": "CVE-2018-10887",
    "commit_id": "c1577110467b701dcbcf9439ac225ea851b47d22",
    "added_lines": [
      "size_t off = 0, len = 0, end",
      "if (GIT_ADD_SIZET_OVERFLOW(&end, off, len) ||",
      "base_len < end || res_sz < len"
    ],
    "removed_lines": [
      "size_t off = 0, len = 0",
      "if (base_len < off + len || res_sz < len"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.8,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out of bound read",
      "out of bound read",
      "integer overflow"
    ]
  },
  {
    "index": 1886,
    "id": "CVE-2018-10717",
    "commit_id": "cf429e0a2fe26b5f01ce0c8e9b79432e94509b6e",
    "added_lines": [
      "if(npix > 0) WritePixel(i, &context, casspecial",
      "npix--",
      "if(npix >= (stack_top - stackp))",
      "WritePixels(i, &context, stackp, stack_top - stackp);",
      "} else if(npix > 0) {",
      "WritePixels(i, &context, stackp, npix"
    ],
    "removed_lines": [
      "WritePixel(i, &context, casspecial); npix--",
      "WritePixels(i, &context, stackp, stack_top - stackp);"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1887,
    "id": "CVE-2018-10677",
    "commit_id": "b588a2249c7abbfc52173e32ee11d6facef82f89",
    "added_lines": [
      "if((i->width > i->parent->width) || (i->height > i->parent->height))",
      "#if !defined(NGIFLIB_NO_FILE",
      "if(i->parent->log) fprintf(i->parent->log, \"*** ERROR *** Image bigger than global GIF canvas !\\n\"",
      "#endif",
      "return -1",
      "if((i->posX + i->width) > i->parent->width)",
      "#if !defined(NGIFLIB_NO_FILE",
      "if(i->parent->log) fprintf(i->parent->log, \"*** WARNING *** Adjusting X position\\n\"",
      "#endif",
      "i->posX = i->parent->width - i->width",
      "if((i->posY + i->height) > i->parent->height)",
      "#if !defined(NGIFLIB_NO_FILE",
      "if(i->parent->log) fprintf(i->parent->log, \"*** WARNING *** Adjusting Y position\\n\"",
      "#endif",
      "i->posY = i->parent->height - i->height"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1889,
    "id": "CVE-2018-10540",
    "commit_id": "6f8bb34c2993a48ab9afbe353e6d0cff7c8d821d",
    "added_lines": [
      "char *buff",
      "if (bytes_to_copy < 0 || bytes_to_copy > 4194304)",
      "error_line (\"%s is not a valid .W64 file!\", infilename",
      "return WAVPACK_SOFT_ERROR",
      "buff = malloc (bytes_to_copy"
    ],
    "removed_lines": [
      "char *buff = malloc (bytes_to_copy"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "MEM_ALLOC"
    ],
    "unsafe_features": [
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 1890,
    "id": "CVE-2018-10537",
    "commit_id": "26cb47f99d481ad9b93eeff80d26e6b63bbd7e15",
    "added_lines": [
      "int format_chunk = 0",
      "if (format_chunk++)",
      "error_line (\"%s is not a valid .W64 file!\", infilename",
      "return WAVPACK_SOFT_ERROR"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "does not reject multiple format chunks."
    ]
  },
  {
    "index": 1892,
    "id": "CVE-2018-10528",
    "commit_id": "895529fc2f2eb8bc633edd6b04b5b237eb4db564",
    "added_lines": [
      "void utf2char(utf16_t *str, char *buffer, unsigned bufsz",
      "if(bufsz<1) return",
      "buffer[bufsz-1] = 0",
      "while (*str != 0x00 && --bufsz>0",
      "utf2char(P[i].name, name,sizeof(name",
      "utf2char(P[i].value, value,sizeof(value"
    ],
    "removed_lines": [
      "static char *utf2char(utf16_t *str, char *buffer",
      "while (*str != 0x00",
      "return buffer",
      "utf2char(P[i].name, name",
      "utf2char(P[i].value, value"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARRAY_ACCESS",
      "SIZE_CHECK"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1895,
    "id": "CVE-2018-10191",
    "commit_id": "1905091634a6a2925c911484434448e568330626",
    "added_lines": [
      "if (e && b < MRB_ENV_STACK_LEN(e))"
    ],
    "removed_lines": [
      "if (!e)"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "use-after-free",
      "integer overflow"
    ]
  },
  {
    "index": 1896,
    "id": "CVE-2018-10124",
    "commit_id": "4ea77014af0d6205b05503d1c7aac6eace11d473",
    "added_lines": [
      "if (pid == INT_MIN",
      "return -ESRCH"
    ],
    "removed_lines": [],
    "cause": [
      "Compiler or Build Configuration"
    ],
    "effect": "DoS ",
    "score": 2.1,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "unspecified architecture and compiler is used"
    ]
  },
  {
    "index": 1902,
    "id": "CVE-2018-9988",
    "commit_id": "a1098f81c252b317ad34ea978aea2bc47760b215",
    "added_lines": [
      "if( p > end - 2",
      "MBEDTLS_SSL_DEBUG_MSG( 1, ( \"bad server key exchange message\" )",
      "mbedtls_ssl_send_alert_message( ssl, MBEDTLS_SSL_ALERT_LEVEL_FATAL,",
      "MBEDTLS_SSL_ALERT_MSG_DECODE_ERROR",
      "return( MBEDTLS_ERR_SSL_BAD_HS_SERVER_KEY_EXCHANGE"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 1908,
    "id": "CVE-2018-8828",
    "commit_id": "e1d8008a09d9390ebaf698abe8909e10dfec4097",
    "added_lines": [
      "dsize += svbranch.len + 1"
    ],
    "removed_lines": [
      "dsize += svbranch.len"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "off-by-one",
      "buffer overflow"
    ]
  },
  {
    "index": 1911,
    "id": "CVE-2018-8787",
    "commit_id": "09b9d4f1994a674c4ec85b4947aa656eda1aed8a",
    "added_lines": [
      "UINT32 size = DstWidth * DstHeight",
      "if ((GetBytesPerPixel(bitmap->format) == 0) ||",
      "(DstWidth == 0) || (DstHeight == 0) || (DstWidth > UINT32_MAX / DstHeight) ||",
      "(size > (UINT32_MAX / GetBytesPerPixel(bitmap->format",
      "return FALSE",
      "size *= GetBytesPerPixel(bitmap->format",
      "bitmap->length = size"
    ],
    "removed_lines": [
      "bitmap->length = DstWidth * DstHeight * GetBytesPerPixel(bitmap->format"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow",
      "integer overflow",
      "code execution"
    ]
  },
  {
    "index": 1912,
    "id": "CVE-2018-8786",
    "commit_id": "445a5a42c500ceb80f8fa7f2c11f3682538033f3",
    "added_lines": [
      "UINT32 count = bitmapUpdate->number * 2",
      "BITMAP_DATA* newdata = (BITMAP_DATA*) realloc(bitmapUpdate->rectangles,",
      "sizeof(BITMAP_DATA) * count"
    ],
    "removed_lines": [
      "UINT16 count",
      "BITMAP_DATA* newdata",
      "count = bitmapUpdate->number * 2",
      "newdata = (BITMAP_DATA*) realloc(bitmapUpdate->rectangles,",
      "sizeof(BITMAP_DATA) * count"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 1913,
    "id": "CVE-2018-8785",
    "commit_id": "602f4a2e14b41703b5f431de3154cd46a5750a2d",
    "added_lines": [
      "UINT32 prefixLength",
      "UINT32 prefixCode",
      "UINT32 valueBits",
      "UINT32 tokenType",
      "struct _ZGFX_CONTEXT",
      "BOOL Compressor",
      "const BYTE* pbInputCurrent",
      "const BYTE* pbInputEnd",
      "UINT32 bits",
      "UINT32 cBitsRemaining",
      "UINT32 BitsCurrent",
      "UINT32 cBitsCurrent",
      "BYTE OutputBuffer[65536]",
      "UINT32 OutputCount",
      "BYTE HistoryBuffer[2500000]",
      "UINT32 HistoryIndex",
      "UINT32 HistoryBufferSize",
      "static INLINE BOOL zgfx_GetBits(ZGFX_CONTEXT* _zgfx, UINT32 _nbits",
      "if (!_zgfx",
      "return FALSE",
      "while (_zgfx->cBitsCurrent < _nbits",
      "_zgfx->BitsCurrent <<= 8",
      "if (_zgfx->pbInputCurrent < _zgfx->pbInputEnd",
      "_zgfx->BitsCurrent += *(_zgfx->pbInputCurrent)++",
      "_zgfx->cBitsCurrent += 8",
      "_zgfx->cBitsRemaining -= _nbits",
      "_zgfx->cBitsCurrent -= _nbits",
      "_zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent",
      "UINT32 extra = 0",
      "size_t used = 0",
      "if (zgfx->OutputCount > UINT32_MAX - used",
      "goto fail",
      "if (used + zgfx->OutputCount > uncompressedSize",
      "goto fail",
      "used += zgfx->OutputCount"
    ],
    "removed_lines": [
      "int prefixLength",
      "int prefixCode",
      "int valueBits",
      "int tokenType",
      "#define zgfx_GetBits(_zgfx, _nbits) \\",
      "while (_zgfx->cBitsCurrent < _nbits) { \\",
      "_zgfx->BitsCurrent <<= 8; \\",
      "if (_zgfx->pbInputCurrent < _zgfx->pbInputEnd) \\",
      "_zgfx->BitsCurrent += *(_zgfx->pbInputCurrent)++; \\",
      "_zgfx->cBitsCurrent += 8; \\",
      "} \\",
      "_zgfx->cBitsRemaining -= _nbits; \\",
      "_zgfx->cBitsCurrent -= _nbits; \\",
      "_zgfx->bits = _zgfx->BitsCurrent >> _zgfx->cBitsCurrent; \\",
      "int extra"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 1914,
    "id": "CVE-2018-8784",
    "commit_id": "17c363a5162fd4dc77b1df54e48d7bd9bf6b3be7",
    "added_lines": [
      "return TRUE",
      "size_t cbSegment",
      "if (!zgfx || !stream",
      "return FALSE",
      "cbSegment = segmentSize - 1",
      "if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1) ||",
      "(segmentSize > UINT32_MAX",
      "if (cbSegment > sizeof(zgfx->OutputBuffer",
      "return FALSE",
      "if (zgfx->OutputCount >= sizeof(zgfx->OutputBuffer",
      "return FALSE",
      "if (count > sizeof(zgfx->OutputBuffer) - zgfx->OutputCount",
      "return FALSE",
      "if (count > sizeof(zgfx->OutputBuffer) - zgfx->OutputCount",
      "return FALSE"
    ],
    "removed_lines": [
      "size_t cbSegment = segmentSize - 1",
      "if ((Stream_GetRemainingLength(stream) < segmentSize) || (segmentSize < 1"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "RETURN",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Exec Code Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 1917,
    "id": "CVE-2018-8098",
    "commit_id": "3207ddb0103543da8ad2139ec6539f590f9900c1",
    "added_lines": [
      "size_t varint_len, last_len, prefix_len, suffix_len, path_len",
      "uintmax_t strip_len",
      "strip_len = git_decode_varint((const unsigned char *)path_ptr, &varint_len",
      "last_len = strlen(last",
      "if (varint_len == 0 || last_len < strip_len",
      "prefix_len = last_len - strip_len",
      "suffix_len = strlen(path_ptr + varint_len"
    ],
    "removed_lines": [
      "size_t varint_len",
      "size_t strip_len = git_decode_varint((const unsigned char *)path_ptr,",
      "&varint_len",
      "size_t last_len = strlen(last",
      "size_t prefix_len = last_len - strip_len",
      "size_t suffix_len = strlen(path_ptr + varint_len",
      "size_t path_len",
      "if (varint_len == 0"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "integer overflow"
    ]
  },
  {
    "index": 1924,
    "id": "CVE-2018-7752",
    "commit_id": "90dc7f853d31b0a4e9441cba97feccf36d8b69a4",
    "added_lines": [
      "if (sps->poc_cycle_length > ARRAY_LENGTH(sps->offset_for_ref_frame))",
      "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[avc-h264] offset_for_ref_frame overflow from poc_cycle_length\\n\"",
      "goto exit"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1926,
    "id": "CVE-2018-7648",
    "commit_id": "6d8c0c06ee32dc03ba80acd48334e98728e56cf5",
    "added_lines": [
      "int num = snprintf(outfilename, sizeof(outfilename), \"%s_%05d.j2k\", argv[2], snum",
      "if (num >= sizeof(outfilename))",
      "fprintf(stderr, \"maximum length of output prefix exceeded\\n\"",
      "return 1"
    ],
    "removed_lines": [
      "sprintf(outfilename, \"%s_%05d.j2k\", argv[2], snum"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "MEM_COPY",
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "INDEX_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "ARRAY_ACCESS"
    ],
    "vuln": "Overflow ",
    "summary": [
      "The output prefix was not checked for length, which could overflow a buffer, when providing a prefix with 50 or more characters on the command line."
    ]
  },
  {
    "index": 1927,
    "id": "CVE-2018-7584",
    "commit_id": "523f230c831d7b33353203fa34aee4e92ac12bba",
    "added_lines": [
      "--TEST--",
      "Bug #75981 (stack-buffer-overflow while parsing HTTP response",
      "--INI--",
      "allow_url_fopen=1",
      "--SKIPIF--",
      "<?php require 'server.inc'; http_server_skipif('tcp://127.0.0.1:12342'); ?>",
      "--FILE--",
      "<?php",
      "require 'server.inc'",
      "$options = [",
      "'http' => [",
      "'protocol_version' => '1.1',",
      "'header' => 'Connection: Close'",
      "],",
      "]",
      "$ctx = stream_context_create($options",
      "$responses = [",
      "\"data://text/plain,000000000100\\xA\\xA\"",
      "]",
      "$pid = http_server('tcp://127.0.0.1:12342', $responses",
      "echo @file_get_contents('http://127.0.0.1:12342/', false, $ctx",
      "http_server_kill($pid",
      "?>",
      "DONE",
      "--EXPECT--",
      "DONE"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "stack-based buffer under-read"
    ]
  },
  {
    "index": 1929,
    "id": "CVE-2018-7485",
    "commit_id": "45ef78e037f578b15fc58938a3a3251655e71d6f#diff-d52750c7ba4e594410438569d8e2963aL24",
    "added_lines": [
      "strncpy( szFileName, pszFileName, sizeof(szFileName) - 5"
    ],
    "removed_lines": [
      "strncpy( szFileName, sizeof(szFileName) - 5, pszFileName"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "has strncpy arguments in the wrong order"
    ]
  },
  {
    "index": 1931,
    "id": "CVE-2018-7254",
    "commit_id": "8e3fe45a7bac31d9a3b558ae0079e2d92a04799e",
    "added_lines": [
      "static const char TMH_full [] = { 1,2,3,13,9,10,5,6,12,14,15,16,17,9,4,18,7,8,19,20,21,0",
      "static const char TMH_std [] = { 1,2,3,11,8,9,5,6,10,12,13,14,15,7,4,16,0",
      "CAFChannelLayout *caf_channel_layout",
      "if (caf_chunk_header.mChunkSize < sizeof (CAFChannelLayout) || caf_chunk_header.mChunkSize > 1024)",
      "error_line (\"this .CAF file has an invalid 'chan' chunk!\"",
      "return WAVPACK_SOFT_ERROR",
      "if (debug_logging_mode",
      "error_line (\"'chan' chunk is %d bytes\", (int) caf_chunk_header.mChunkSize",
      "caf_channel_layout = malloc ((size_t) caf_chunk_header.mChunkSize",
      "if (!DoReadFile (infile, caf_channel_layout, (uint32_t) caf_chunk_header.mChunkSize, &bcount) ||",
      "uint32_t bytes_to_copy = (uint32_t) caf_chunk_header.mChunkSize",
      "char *buff",
      "if (caf_chunk_header.mChunkSize < 0 || caf_chunk_header.mChunkSize > 1048576)",
      "error_line (\"%s is not a valid .CAF file!\", infilename",
      "return WAVPACK_SOFT_ERROR",
      "buff = malloc (bytes_to_copy"
    ],
    "removed_lines": [
      "static const char TMH_full [] = { 1,2,3,13,9,10,5,6,12,14,15,16,17,9,4,18,7,8,19,20,21",
      "static const char TMH_std [] = { 1,2,3,11,8,9,5,6,10,12,13,14,15,7,4,16",
      "CAFChannelLayout *caf_channel_layout = malloc ((size_t) caf_chunk_header.mChunkSize",
      "if (caf_chunk_header.mChunkSize < sizeof (CAFChannelLayout) ||",
      "!DoReadFile (infile, caf_channel_layout, (uint32_t) caf_chunk_header.mChunkSize, &bcount) ||",
      "int bytes_to_copy = (uint32_t) caf_chunk_header.mChunkSize",
      "char *buff = malloc (bytes_to_copy"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "MEM_ALLOC",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "MEM_ALLOC"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer over-read",
      "buffer overflow"
    ]
  },
  {
    "index": 1933,
    "id": "CVE-2018-7247",
    "commit_id": "c1079bb8e77cdd426759e466729917ca37a3ed9f",
    "added_lines": [
      "snprintf(charbuf, sizeof(charbuf), \"%s/%s.html\", dirout, rootname",
      "snprintf(charbuf, sizeof(charbuf), \"%s/%s-links.html\", dirout, rootname",
      "snprintf(charbuf, sizeof(charbuf), \"%s_thumb_%03d\", rootname, index"
    ],
    "removed_lines": [
      "sprintf(charbuf, \"%s/%s.html\", dirout, rootname",
      "sprintf(charbuf, \"%s/%s-links.html\", dirout, rootname",
      "sprintf(charbuf, \"%s_thumb_%03d\", rootname, index"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "ARITH_OP",
      "MEM_COPY",
      "INDEX_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "code execution"
    ]
  },
  {
    "index": 1934,
    "id": "CVE-2018-7186",
    "commit_id": "ee301cb2029db8a6289c5295daa42bba7715e99a",
    "added_lines": [
      "static const l_int32  L_BUFSIZE = 256;",
      "char     combname[L_BUFSIZE]",
      "snprintf(combname, L_BUFSIZE, \"sel_comb_%dh\", size",
      "snprintf(combname, L_BUFSIZE, \"sel_comb_%dv\", size",
      "char     buf[L_BUFSIZE]",
      "snprintf(buf, L_BUFSIZE,",
      "char     linebuf[L_BUFSIZE]",
      "if (fgets(linebuf, L_BUFSIZE, fp) == NULL",
      "sscanf(linebuf, \"  ------  %200s  ------\", selname"
    ],
    "removed_lines": [
      "static const l_int32  L_BUF_SIZE = 256",
      "char     combname[L_BUF_SIZE]",
      "snprintf(combname, L_BUF_SIZE, \"sel_comb_%dh\", size",
      "snprintf(combname, L_BUF_SIZE, \"sel_comb_%dv\", size",
      "char     buf[L_BUF_SIZE]",
      "snprintf(buf, L_BUF_SIZE,",
      "char     linebuf[L_BUF_SIZE]",
      "if (fgets(linebuf, L_BUF_SIZE, fp) == NULL",
      "sscanf(linebuf, \"  ------  %s  ------\", selname"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "INDEX_OP",
      "MEM_COPY",
      "INDEX_OP",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "INDEX_OP",
      "MEM_COPY",
      "INDEX_OP",
      "ARRAY_ACCESS",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1935,
    "id": "CVE-2018-6927",
    "commit_id": "fbe0e839d1e22d88810f3ee3e2f1479be4c0aa4a",
    "added_lines": [
      "if (nr_wake < 0 || nr_requeue < 0",
      "return -EINVAL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1937,
    "id": "CVE-2018-6767",
    "commit_id": "d5bf76b5a88d044a1be1d5656698e3ba737167e5",
    "added_lines": [
      "#define CS64ChunkFormat \"4D\"",
      "!DoReadFile (infile, &ds64_chunk, sizeof (DS64Chunk), &bcount) ||",
      "bcount != sizeof (DS64Chunk))",
      "!WavpackAddWrapper (wpc, &ds64_chunk, sizeof (DS64Chunk)))",
      "int do_rf64 = 0, write_junk = 1, table_length = 0",
      "CS64Chunk cs64_chunk",
      "total_riff_bytes += table_length * sizeof (CS64Chunk",
      "ds64hdr.ckSize = sizeof (ds64_chunk) + (table_length * sizeof (CS64Chunk",
      "ds64_chunk.tableLength = table_length",
      "if (table_length)",
      "strncpy (cs64_chunk.ckID, \"dmmy\", sizeof (cs64_chunk.ckID",
      "cs64_chunk.chunkSize64 = 12345678",
      "WavpackNativeToLittleEndian (&cs64_chunk, CS64ChunkFormat",
      "(do_rf64 && (!DoWriteFile (outfile, &ds64_chunk, sizeof (ds64_chunk), &bcount) || bcount != sizeof (ds64_chunk))))",
      "error_line (\"can't write .WAV data, disk probably full!\"",
      "return FALSE",
      "while (table_length--",
      "if (!DoWriteFile (outfile, &cs64_chunk, sizeof (cs64_chunk), &bcount) || bcount != sizeof (cs64_chunk))",
      "error_line (\"can't write .WAV data, disk probably full!\"",
      "return FALSE",
      "if ((write_junk && (!DoWriteFile (outfile, &junkchunk, sizeof (junkchunk), &bcount) || bcount != sizeof (junkchunk))) ||"
    ],
    "removed_lines": [
      "!DoReadFile (infile, &ds64_chunk, chunk_header.ckSize, &bcount) ||",
      "bcount != chunk_header.ckSize)",
      "!WavpackAddWrapper (wpc, &ds64_chunk, chunk_header.ckSize))",
      "int do_rf64 = 0, write_junk = 1",
      "ds64hdr.ckSize = sizeof (ds64_chunk",
      "(do_rf64 && (!DoWriteFile (outfile, &ds64_chunk, sizeof (ds64_chunk), &bcount) || bcount != sizeof (ds64_chunk))) ||",
      "(write_junk && (!DoWriteFile (outfile, &junkchunk, sizeof (junkchunk), &bcount) || bcount != sizeof (junkchunk))) ||"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "SIZE_CHECK",
      "SIZE_CHECK",
      "SIZE_CHECK",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "MEM_COPY",
      "SIZE_CHECK",
      "SIZE_CHECK",
      "RETURN",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "RETURN",
      "SIZE_CHECK",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "SIZE_CHECK",
      "SIZE_CHECK",
      "SIZE_CHECK"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 1938,
    "id": "CVE-2018-6758",
    "commit_id": "cb4636f7c0af2e97a4eef7a3cdcbd85a71247bfe",
    "added_lines": [
      "if (dir_len > PATH_MAX",
      "uwsgi_log(\"invalid path size: %d (max %d)\\n\", dir_len, PATH_MAX",
      "return NULL",
      "char *src = uwsgi_concat2n(dir, dir_len, \"\", 0",
      "free(src",
      "free(src"
    ],
    "removed_lines": [
      "char src[PATH_MAX + 1]",
      "memcpy(src, dir, dir_len",
      "src[dir_len] = 0"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_FREE",
      "MEM_FREE"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1948,
    "id": "CVE-2018-6337",
    "commit_id": "8e927ee48b114c8a2f90d0cbd5ac753795a6761f",
    "added_lines": [
      "TEST(Random, SecureFork)",
      "unsigned char buffer = 0",
      "folly::Random::secureRandom(&buffer, 1",
      "auto pid = fork",
      "EXPECT_NE(pid, -1",
      "if (pid)",
      "int status = 0",
      "folly::Random::secureRandom(&buffer, 1",
      "auto pid2 = wait(&status",
      "EXPECT_NE(WEXITSTATUS(status), buffer",
      "EXPECT_EQ(pid, pid2",
      "} else",
      "folly::Random::secureRandom(&buffer, 1",
      "exit(buffer); // Do not print gtest results"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "re-use a buffer"
    ]
  },
  {
    "index": 1955,
    "id": "CVE-2018-5816",
    "commit_id": "1d8d1b452e5dc74033ee9f846081a0efb616cc39",
    "added_lines": [
      "case 10: load_raw = &CLASS nokia_load_raw; break",
      "#ifdef LIBRAW_LIBRARY_BUILD",
      "case 0:  throw LIBRAW_EXCEPTION_IO_CORRUPT; break",
      "#endif"
    ],
    "removed_lines": [
      "case 10: load_raw = &CLASS nokia_load_raw"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.1,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "Division by Zero",
      "integer overflow"
    ]
  },
  {
    "index": 1956,
    "id": "CVE-2018-5815",
    "commit_id": "1334647862b0c90b2e8cb2f668e66627d9517b17",
    "added_lines": [
      "if ((int)size < 0) return; // 2+GB is too much",
      "if (save + size < save) return; // 32bit overflow"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.1,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "infinite loop",
      "integer overflow"
    ]
  },
  {
    "index": 1969,
    "id": "CVE-2018-1091",
    "commit_id": "c1fa0768a8713b135848f78fd43ffc208d8ded70",
    "added_lines": [
      "if ((!cpu_has_feature(CPU_FTR_TM)) || (tsk != current"
    ],
    "removed_lines": [
      "if (tsk != current"
    ],
    "cause": [
      "Uncategorized Cluster 8",
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "missing processor feature check",
      "erroneous use of transactional memory (TM) instructions"
    ]
  },
  {
    "index": 1973,
    "id": "CVE-2018-0500",
    "commit_id": "ba1dbd78e5f1ed67c1b8d37ac89d90e5e330b628",
    "added_lines": [
      "scratch = newscratch = malloc(2 * UPLOAD_BUFSIZE",
      "DEBUGASSERT(UPLOAD_BUFSIZE >= nread"
    ],
    "removed_lines": [
      "scratch = newscratch = malloc(2 * data->set.buffer_size"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1974,
    "id": "CVE-2018-0429",
    "commit_id": "18de8f9f0762c3a542b1122589edb8af859d9813",
    "added_lines": [
      "decoder_info->log2_sb_size = clip(decoder_info->log2_sb_size, log2i(MIN_BLOCK_SIZE), log2i(MAX_SB_SIZE"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 4.6,
    "safe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "segmentation fault",
      "buffer overflow"
    ]
  },
  {
    "index": 1975,
    "id": "CVE-2017-1000494",
    "commit_id": "7aeb624b44f86d335841242ff427433190e7168a",
    "added_lines": [
      "memset(data, 0, sizeof(struct NameValueParserData"
    ],
    "removed_lines": [
      "data->l_head = NULL",
      "data->portListing = NULL",
      "data->portListingLength = 0"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 4.6,
    "safe_features": [
      "MEM_ZERO",
      "SIZE_CHECK"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "segmentation fault"
    ]
  },
  {
    "index": 1979,
    "id": "CVE-2017-1000418",
    "commit_id": "814f31d8eceda8401eb812fc2e94ed143fdad0ab",
    "added_lines": [
      "if (midisize < 18)",
      "_WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(too short)\", 0",
      "return (NULL",
      "if (size < 18)",
      "_WM_GLOBAL_ERROR(__FUNCTION__, __LINE__, WM_ERR_CORUPT, \"(too short)\", 0",
      "return (NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 1984,
    "id": "CVE-2017-18257",
    "commit_id": "b86e33075ed1909d8002745b56ecf73b833db143",
    "added_lines": [
      "bh->b_size = (u64)map.m_len << inode->i_blkbits"
    ],
    "removed_lines": [
      "bh->b_size = map.m_len << inode->i_blkbits"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1985,
    "id": "CVE-2017-18255",
    "commit_id": "1572e45a924f254d9570093abde46430c3172e3d",
    "added_lines": [
      "int ret = proc_dointvec_minmax(table, write, buffer, lenp, ppos"
    ],
    "removed_lines": [
      "int ret = proc_dointvec(table, write, buffer, lenp, ppos"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 1991,
    "id": "CVE-2017-18222",
    "commit_id": "412b65d15a7f8a93794653968308fc100f2aa87c",
    "added_lines": [
      "if (stringset == ETH_SS_STATS || stringset == ETH_SS_PRIV_FLAGS"
    ],
    "removed_lines": [
      "if (stringset == ETH_SS_STATS"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 4.6,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2000,
    "id": "CVE-2017-18193",
    "commit_id": "dad48e73127ba10279ea33e6dbc8d3905c4d31c0",
    "added_lines": [
      "static bool __f2fs_init_extent_tree(struct inode *inode, struct f2fs_extent *i_ext",
      "bool f2fs_init_extent_tree(struct inode *inode, struct f2fs_extent *i_ext",
      "bool ret =  __f2fs_init_extent_tree(inode, i_ext",
      "if (!F2FS_I(inode)->extent_tree",
      "set_inode_flag(inode, FI_NO_EXTENT",
      "return ret"
    ],
    "removed_lines": [
      "bool f2fs_init_extent_tree(struct inode *inode, struct f2fs_extent *i_ext"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "mishandles extent trees"
    ]
  },
  {
    "index": 2002,
    "id": "CVE-2017-18187",
    "commit_id": "83c9f495ffe70c7dd280b41fdfd4881485a3bc28",
    "added_lines": [
      "if( end - *p < 2",
      "if( n < 1 || n > 65535 || n > (size_t) ( end - *p )"
    ],
    "removed_lines": [
      "if( *p + 2 > end",
      "if( n < 1 || n > 65535 || *p + n > end"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": " Bypass",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow Bypass ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2004,
    "id": "CVE-2017-18185",
    "commit_id": "ec7d74a386c0b2f38990079c3b0d2a2b30be0e71",
    "added_lines": [
      "WARNING: issue-150.pdf: can't find PDF header",
      "overflow/underflow converting 9900000000000000000 to 64-bit integer"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "integer overflow"
    ]
  },
  {
    "index": 2013,
    "id": "CVE-2017-16909",
    "commit_id": "f1394822a0152ceed77815eafa5cac4e8baab10a",
    "added_lines": [
      "LIBRAW_WARN_FALLBACK_TO_AHD = 1 << 15,",
      "LIBRAW_WARN_PARSEFUJI_PROCESSED = 1 << 16"
    ],
    "removed_lines": [
      "LIBRAW_WARN_FALLBACK_TO_AHD = 1 << 15"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2016,
    "id": "CVE-2017-15128",
    "commit_id": "1e3921471354244f70fe268586ff94a97a6dd4df",
    "added_lines": [
      "struct address_space *mapping",
      "pgoff_t idx",
      "unsigned long size",
      "mapping = dst_vma->vm_file->f_mapping",
      "idx = vma_hugecache_offset(h, dst_vma, dst_addr",
      "size = i_size_read(mapping->host) >> huge_page_shift(h",
      "ret = -EFAULT",
      "if (idx >= size",
      "goto out_release_nounlock",
      "size = i_size_read(mapping->host) >> huge_page_shift(h",
      "ret = -EFAULT",
      "if (idx >= size",
      "goto out_release_unlock"
    ],
    "removed_lines": [
      "struct address_space *mapping = dst_vma->vm_file->f_mapping",
      "pgoff_t idx = vma_hugecache_offset(h, dst_vma, dst_addr"
    ],
    "cause": [
      "Uncategorized Cluster 1"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "lack of size check"
    ]
  },
  {
    "index": 2026,
    "id": "CVE-2016-8654",
    "commit_id": "4a59cfaf9ab3d48fca4a15c0d2674bf7138e3d1a",
    "added_lines": [
      "int hstartrow",
      "hstartrow = (numrows + 1 - parity) >> 1",
      "m = numrows - hstartrow",
      "dstptr = &a[hstartrow * stride]",
      "int hstartrow",
      "if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE,",
      "sizeof(jpc_fix_t))))",
      "hstartrow = (numrows + 1 - parity) >> 1",
      "m = numrows - hstartrow",
      "dstptr = &a[hstartrow * stride]",
      "if (!(buf = jas_alloc3(bufsize, numcols, sizeof(jpc_fix_t))))",
      "if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE,",
      "sizeof(jpc_fix_t))))"
    ],
    "removed_lines": [
      "int hstartcol",
      "hstartcol = (numrows + 1 - parity) >> 1",
      "m = numrows - hstartcol",
      "dstptr = &a[hstartcol * stride]",
      "int hstartcol",
      "if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t))))",
      "hstartcol = (numrows + 1 - parity) >> 1",
      "m = numrows - hstartcol",
      "dstptr = &a[hstartcol * stride]",
      "if (!(buf = jas_alloc2(bufsize, sizeof(jpc_fix_t))))",
      "if (!(buf = jas_alloc3(bufsize, JPC_QMFB_COLGRPSIZE, sizeof(jpc_fix_t))))"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "SIZE_CHECK",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "SIZE_CHECK"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2028,
    "id": "CVE-2016-5314",
    "commit_id": "391e77fcd217e78b2c51342ac3ddb7100ecacdd2",
    "added_lines": [
      "tmsize_t\t\ttbuf_size;",
      "sp->tbuf_size = tbuf_size",
      "if (sp->stream.avail_out > sp->tbuf_size",
      "TIFFErrorExt(tif->tif_clientdata, module, \"sp->stream.avail_out > sp->tbuf_size\"",
      "return (0"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "INDEX_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2038,
    "id": "CVE-2019-1010305",
    "commit_id": "2f084136cfe0d05e5bf5703f3e83c6d955234b4d",
    "added_lines": [
      "if (name_len == 40 && memcmp(name, content_name, 40) == 0)",
      "chm->sec1.content = fi",
      "else if (name_len == 44 && memcmp(name, control_name, 44) == 0)",
      "chm->sec1.control = fi",
      "else if (name_len == 41 && memcmp(name, spaninfo_name, 41) == 0)",
      "chm->sec1.spaninfo = fi",
      "else if (name_len == 105 && memcmp(name, rtable_name, 105) == 0)",
      "chm->sec1.rtable = fi"
    ],
    "removed_lines": [
      "if (memcmp(&name[2], &content_name[2], 31L) == 0)",
      "if (memcmp(&name[33], &content_name[33], 8L) == 0)",
      "chm->sec1.content = fi",
      "else if (memcmp(&name[33], &control_name[33], 11L) == 0)",
      "chm->sec1.control = fi",
      "else if (memcmp(&name[33], &spaninfo_name[33], 8L) == 0)",
      "chm->sec1.spaninfo = fi",
      "else if (memcmp(&name[33], &rtable_name[33], 72L) == 0)",
      "chm->sec1.rtable = fi"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "libmspack"
    ]
  },
  {
    "index": 2039,
    "id": "CVE-2019-1010298",
    "commit_id": "70697bf3c5dc3d201341b01a1a8e5bc6d2fb48f8",
    "added_lines": [
      "size_t alloc_size = 0",
      "if (MUL_OVERFLOW(sizeof(TEE_Attribute), num_params, &alloc_size",
      "return TEE_ERROR_OVERFLOW",
      "params = malloc(alloc_size",
      "size_t alloc_size = 0",
      "if (MUL_OVERFLOW(sizeof(TEE_Attribute), num_params, &alloc_size",
      "return TEE_ERROR_OVERFLOW",
      "params = malloc(alloc_size"
    ],
    "removed_lines": [
      "params = malloc(sizeof(TEE_Attribute) * num_params",
      "params = malloc(sizeof(TEE_Attribute) * num_params"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 10.0,
    "safe_features": [
      "INDEX_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "MEM_ALLOC",
      "INDEX_OP",
      "INDEX_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "MEM_ALLOC",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 2040,
    "id": "CVE-2019-1010297",
    "commit_id": "a637243270fc1faae16de059091795c32d86e65e",
    "added_lines": [
      "size_t alloc_size = 0",
      "if (MUL_OVERFLOW(sizeof(TEE_Attribute), param_count, &alloc_size",
      "return TEE_ERROR_OVERFLOW",
      "params = malloc(alloc_size",
      "size_t alloc_size = 0",
      "if (MUL_OVERFLOW(sizeof(TEE_Attribute), param_count, &alloc_size",
      "return TEE_ERROR_OVERFLOW",
      "params = malloc(alloc_size"
    ],
    "removed_lines": [
      "params = malloc(sizeof(TEE_Attribute) * param_count",
      "params = malloc(sizeof(TEE_Attribute) * param_count"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 10.0,
    "safe_features": [
      "INDEX_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "MEM_ALLOC",
      "INDEX_OP",
      "INDEX_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "MEM_ALLOC",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2041,
    "id": "CVE-2019-1010296",
    "commit_id": "b60e1cee406a1ff521145ab9534370dfb85dd592",
    "added_lines": [
      "#include <compiler.h>",
      "size_t alloc_size = 0",
      "if (MUL_OVERFLOW(sizeof(TEE_Attribute), attr_count, &alloc_size",
      "return TEE_ERROR_OVERFLOW",
      "attrs = malloc(alloc_size"
    ],
    "removed_lines": [
      "attrs = malloc(sizeof(TEE_Attribute) * attr_count"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 10.0,
    "safe_features": [
      "NO_OP",
      "INDEX_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "MEM_ALLOC",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 2042,
    "id": "CVE-2019-1010295",
    "commit_id": "d5c5b0b77b2b589666024d219a8007b3f5b6faeb",
    "added_lines": [
      "static TEE_Result utee_param_to_param(struct user_ta_ctx *utc,",
      "struct tee_ta_param *p,",
      "struct utee_params *up",
      "uint32_t flags = TEE_MEMORY_ACCESS_READ |",
      "TEE_MEMORY_ACCESS_ANY_OWNER",
      "flags |= TEE_MEMORY_ACCESS_WRITE",
      "case TEE_PARAM_TYPE_MEMREF_INPUT:",
      "if (tee_mmu_check_access_rights(utc, flags, a, b",
      "return TEE_ERROR_ACCESS_DENIED",
      "return TEE_SUCCESS",
      "res = utee_param_to_param(utc, param, callee_params",
      "if (res != TEE_SUCCESS",
      "return res"
    ],
    "removed_lines": [
      "static void utee_param_to_param(struct tee_ta_param *p, struct utee_params *up",
      "case TEE_PARAM_TYPE_MEMREF_INPUT:",
      "utee_param_to_param(param, callee_params"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": " Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2045,
    "id": "CVE-2019-1010292",
    "commit_id": "e3adcf566cb278444830e7badfdcc3983e334fd1",
    "added_lines": [
      "size_t req_size = 0",
      "if (ADD_OVERFLOW(mem->offs, mem->size, &req_size) ||",
      "mem->mobj->size < req_size",
      "return TEE_ERROR_SECURITY"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 2"
    ],
    "effect": " Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "boundary checks"
    ]
  },
  {
    "index": 2050,
    "id": "CVE-2019-1010208",
    "commit_id": "f30f9339c9a0b9bbcc6f5ad38804af39db1f479e",
    "added_lines": [
      "size_t devicePathLen = 0",
      "if (\t!NT_SUCCESS (RtlUnalignedStringCchLengthW (request->DevicePath, TC_MAX_PATH, &devicePathLen",
      "||\t(devicePathLen < 28) // 28 is the length of \"\\\\Device\\\\Harddisk0\\\\Partition0\" which is the minimum",
      "||\t(devicePathLen > 30) // 30 is the length of \"\\\\Device\\\\Harddisk255\\\\Partition0\" which is the maximum",
      "||\t(memcmp (request->DevicePath, L\"\\\\Device\\\\Harddisk\", 16 * sizeof (WCHAR",
      "||\t(memcmp (&request->DevicePath[devicePathLen - 11], L\"\\\\Partition0\", 11 * sizeof (WCHAR",
      "Irp->IoStatus.Status = STATUS_INVALID_PARAMETER",
      "Irp->IoStatus.Information = 0",
      "break",
      "byte *readBuffer = TCalloc (TC_MAX_VOLUME_SECTOR_SIZE",
      "if (!readBuffer",
      "Irp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES",
      "Irp->IoStatus.Information = 0",
      "else",
      "offset.QuadPart = 0;\t// MBR",
      "ntStatus = ZwReadFile (NtFileHandle,",
      "NULL,",
      "NULL,",
      "NULL,",
      "&IoStatus,",
      "readBuffer,",
      "TC_MAX_VOLUME_SECTOR_SIZE,",
      "&offset,",
      "NULL",
      "if (NT_SUCCESS (ntStatus",
      "if (IoStatus.Information >= TC_SECTOR_SIZE_BIOS",
      "size_t i",
      "request->DriveIsDynamic = FALSE",
      "if (readBuffer[510] == 0x55 && readBuffer[511] == 0xaa",
      "int i",
      "for (i = 0; i < 4; ++i",
      "if (readBuffer[446 + i * 16 + 4] == PARTITION_LDM",
      "request->DriveIsDynamic = TRUE",
      "break",
      "request->BootLoaderVersion = 0",
      "request->Configuration = 0",
      "request->UserConfiguration = 0",
      "request->CustomUserMessage[0] = 0",
      "for (i = 0; i < sizeof (readBuffer) - strlen (TC_APP_NAME); ++i",
      "if (memcmp (readBuffer + i, TC_APP_NAME, strlen (TC_APP_NAME)) == 0",
      "request->BootLoaderVersion = BE16 (*(uint16 *) (readBuffer + TC_BOOT_SECTOR_VERSION_OFFSET",
      "request->Configuration = readBuffer[TC_BOOT_SECTOR_CONFIG_OFFSET]",
      "if (request->BootLoaderVersion != 0 && request->BootLoaderVersion <= VERSION_NUM",
      "request->UserConfiguration = readBuffer[TC_BOOT_SECTOR_USER_CONFIG_OFFSET]",
      "memcpy (request->CustomUserMessage, readBuffer + TC_BOOT_SECTOR_USER_MESSAGE_OFFSET, TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH",
      "break",
      "Irp->IoStatus.Status = STATUS_SUCCESS",
      "Irp->IoStatus.Information = sizeof (*request",
      "else",
      "Irp->IoStatus.Status = STATUS_INVALID_PARAMETER",
      "Irp->IoStatus.Information = 0",
      "else",
      "Irp->IoStatus.Status = ntStatus",
      "Irp->IoStatus.Information = 0",
      "TCfree (readBuffer"
    ],
    "removed_lines": [
      "byte readBuffer [TC_SECTOR_SIZE_BIOS]",
      "offset.QuadPart = 0;\t// MBR",
      "ntStatus = ZwReadFile (NtFileHandle,",
      "NULL,",
      "NULL,",
      "NULL,",
      "&IoStatus,",
      "readBuffer,",
      "sizeof(readBuffer),",
      "&offset,",
      "NULL",
      "if (NT_SUCCESS (ntStatus",
      "size_t i",
      "request->DriveIsDynamic = FALSE",
      "if (readBuffer[510] == 0x55 && readBuffer[511] == 0xaa",
      "int i",
      "for (i = 0; i < 4; ++i",
      "if (readBuffer[446 + i * 16 + 4] == PARTITION_LDM",
      "request->DriveIsDynamic = TRUE",
      "break",
      "request->BootLoaderVersion = 0",
      "request->Configuration = 0",
      "request->UserConfiguration = 0",
      "request->CustomUserMessage[0] = 0",
      "for (i = 0; i < sizeof (readBuffer) - strlen (TC_APP_NAME); ++i",
      "if (memcmp (readBuffer + i, TC_APP_NAME, strlen (TC_APP_NAME)) == 0",
      "request->BootLoaderVersion = BE16 (*(uint16 *) (readBuffer + TC_BOOT_SECTOR_VERSION_OFFSET",
      "request->Configuration = readBuffer[TC_BOOT_SECTOR_CONFIG_OFFSET]",
      "if (request->BootLoaderVersion != 0 && request->BootLoaderVersion <= VERSION_NUM",
      "request->UserConfiguration = readBuffer[TC_BOOT_SECTOR_USER_CONFIG_OFFSET]",
      "memcpy (request->CustomUserMessage, readBuffer + TC_BOOT_SECTOR_USER_MESSAGE_OFFSET, TC_BOOT_SECTOR_USER_MESSAGE_MAX_LENGTH",
      "break",
      "Irp->IoStatus.Status = STATUS_SUCCESS",
      "Irp->IoStatus.Information = sizeof (*request",
      "else",
      "Irp->IoStatus.Status = ntStatus",
      "Irp->IoStatus.Information = 0"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 2.1,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP",
      "SIZE_CHECK",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2051,
    "id": "CVE-2019-1010065",
    "commit_id": "114cd3d0aac8bd1aeaf4b33840feb0163d342d5b",
    "added_lines": [
      "int keylen",
      "int keylen"
    ],
    "removed_lines": [
      "uint16_t keylen",
      "uint16_t keylen"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2055,
    "id": "CVE-2019-17546",
    "commit_id": "21674033ee246f698887604c7af7ba1962a40ddf",
    "added_lines": [
      "uint32 temp",
      "temp = (row + img->row_offset)%rowsperstrip + nrowsub",
      "if( scanline > 0 && temp > (size_t)(TIFF_TMSIZE_T_MAX / scanline)",
      "TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), \"Integer overflow in gtStripContig\"",
      "return 0",
      "temp * scanline)==(tmsize_t)(-1",
      "uint32 temp",
      "temp = (row + img->row_offset)%rowsperstrip + nrow",
      "if( scanline > 0 && temp > (size_t)(TIFF_TMSIZE_T_MAX / scanline)",
      "TIFFErrorExt(tif->tif_clientdata, TIFFFileName(tif), \"Integer overflow in gtStripSeparate\"",
      "return 0",
      "temp * scanline)==(tmsize_t)(-1",
      "p0, temp * scanline)==(tmsize_t)(-1",
      "p1, temp * scanline) == (tmsize_t)(-1",
      "p2, temp * scanline) == (tmsize_t)(-1",
      "pa, temp * scanline)==(tmsize_t)(-1"
    ],
    "removed_lines": [
      "((row + img->row_offset)%rowsperstrip + nrowsub) * scanline)==(tmsize_t)(-1",
      "((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1",
      "p0, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1",
      "p1, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1",
      "p2, ((row + img->row_offset)%rowsperstrip + nrow) * scanline) == (tmsize_t)(-1",
      "pa, ((row + img->row_offset)%rowsperstrip + nrow) * scanline)==(tmsize_t)(-1"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 0.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 2058,
    "id": "CVE-2019-17542",
    "commit_id": "02f909dc24b1f05cfbba75077c7707b905e63cd2",
    "added_lines": [
      "if ((ret = ff_set_dimensions(avctx, s->width, s->height)) < 0)"
    ],
    "removed_lines": [
      "if ((ret = av_image_check_size(s->width, s->height, 0, avctx)) < 0)"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 0.0,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-array access",
      "buffer overflow"
    ]
  },
  {
    "index": 2065,
    "id": "CVE-2019-17113",
    "commit_id": "927688ddab43c2b203569de79407a899e734fabe",
    "added_lines": [
      "char buf[32]",
      "memset(buf,0,32",
      "if(str",
      "strncpy(buf,str,31",
      "openmpt_free_string(str",
      "strncpy(buff,buf,32",
      "return (unsigned int)strlen(buf",
      "char buf[32]",
      "memset(buf,0,32",
      "if(str",
      "strncpy(buf,str,31",
      "openmpt_free_string(str",
      "strncpy(buff,buf,32",
      "return (unsigned int)strlen(buf"
    ],
    "removed_lines": [
      "unsigned int retval",
      "size_t tmpretval",
      "if(!str",
      "if(buff",
      "return 0",
      "tmpretval = strlen(str",
      "if(tmpretval>=INT_MAX",
      "tmpretval = INT_MAX-1",
      "retval = (int)tmpretval",
      "memcpy(buff,str,retval+1",
      "buff[retval] = '\\0'",
      "openmpt_free_string(str",
      "return retval",
      "unsigned int retval",
      "size_t tmpretval",
      "if(!str",
      "if(buff",
      "return 0",
      "tmpretval = strlen(str",
      "if(tmpretval>=INT_MAX",
      "tmpretval = INT_MAX-1",
      "retval = (int)tmpretval",
      "memcpy(buff,str,retval+1",
      "buff[retval] = '\\0'",
      "openmpt_free_string(str",
      "return retval"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS",
      "MEM_ZERO",
      "CONTROL_FLOW",
      "MEM_COPY",
      "MEM_COPY",
      "RETURN",
      "ARRAY_ACCESS",
      "MEM_ZERO",
      "CONTROL_FLOW",
      "MEM_COPY",
      "MEM_COPY",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "RETURN",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "RETURN"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2073,
    "id": "CVE-2019-16347",
    "commit_id": "37d939a6f511d16d4c95678025c235fe62e6417a",
    "added_lines": [
      "while(context->pass > 0 && context->pass < 4 &&",
      "context->curY >= p->height)",
      "switch(++context->pass)",
      "case 2:",
      "context->curY = i->posY + 4",
      "break",
      "case 3:",
      "context->curY = i->posY + 2",
      "break",
      "case 4:",
      "context->curY = i->posY + 1",
      "break",
      "while(context->pass > 0 && context->pass < 4 &&",
      "context->curY >= p->height)",
      "switch(++context->pass)",
      "case 2:",
      "context->curY = i->posY + 4",
      "break",
      "case 3:",
      "context->curY = i->posY + 2",
      "break",
      "case 4:",
      "context->curY = i->posY + 1",
      "break"
    ],
    "removed_lines": [
      "if(context->curY >= p->height)",
      "context->pass++",
      "context->curY = i->posY + 4",
      "if(context->curY >= p->height)",
      "context->pass++",
      "context->curY = i->posY + 2",
      "if(context->curY >= p->height)",
      "context->pass++",
      "context->curY = i->posY + 1",
      "if(context->curY >= p->height)",
      "context->pass++",
      "context->curY = i->posY + 4",
      "if(context->curY >= p->height)",
      "context->pass++",
      "context->curY = i->posY + 2",
      "if(context->curY >= p->height)",
      "context->pass++",
      "context->curY = i->posY + 1"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2076,
    "id": "CVE-2019-16058",
    "commit_id": "d150b60e1e14c261b113f55681419ad1dfa8a76c",
    "added_lines": [
      "#include <stdlib.h>",
      "unsigned char *signature = NULL",
      "unsigned int siglen",
      "if (NULL == privkey",
      "goto err",
      "siglen = EVP_PKEY_size(privkey",
      "if (siglen <= 0",
      "goto err",
      "signature = malloc(siglen",
      "if (NULL == signature",
      "goto err",
      "free(signature"
    ],
    "removed_lines": [
      "unsigned char signature[256]",
      "unsigned int siglen = sizeof signature"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "MEM_ALLOC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "MEM_FREE"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "SIZE_CHECK"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2077,
    "id": "CVE-2019-15946",
    "commit_id": "a3fc7693f3a035a8a7921cffb98432944bb42740",
    "added_lines": [
      "&& objlen > 1 && obj[0] == 0x00)"
    ],
    "removed_lines": [
      "&& obj[0] == 0x00 && objlen > 1)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds access",
      "out-of-bounds"
    ]
  },
  {
    "index": 2078,
    "id": "CVE-2019-15945",
    "commit_id": "412a6142c27a5973c61ba540e33cdc22d5608e68",
    "added_lines": [
      "int zero_bits",
      "size_t octets_left",
      "zero_bits = *in & 0x07",
      "octets_left = inlen - 1",
      "in++",
      "memset(outbuf, 0, outlen"
    ],
    "removed_lines": [
      "int zero_bits = *in & 0x07",
      "size_t octets_left = inlen - 1",
      "memset(outbuf, 0, outlen",
      "in++"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "MEM_ZERO"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "MEM_ZERO",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds access",
      "out-of-bounds"
    ]
  },
  {
    "index": 2088,
    "id": "CVE-2019-15785",
    "commit_id": "626f751752875a0ddd74b9e217b6f4828713573c",
    "added_lines": [
      "bool GTextFieldIsEmpty(GGadget *g"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2090,
    "id": "CVE-2019-15296",
    "commit_id": "942c3e0aee748ea6fe97cb2c1aa5893225316174",
    "added_lines": [
      "if (i >= MAX_CHANNELS - num_excl_chan - 7",
      "return n"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2104,
    "id": "CVE-2019-14982",
    "commit_id": "e925bc5addd881543fa503470c8a859e112cca62",
    "added_lines": [
      "long WebPImage::getHeaderOffset(byte* data, long data_size, byte* header, long header_size",
      "if (data_size < header_size) { return -1;"
    ],
    "removed_lines": [
      "long WebPImage::getHeaderOffset(byte *data, long data_size,",
      "byte *header, long header_size)"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 2108,
    "id": "CVE-2019-14816",
    "commit_id": "7caac62ed598a196d6ddf8d9c121e12e082cac3",
    "added_lines": [
      "if (rate_ie->len > MWIFIEX_SUPPORTED_RATES",
      "return",
      "if (rate_ie)",
      "if (rate_ie->len > MWIFIEX_SUPPORTED_RATES - rate_len",
      "return",
      "if (*(wmm_ie + 1) > sizeof(struct mwifiex_types_wmm_info",
      "return"
    ],
    "removed_lines": [
      "if (rate_ie"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2109,
    "id": "CVE-2019-14814",
    "commit_id": "7caac62ed598a196d6ddf8d9c121e12e082cac3a",
    "added_lines": [
      "if (rate_ie->len > MWIFIEX_SUPPORTED_RATES",
      "return",
      "if (rate_ie)",
      "if (rate_ie->len > MWIFIEX_SUPPORTED_RATES - rate_len",
      "return",
      "if (*(wmm_ie + 1) > sizeof(struct mwifiex_types_wmm_info",
      "return"
    ],
    "removed_lines": [
      "if (rate_ie"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2113,
    "id": "CVE-2019-14459",
    "commit_id": "3b006ededaf351f1723aea6c727c9edd1b1fff9b",
    "added_lines": [
      "if ( size_left < 4 )",
      "if ( size_left < 4 )",
      "LogError(\"Process_ipfix [%u] Template withdraw size error at %s line %u\" ,",
      "exporter->info.id, __FILE__, __LINE__, strerror (errno",
      "size_left = 0",
      "continue"
    ],
    "removed_lines": [
      "if ( size_left && size_left < 4 )"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2115,
    "id": "CVE-2019-14323",
    "commit_id": "ce04b1f29a137198182f60bbb628d5ceb8171765",
    "added_lines": [
      "char buf[MAX_PKT_SIZE + 1]",
      "len = recvfrom(sd, buf, sizeof(buf) - 1, MSG_DONTWAIT, &sa, &salen"
    ],
    "removed_lines": [
      "char buf[MAX_PKT_SIZE]",
      "len = recvfrom(sd, buf, sizeof(buf), MSG_DONTWAIT, &sa, &salen",
      "buf[len] = 0"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "SIZE_CHECK",
      "ARRAY_ACCESS"
    ],
    "vuln": "Overflow ",
    "summary": [
      "off-by-one",
      "buffer overflow",
      "off-by-one error"
    ]
  },
  {
    "index": 2118,
    "id": "CVE-2019-14283",
    "commit_id": "da99466ac243f15fbba65bd261bfc75ffa1532b6",
    "added_lines": [
      "if ((int)g->sect <= 0 ||",
      "(int)g->head <= 0 ||",
      "(int)(g->sect * g->head) <= 0 ||"
    ],
    "removed_lines": [
      "if (g->sect <= 0 ||",
      "g->head <= 0 ||"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.6,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "integer overflow"
    ]
  },
  {
    "index": 2119,
    "id": "CVE-2019-14267",
    "commit_id": "master",
    "added_lines": [
      "#define VER_MINOR \"24b\""
    ],
    "removed_lines": [
      "#define VER_MINOR \"23\""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2120,
    "id": "CVE-2019-13615",
    "commit_id": "b66ca475be967547af9a3784e720fbbacd381be6",
    "added_lines": [
      "} while ( MaxDataSize >= ReadSize"
    ],
    "removed_lines": [
      "} while ( MaxDataSize > DataStream.getFilePointer() - SizeIdx + PossibleID_Length"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 2121,
    "id": "CVE-2019-13568",
    "commit_id": "ac8003393569aba51048c9d67e1491559877b1d1",
    "added_lines": [
      "buffer.assign(buf_size,1,1,1,0"
    ],
    "removed_lines": [
      "buffer.assign(cimg::abs(dy)*(dx_bytes + align_bytes),1,1,1,0"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "INDEX_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2126,
    "id": "CVE-2019-13308",
    "commit_id": "19651f3db63fa1511ed83a348c4c82fa553f8d01",
    "added_lines": [
      "magick_number_threads(Cr_image,complex_images,Cr_image->rows,1L",
      "for (y=0; y < (ssize_t) Cr_image->rows; y++",
      "Ar=GetCacheViewVirtualPixels(Ar_view,0,y,Cr_image->columns,1,exception",
      "Ai=GetCacheViewVirtualPixels(Ai_view,0,y,Cr_image->columns,1,exception",
      "Br=GetCacheViewVirtualPixels(Br_view,0,y,Cr_image->columns,1,exception",
      "Bi=GetCacheViewVirtualPixels(Bi_view,0,y,Cr_image->columns,1,exception",
      "for (x=0; x < (ssize_t) Cr_image->columns; x++",
      "Cr->red=gamma*((double) Ar->red*Br->red+(double) Ai->red*Bi->red",
      "Ci->red=gamma*((double) Ai->red*Br->red-(double) Ar->red*Bi->red",
      "gamma=PerceptibleReciprocal((double) Br->green*Br->green+(double",
      "Bi->green*Bi->green+snr",
      "Cr->green=gamma*((double) Ar->green*Br->green+(double",
      "Ai->green*Bi->green",
      "Ci->green=gamma*((double) Ai->green*Br->green-(double",
      "Ar->green*Bi->green",
      "gamma=PerceptibleReciprocal((double) Br->blue*Br->blue+(double",
      "Bi->blue*Bi->blue+snr",
      "Cr->blue=gamma*((double) Ar->blue*Br->blue+(double",
      "Ai->blue*Bi->blue",
      "Ci->blue=gamma*((double) Ai->blue*Br->blue-(double",
      "Ar->blue*Bi->blue",
      "gamma=PerceptibleReciprocal((double) Br->opacity*Br->opacity+",
      "(double) Bi->opacity*Bi->opacity+snr",
      "Cr->opacity=gamma*((double) Ar->opacity*Br->opacity+(double",
      "Ai->opacity*Bi->opacity",
      "Ci->opacity=gamma*((double) Ai->opacity*Br->opacity-(double",
      "Ar->opacity*Bi->opacity",
      "Cr->red=sqrt((double) Ar->red*Ar->red+(double) Ai->red*Ai->red",
      "Ci->red=atan2((double) Ai->red,(double) Ar->red)/(2.0*MagickPI)+0.5",
      "Cr->green=sqrt((double) Ar->green*Ar->green+(double",
      "Ai->green*Ai->green",
      "Ci->green=atan2((double) Ai->green,(double) Ar->green)/",
      "(2.0*MagickPI)+0.5",
      "Cr->blue=sqrt((double) Ar->blue*Ar->blue+(double) Ai->blue*Ai->blue",
      "Cr->opacity=sqrt((double) Ar->opacity*Ar->opacity+(double",
      "Ai->opacity*Ai->opacity",
      "Ci->opacity=atan2((double) Ai->opacity,(double) Ar->opacity)/",
      "(2.0*MagickPI)+0.5",
      "Cr->red=QuantumScale*((double) Ar->red*Br->red-(double",
      "Ai->red*Bi->red",
      "Ci->red=QuantumScale*((double) Ai->red*Br->red+(double",
      "Ar->red*Bi->red",
      "Cr->green=QuantumScale*((double) Ar->green*Br->green-(double",
      "Ai->green*Bi->green",
      "Ci->green=QuantumScale*((double) Ai->green*Br->green+(double",
      "Ar->green*Bi->green",
      "Cr->blue=QuantumScale*((double) Ar->blue*Br->blue-(double",
      "Ai->blue*Bi->blue",
      "Ci->blue=QuantumScale*((double) Ai->blue*Br->blue+(double",
      "Ar->blue*Bi->blue",
      "Cr->opacity=QuantumScale*((double) Ar->opacity*Br->opacity-",
      "(double) Ai->opacity*Bi->opacity",
      "Ci->opacity=QuantumScale*((double) Ai->opacity*Br->opacity+",
      "(double) Ar->opacity*Bi->opacity",
      "if (Cr_image->matte != MagickFalse"
    ],
    "removed_lines": [
      "magick_number_threads(images,complex_images,images->rows,1L",
      "for (y=0; y < (ssize_t) images->rows; y++",
      "Ar=GetCacheViewVirtualPixels(Ar_view,0,y,",
      "MagickMax(Ar_image->columns,Cr_image->columns),1,exception",
      "Ai=GetCacheViewVirtualPixels(Ai_view,0,y,",
      "MagickMax(Ai_image->columns,Ci_image->columns),1,exception",
      "Br=GetCacheViewVirtualPixels(Br_view,0,y,",
      "MagickMax(Br_image->columns,Cr_image->columns),1,exception",
      "Bi=GetCacheViewVirtualPixels(Bi_view,0,y,",
      "MagickMax(Bi_image->columns,Ci_image->columns),1,exception",
      "for (x=0; x < (ssize_t) images->columns; x++",
      "Cr->red=gamma*(Ar->red*Br->red+Ai->red*Bi->red",
      "Ci->red=gamma*(Ai->red*Br->red-Ar->red*Bi->red",
      "gamma=PerceptibleReciprocal(Br->green*Br->green+Bi->green*Bi->green+",
      "snr",
      "Cr->green=gamma*(Ar->green*Br->green+Ai->green*Bi->green",
      "Ci->green=gamma*(Ai->green*Br->green-Ar->green*Bi->green",
      "gamma=PerceptibleReciprocal(Br->blue*Br->blue+Bi->blue*Bi->blue+snr",
      "Cr->blue=gamma*(Ar->blue*Br->blue+Ai->blue*Bi->blue",
      "Ci->blue=gamma*(Ai->blue*Br->blue-Ar->blue*Bi->blue",
      "gamma=PerceptibleReciprocal(Br->opacity*Br->opacity+Bi->opacity*",
      "Bi->opacity+snr",
      "Cr->opacity=gamma*(Ar->opacity*Br->opacity+Ai->opacity*",
      "Bi->opacity",
      "Ci->opacity=gamma*(Ai->opacity*Br->opacity-Ar->opacity*",
      "Bi->opacity",
      "Cr->red=sqrt(Ar->red*Ar->red+Ai->red*Ai->red",
      "Ci->red=atan2(Ai->red,Ar->red)/(2.0*MagickPI)+0.5",
      "Cr->green=sqrt(Ar->green*Ar->green+Ai->green*Ai->green",
      "Ci->green=atan2(Ai->green,Ar->green)/(2.0*MagickPI)+0.5",
      "Cr->blue=sqrt(Ar->blue*Ar->blue+Ai->blue*Ai->blue",
      "Cr->opacity=sqrt(Ar->opacity*Ar->opacity+Ai->opacity*Ai->opacity",
      "Ci->opacity=atan2(Ai->opacity,Ar->opacity)/(2.0*MagickPI)+0.5",
      "Cr->red=QuantumScale*(Ar->red*Br->red-Ai->red*Bi->red",
      "Ci->red=QuantumScale*(Ai->red*Br->red+Ar->red*Bi->red",
      "Cr->green=QuantumScale*(Ar->green*Br->green-Ai->green*Bi->green",
      "Ci->green=QuantumScale*(Ai->green*Br->green+Ar->green*Bi->green",
      "Cr->blue=QuantumScale*(Ar->blue*Br->blue-Ai->blue*Bi->blue",
      "Ci->blue=QuantumScale*(Ai->blue*Br->blue+Ar->blue*Bi->blue",
      "Cr->opacity=QuantumScale*(Ar->opacity*Br->opacity-Ai->opacity*",
      "Bi->opacity",
      "Ci->opacity=QuantumScale*(Ai->opacity*Br->opacity+Ar->opacity*",
      "Bi->opacity",
      "if (images->matte != MagickFalse"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2127,
    "id": "CVE-2019-13307",
    "commit_id": "91e58d967a92250439ede038ccfb0913a81e59fe",
    "added_lines": [
      "rows",
      "rows=MagickMax(GetImageListLength(images),",
      "(size_t) GetMagickResourceLimit(ThreadResource",
      "pixels=(MagickPixelPacket **) AcquireQuantumMemory(rows,sizeof(*pixels",
      "for (i=0; i < (ssize_t) rows; i++"
    ],
    "removed_lines": [
      "number_threads",
      "number_threads=(size_t) GetMagickResourceLimit(ThreadResource",
      "pixels=(MagickPixelPacket **) AcquireQuantumMemory(number_threads,",
      "sizeof(*pixels",
      "(void) memset(pixels,0,number_threads*sizeof(*pixels",
      "for (i=0; i < (ssize_t) number_threads; i++"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_ZERO",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2128,
    "id": "CVE-2019-13306",
    "commit_id": "cb5ec7d98195aa74d5ed299b38eff2a68122f3fa",
    "added_lines": [
      "if ((q-pixels+extent+2) >= sizeof(pixels",
      "if ((q-pixels+extent+2) >= sizeof(pixels"
    ],
    "removed_lines": [
      "if ((q-pixels+extent+1) >= sizeof(pixels",
      "if ((q-pixels+extent+1) >= sizeof(pixels"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "off-by-one",
      "buffer overflow",
      "off-by-one error"
    ]
  },
  {
    "index": 2129,
    "id": "CVE-2019-13305",
    "commit_id": "5c7fbf9a14fb83c9685ad69d48899f490a37609d",
    "added_lines": [
      "if ((q-pixels+extent+1) >= sizeof(pixels",
      "(void) strncpy((char *) q,buffer,extent",
      "q+=extent",
      "if ((q-pixels+extent+1) >= sizeof(pixels",
      "(void) strncpy((char *) q,buffer,extent",
      "q+=extent"
    ],
    "removed_lines": [
      "(void) strncpy((char *) q,buffer,extent",
      "q+=extent",
      "if ((q-pixels+extent+2) >= sizeof(pixels",
      "(void) strncpy((char *) q,buffer,extent",
      "q+=extent",
      "if ((q-pixels+extent+2) >= sizeof(pixels"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "off-by-one",
      "buffer overflow",
      "off-by-one error"
    ]
  },
  {
    "index": 2130,
    "id": "CVE-2019-13304",
    "commit_id": "7689875ef64f34141e7292f6945efdf0530b4a5e",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2134,
    "id": "CVE-2019-13300",
    "commit_id": "5e409ae7a389cdf2ed17469303be3f3f21cec450",
    "added_lines": [
      "static MagickPixelPacket **AcquirePixelThreadSet(const Image *images",
      "const Image",
      "columns,",
      "columns=images->columns",
      "for (next=images; next != (Image *) NULL; next=next->next",
      "columns=MagickMax(next->columns,columns",
      "pixels[i]=(MagickPixelPacket *) AcquireQuantumMemory(columns,",
      "for (j=0; j < (ssize_t) columns; j++",
      "GetMagickPixelPacket(images,&pixels[i][j]"
    ],
    "removed_lines": [
      "static MagickPixelPacket **AcquirePixelThreadSet(const Image *image",
      "pixels[i]=(MagickPixelPacket *) AcquireQuantumMemory(image->columns,",
      "for (j=0; j < (ssize_t) image->columns; j++",
      "GetMagickPixelPacket(image,&pixels[i][j]"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2136,
    "id": "CVE-2019-13298",
    "commit_id": "d4fc44b58a14f76b1ac997517d742ee12c9dc5d3",
    "added_lines": [
      "if (image->channel_map[channel].traits == UndefinedPixelTrait"
    ],
    "removed_lines": [
      "if (image->channel_map[image->channel_map[channel].offset].traits == UndefinedPixelTrait"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2147,
    "id": "CVE-2019-13136",
    "commit_id": "fe5f4b85e6b1b54d3b4588a77133c06ade46d891",
    "added_lines": [
      "if (((offset > 0) && (profile->offset > (SSIZE_MAX-offset))) ||",
      "((offset < 0) && (profile->offset < (-SSIZE_MAX-offset",
      "errno=EOVERFLOW",
      "return(-1"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2150,
    "id": "CVE-2019-13106",
    "commit_id": "master",
    "added_lines": [
      "write_host_id: 0"
    ],
    "removed_lines": [
      "write_host_id: 0"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 8.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 2153,
    "id": "CVE-2019-12982",
    "commit_id": "2be22fcf56a223dafe8de0e8a20fe20e8bbdb0b9",
    "added_lines": [
      "switch(OpCode(actions, n, maxn"
    ],
    "removed_lines": [
      "if( n > maxn ) SWF_error(\"Action overflow!!\"",
      "switch(actions[n].SWF_ACTIONRECORD.ActionCode"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2154,
    "id": "CVE-2019-12981",
    "commit_id": "3dc0338e4a36a3092720ebaa5b908ba3dca467d9",
    "added_lines": [
      "else if (idx >= 255 && shape->useVersion == SWF_SHAPE1",
      "SWF_error(\"Too many fills for SWFShape V1.\\n\"",
      "\"Use a higher SWFShape version\\n\""
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "*fill overflow* vulnerability"
    ]
  },
  {
    "index": 2155,
    "id": "CVE-2019-12980",
    "commit_id": "2223f7a1e431455a1411bee77c90db94a6f8e8fe",
    "added_lines": [
      "if(number && num & (1<<(number-1"
    ],
    "removed_lines": [
      "if ( num & (1<<(number-1))"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2157,
    "id": "CVE-2019-12951",
    "commit_id": "b3e0f780c34cea88f057a62213c012aa88fe2deb",
    "added_lines": [
      "const char *p, *end, *eop = &io->buf[io->len]",
      "while (p < eop)",
      "if (lc & 0x80 || end > eop) return MG_MQTT_ERROR_INCOMPLETE_MSG",
      "if (end - p < 2) return MG_MQTT_ERROR_MALFORMED_MSG",
      "p += 2"
    ],
    "removed_lines": [
      "const char *p, *end",
      "while ((size_t)(p - io->buf) < io->len)",
      "if (lc & 0x80 || len > (io->len - (p - io->buf)))",
      "return MG_MQTT_ERROR_INCOMPLETE_MSG"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2174,
    "id": "CVE-2019-11929",
    "commit_id": "dbeb9a56a638e3fdcef8b691c2a2967132dae692",
    "added_lines": [
      "string(103) \"-0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\""
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 2"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "out-of-bounds",
      "code execution",
      "out-of-bounds memory",
      "boundary checks"
    ]
  },
  {
    "index": 2188,
    "id": "CVE-2019-11487",
    "commit_id": "f958d7b528b1b40c44cfda5eabe2d82760d868c3",
    "added_lines": [
      "#define page_ref_zero_or_close_to_overflow(page) \\",
      "((unsigned int) page_ref_count(page) + 127u <= 127u",
      "VM_BUG_ON_PAGE(page_ref_zero_or_close_to_overflow(page), page"
    ],
    "removed_lines": [
      "VM_BUG_ON_PAGE(page_ref_count(page) <= 0, page"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "use-after-free"
    ]
  },
  {
    "index": 2195,
    "id": "CVE-2019-11412",
    "commit_id": "1e5479084bc9852854feb1ba9bf68b52cd127e02",
    "added_lines": [
      "emit(J, F, OP_ENDTRY"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "lacks an ENDTRY opcode call"
    ]
  },
  {
    "index": 2196,
    "id": "CVE-2019-11411",
    "commit_id": "da632ca08f240590d2dec786722ed08486ce1be6",
    "added_lines": [
      "char buf[100]",
      "char buf[50], *e"
    ],
    "removed_lines": [
      "char buf[32]",
      "char buf[100]",
      "char buf[32], *e"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2199,
    "id": "CVE-2019-11222",
    "commit_id": "f36525c5beafb78959c3a07d6622c9028de348da",
    "added_lines": [
      "if (i > 15)",
      "i++",
      "break"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2200,
    "id": "CVE-2019-11072",
    "commit_id": "32120d5b8b3203fc21ccb9eafb0eaf824bb59354",
    "added_lines": [
      "run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"%2f?\"), CONST_STR_LEN(\"/?\"",
      "run_burl_normalize(psrc, ptmp, flags, __LINE__, CONST_STR_LEN(\"/%2f?\"), CONST_STR_LEN(\"//?\""
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2207,
    "id": "CVE-2019-10131",
    "commit_id": "cb1214c124e1bd61f7dd551b94a794864861592e",
    "added_lines": [
      "str=(unsigned char *) AcquireQuantumMemory((size_t) count+1,sizeof(*str"
    ],
    "removed_lines": [
      "str=(unsigned char *) AcquireQuantumMemory((size_t) count,sizeof(*str"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 3.6,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "off-by-one"
    ]
  },
  {
    "index": 2210,
    "id": "CVE-2019-9578",
    "commit_id": "e4bb58cc8b6202a421e65f8230217d8ae6e16eb5",
    "added_lines": [
      "int offs = sizeof (nonce",
      "if (resplen < 17",
      "return U2FH_SIZE_ERROR",
      "if (memcmp (nonce, resp, sizeof (nonce)) != 0",
      "return U2FH_TRANSPORT_ERROR",
      "dev->cid =",
      "resp[offs] << 24 | resp[offs + 1] << 16 | resp[offs +",
      "2] << 8 | resp[offs +",
      "3]",
      "offs += 4",
      "dev->versionInterface = resp[offs++]",
      "dev->versionMajor = resp[offs++]",
      "dev->versionMinor = resp[offs++]",
      "dev->versionBuild = resp[offs++]",
      "dev->capFlags = resp[offs++]"
    ],
    "removed_lines": [
      "U2FHID_INIT_RESP initresp",
      "if (resplen > sizeof (initresp",
      "return U2FH_MEMORY_ERROR",
      "memcpy (&initresp, resp, resplen",
      "dev->cid = initresp.cid",
      "dev->versionInterface = initresp.versionInterface",
      "dev->versionMajor = initresp.versionMajor",
      "dev->versionMinor = initresp.versionMinor",
      "dev->capFlags = initresp.capFlags"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "SIZE_CHECK",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "RETURN",
      "MEM_COPY",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "response to init is misparsed"
    ]
  },
  {
    "index": 2228,
    "id": "CVE-2019-3570",
    "commit_id": "cc331e4349e91706a673e2a09f1f2ea5bbb33815",
    "added_lines": [],
    "removed_lines": [
      "#ifndef _SHA256_H_",
      "#define _SHA256_H_",
      "#include <sys/types.h>",
      "#include <stdint.h>",
      "struct SHA256_CTX",
      "uint32_t state[8]",
      "uint32_t count[2]",
      "unsigned char buf[64]",
      "struct HMAC_SHA256_CTX",
      "SHA256_CTX ictx",
      "SHA256_CTX octx",
      "void  SHA256_Init(struct SHA256_CTX *",
      "void  scrypt_SHA256_Update(struct SHA256_CTX *, const void *, size_t",
      "void  scrypt_SHA256_Final(unsigned char [32], struct SHA256_CTX *",
      "void  HMAC_SHA256_Init(struct HMAC_SHA256_CTX *, const void *, size_t",
      "void  HMAC_SHA256_Update(struct HMAC_SHA256_CTX *, const void *, size_t",
      "void  HMAC_SHA256_Final(unsigned char [32], struct HMAC_SHA256_CTX *",
      "void  PBKDF2_SHA256(const uint8_t *, size_t, const uint8_t *, size_t,",
      "uint64_t, uint8_t *, size_t",
      "#endif"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": " Mem. Corr.",
    "score": 7.5,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "heap corruption"
    ]
  },
  {
    "index": 2232,
    "id": "CVE-2019-3563",
    "commit_id": "5b3bceca875e4ea4ed9d14c20b20ce46c92c13c6",
    "added_lines": [
      "TEST(LineBasedFrameDecoder, CarriageOnly)",
      "auto pipeline = Pipeline<IOBufQueue&, std::unique_ptr<IOBuf>>::create",
      "(*pipeline",
      ".addBack(LineBasedFrameDecoder",
      "10, true, LineBasedFrameDecoder::TerminatorType::CARRIAGENEWLINE",
      ".addBack(test::FrameTester([&](std::unique_ptr<IOBuf>) { FAIL();",
      ".finalize",
      "IOBufQueue q(IOBufQueue::cacheChainLength",
      "q.append(IOBuf::copyBuffer(\"\\raa\"",
      "pipeline->read(q",
      "TEST(LineBasedFrameDecoder, DoubleCarriage)",
      "auto pipeline = Pipeline<IOBufQueue&, std::unique_ptr<IOBuf>>::create",
      "int called = 0",
      "(*pipeline",
      ".addBack(LineBasedFrameDecoder",
      "10, true, LineBasedFrameDecoder::TerminatorType::CARRIAGENEWLINE",
      ".addBack(test::FrameTester([&](std::unique_ptr<IOBuf> buf)",
      "auto sz = buf->computeChainDataLength",
      "called++",
      "EXPECT_EQ(sz, 1",
      ".finalize",
      "IOBufQueue q(IOBufQueue::cacheChainLength",
      "q.append(IOBuf::copyBuffer(\"\\r\\r\\na\\r\\n\"",
      "pipeline->read(q",
      "EXPECT_EQ(called, 2"
    ],
    "removed_lines": [],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "incorrectly advances a buffer"
    ]
  },
  {
    "index": 2234,
    "id": "CVE-2019-3560",
    "commit_id": "40bbb161e72fb609608d53b9d64c56bb961a6ee2",
    "added_lines": [
      "TEST_F(PlaintextRecordTest, TestSkipOversizedRecord)",
      "read_.setSkipEncryptedRecords(true",
      "addToQueue(\"170301fffb\"",
      "auto longBuf = IOBuf::create(0xfffb",
      "longBuf->append(0xfffb",
      "queue_.append(std::move(longBuf",
      "EXPECT_FALSE(read_.read(queue_).hasValue",
      "EXPECT_TRUE(queue_.empty"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "infinite loop"
    ]
  },
  {
    "index": 2241,
    "id": "CVE-2018-21010",
    "commit_id": "2e5ab1d9987831c981ff05862e8ccf1381ed58ea",
    "added_lines": [
      "if ((image->comps[0].w == image->comps[1].w &&",
      "image->comps[0].w == image->comps[2].w) &&",
      "(image->comps[0].h == image->comps[1].h &&",
      "image->comps[0].h == image->comps[2].h))",
      "if (prec <= 8)",
      "unsigned char *inbuf, *outbuf, *in, *out",
      "max = max_w * max_h",
      "nr_samples = (size_t)(max * 3U * sizeof(unsigned char",
      "in = inbuf = (unsigned char*)opj_image_data_alloc(nr_samples",
      "out = outbuf = (unsigned char*)opj_image_data_alloc(nr_samples",
      "if (inbuf == NULL || outbuf == NULL)",
      "goto fails0",
      "r = image->comps[0].data",
      "g = image->comps[1].data",
      "b = image->comps[2].data",
      "for (i = 0U; i < max; ++i)",
      "cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max",
      "r = image->comps[0].data",
      "g = image->comps[1].data",
      "b = image->comps[2].data",
      "for (i = 0U; i < max; ++i)",
      "ok = 1",
      "opj_image_data_free(inbuf",
      "opj_image_data_free(outbuf",
      "} else {",
      "unsigned short *inbuf, *outbuf, *in, *out",
      "max = max_w * max_h",
      "nr_samples = (size_t)(max * 3U * sizeof(unsigned short",
      "in = inbuf = (unsigned short*)opj_image_data_alloc(nr_samples",
      "out = outbuf = (unsigned short*)opj_image_data_alloc(nr_samples",
      "if (inbuf == NULL || outbuf == NULL)",
      "goto fails1",
      "r = image->comps[0].data",
      "g = image->comps[1].data",
      "b = image->comps[2].data",
      "for (i = 0U  ; i < max; ++i)",
      "cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max",
      "r = image->comps[0].data",
      "g = image->comps[1].data",
      "b = image->comps[2].data",
      "for (i = 0; i < max; ++i)",
      "ok = 1",
      "opj_image_data_free(inbuf",
      "opj_image_data_free(outbuf",
      "} else",
      "fprintf(stderr,",
      "\"[ERROR] Image components should have the same width and height\\n\"",
      "cmsDeleteTransform(transform",
      "return"
    ],
    "removed_lines": [
      "if (prec <= 8)",
      "unsigned char *inbuf, *outbuf, *in, *out",
      "max = max_w * max_h",
      "nr_samples = (size_t)(max * 3U * sizeof(unsigned char",
      "in = inbuf = (unsigned char*)opj_image_data_alloc(nr_samples",
      "out = outbuf = (unsigned char*)opj_image_data_alloc(nr_samples",
      "if (inbuf == NULL || outbuf == NULL)",
      "goto fails0",
      "r = image->comps[0].data",
      "g = image->comps[1].data",
      "b = image->comps[2].data",
      "for (i = 0U; i < max; ++i)",
      "cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max",
      "r = image->comps[0].data",
      "g = image->comps[1].data",
      "b = image->comps[2].data",
      "for (i = 0U; i < max; ++i)",
      "ok = 1",
      "opj_image_data_free(inbuf",
      "opj_image_data_free(outbuf",
      "} else {",
      "unsigned short *inbuf, *outbuf, *in, *out",
      "max = max_w * max_h",
      "nr_samples = (size_t)(max * 3U * sizeof(unsigned short",
      "in = inbuf = (unsigned short*)opj_image_data_alloc(nr_samples",
      "out = outbuf = (unsigned short*)opj_image_data_alloc(nr_samples",
      "if (inbuf == NULL || outbuf == NULL)",
      "goto fails1",
      "r = image->comps[0].data",
      "g = image->comps[1].data",
      "b = image->comps[2].data",
      "for (i = 0U  ; i < max; ++i)",
      "cmsDoTransform(transform, inbuf, outbuf, (cmsUInt32Number)max",
      "r = image->comps[0].data",
      "g = image->comps[1].data",
      "b = image->comps[2].data",
      "for (i = 0; i < max; ++i)",
      "ok = 1",
      "opj_image_data_free(inbuf",
      "opj_image_data_free(outbuf"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "RETURN"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2244,
    "id": "CVE-2018-20855",
    "commit_id": "0625b4ba1a5d4703c7fb01c497bd6c156908af00",
    "added_lines": [
      "struct mlx5_ib_create_qp_resp resp ="
    ],
    "removed_lines": [
      "struct mlx5_ib_create_qp_resp resp"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 2.1,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "mlx5_ib_create_qp_resp was never initialized",
      "leak of stack memory"
    ]
  },
  {
    "index": 2246,
    "id": "CVE-2018-20847",
    "commit_id": "c58df149900df862806d0e892859b41115875845",
    "added_lines": [
      "OPJ_UINT32 l_tx0, l_ty0",
      "l_tx0 = p_cp->tx0 + p *",
      "p_cp->tdx;",
      "l_ty0 = p_cp->ty0 + q *",
      "p_cp->tdy;"
    ],
    "removed_lines": [
      "(OPJ_INT32)p_image->x0",
      "(OPJ_INT32)p_image->x1",
      "(OPJ_INT32)p_image->y0",
      "(OPJ_INT32)p_image->y1"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2252,
    "id": "CVE-2018-20820",
    "commit_id": "6a5ceefac1162783fffd9506a3de39c85c725761",
    "added_lines": [
      "((size_t)max_file_size) * 2 + 128 * 1024 * 1024"
    ],
    "removed_lines": [
      "max_file_size * 2 + 128 * 1024 * 1024"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2255,
    "id": "CVE-2018-20762",
    "commit_id": "35ab4475a7df9b2a4bcab235e379c0c3ec543658",
    "added_lines": [
      "if (strlen(ext) < 2 || strlen(ext) > sizeof(szExt))",
      "GF_LOG(GF_LOG_ERROR, GF_LOG_SCENE, (\"[Scene Manager] invalid extension in file name %s\\n\", load->fileName",
      "return GF_NOT_SUPPORTED"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2261,
    "id": "CVE-2018-20182",
    "commit_id": "4dca546d04321a610c1835010b5dad85163b65e1",
    "added_lines": [
      "#define RD_UINT32_MAX (uint32)(-1"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 2273,
    "id": "CVE-2018-14879",
    "commit_id": "9ba91381954ad325ea4fd26b9c65a8bd9a2a85b6",
    "added_lines": [
      "size_t len",
      "len = strlen (ptr",
      "if (len > 0 && ptr[len - 1] == '\\n'",
      "ptr[len - 1] = '\\0'"
    ],
    "removed_lines": [
      "if (ptr[strlen(ptr) - 1] == '\\n'",
      "ptr[strlen(ptr) - 1] = '\\0'"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2286,
    "id": "CVE-2018-6345",
    "commit_id": "190ffdf6c8b1ec443be202c7d69e63a7e3da25e3",
    "added_lines": [
      "string(0) \"\"",
      "bool(false"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "heap overflow"
    ]
  },
  {
    "index": 2289,
    "id": "CVE-2017-18379",
    "commit_id": "0c319d3a144d4b8f1ea2047fd614d2149b68f889",
    "added_lines": [
      "if (qid > NVMET_NR_QUEUES",
      "return NULL"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "out of boundary access"
    ]
  },
  {
    "index": 2291,
    "id": "CVE-2016-10764",
    "commit_id": "193e87143c290ec16838f5368adc0e0bc94eb931",
    "added_lines": [
      "if (cs >= CQSPI_MAX_CHIPSELECT)"
    ],
    "removed_lines": [
      "if (cs > CQSPI_MAX_CHIPSELECT)"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "off by one"
    ]
  },
  {
    "index": 2298,
    "id": "CVE-2015-9289",
    "commit_id": "1fa2337a315a2448c5434f41e00d56b01a22283c",
    "added_lines": [
      "if (d->msg_len > sizeof(d->msg",
      "return -EINVAL"
    ],
    "removed_lines": [
      "if (d->msg_len > (CX24116_ARGLEN - CX24116_DISEQC_MSGOFS",
      "return -EINVAL"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2300,
    "id": "CVE-2012-6712",
    "commit_id": "2da424b0773cea3db47e1e81db71eeebde8269d4",
    "added_lines": [
      "static int iwl_sta_ucode_activate(struct iwl_priv *priv, u8 sta_id",
      "if (sta_id >= IWLAGN_STATION_COUNT)",
      "IWL_ERR(priv, \"invalid sta_id %u\", sta_id",
      "return -EINVAL",
      "return 0",
      "ret = iwl_sta_ucode_activate(priv, sta_id"
    ],
    "removed_lines": [
      "static void iwl_sta_ucode_activate(struct iwl_priv *priv, u8 sta_id",
      "iwl_sta_ucode_activate(priv, sta_id",
      "ret = 0"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": " Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2301,
    "id": "CVE-2011-5327",
    "commit_id": "12f09ccb4612734a53e47ed5302e0479c10a50f8",
    "added_lines": [
      "if (tpgt >= TL_TPGS_PER_HBA)"
    ],
    "removed_lines": [
      "if (tpgt > TL_TPGS_PER_HBA)"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": " Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "off by one"
    ]
  },
  {
    "index": 2302,
    "id": "CVE-2010-5332",
    "commit_id": "0926f91083f34d047abc74f1ca4fa6a9c161f7db",
    "added_lines": [
      "if (free < 0)",
      "err = -ENOMEM",
      "goto out",
      "if (free < 0)",
      "err = -ENOMEM",
      "goto out"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "MEM_FREE",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_FREE",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "out of bounds array access"
    ]
  },
  {
    "index": 2303,
    "id": "CVE-2010-5331",
    "commit_id": "0031c41be5c529f8329e327b63cde92ba1284842",
    "added_lines": [
      "if (index >= MAX_SUPPORTED_TV_TIMING",
      "if (index >= MAX_SUPPORTED_TV_TIMING_V1_2"
    ],
    "removed_lines": [
      "if (index > MAX_SUPPORTED_TV_TIMING",
      "if (index > MAX_SUPPORTED_TV_TIMING_V1_2"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "off by one",
      "buffer overflow"
    ]
  },
  {
    "index": 2304,
    "id": "CVE-2007-6762",
    "commit_id": "2a2f11c227bdf292b3a2900ad04139d301b56ac4",
    "added_lines": [
      "if (iter >= CIPSO_V4_TAG_MAXCNT",
      "while (iter < CIPSO_V4_TAG_MAXCNT",
      "doi_def->tags[iter++] = CIPSO_V4_TAG_INVALID"
    ],
    "removed_lines": [
      "if (iter > CIPSO_V4_TAG_MAXCNT",
      "if (iter < CIPSO_V4_TAG_MAXCNT",
      "doi_def->tags[iter] = CIPSO_V4_TAG_INVALID"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "off-by-one"
    ]
  },
  {
    "index": 2306,
    "id": "CVE-2012-3400",
    "commit_id": "1df2ae31c724e57be9d7ac00d78db8a5dabdd050",
    "added_lines": [
      "#include <linux/log2.h>",
      "static int udf_load_sparable_map(struct super_block *sb,",
      "struct udf_part_map *map,",
      "struct sparablePartitionMap *spm",
      "uint32_t loc",
      "uint16_t ident",
      "struct sparingTable *st",
      "struct udf_sparing_data *sdata = &map->s_type_specific.s_sparing",
      "int i",
      "struct buffer_head *bh",
      "map->s_partition_type = UDF_SPARABLE_MAP15",
      "sdata->s_packet_len = le16_to_cpu(spm->packetLength",
      "if (!is_power_of_2(sdata->s_packet_len))",
      "udf_err(sb, \"error loading logical volume descriptor: \"",
      "\"Invalid packet length %u\\n\",",
      "(unsigned)sdata->s_packet_len",
      "return -EIO",
      "if (spm->numSparingTables > 4)",
      "udf_err(sb, \"error loading logical volume descriptor: \"",
      "\"Too many sparing tables (%d)\\n\",",
      "(int)spm->numSparingTables",
      "return -EIO",
      "for (i = 0; i < spm->numSparingTables; i++)",
      "loc = le32_to_cpu(spm->locSparingTable[i]",
      "bh = udf_read_tagged(sb, loc, loc, &ident",
      "if (!bh",
      "continue",
      "st = (struct sparingTable *)bh->b_data",
      "if (ident != 0 ||",
      "strncmp(st->sparingIdent.ident, UDF_ID_SPARING,",
      "strlen(UDF_ID_SPARING)) ||",
      "sizeof(*st) + le16_to_cpu(st->reallocationTableLen) >",
      "sb->s_blocksize)",
      "brelse(bh",
      "continue",
      "sdata->s_spar_map[i] = bh",
      "map->s_partition_func = udf_get_pblock_spar15",
      "return 0",
      "int i, offset",
      "if (udf_load_sparable_map(sb, map,",
      "(struct sparablePartitionMap *)gpm) < 0",
      "goto out_bh"
    ],
    "removed_lines": [
      "int i, j, offset",
      "uint32_t loc",
      "struct sparingTable *st",
      "struct sparablePartitionMap *spm =",
      "(struct sparablePartitionMap *)gpm",
      "map->s_partition_type = UDF_SPARABLE_MAP15",
      "map->s_type_specific.s_sparing.s_packet_len =",
      "le16_to_cpu(spm->packetLength",
      "for (j = 0; j < spm->numSparingTables; j++)",
      "struct buffer_head *bh2",
      "loc = le32_to_cpu",
      "spm->locSparingTable[j]",
      "bh2 = udf_read_tagged(sb, loc, loc,",
      "&ident",
      "map->s_type_specific.s_sparing.",
      "s_spar_map[j] = bh2",
      "if (bh2 == NULL",
      "continue",
      "st = (struct sparingTable *)bh2->b_data",
      "if (ident != 0 || strncmp",
      "st->sparingIdent.ident,",
      "UDF_ID_SPARING,",
      "strlen(UDF_ID_SPARING)))",
      "brelse(bh2",
      "map->s_type_specific.s_sparing.",
      "s_spar_map[j] = NULL",
      "map->s_partition_func = udf_get_pblock_spar15"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.6,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2307,
    "id": "CVE-2012-2675",
    "commit_id": "2965eca30c408c13473c4146a9d47d547d288db1",
    "added_lines": [
      "size_t bytes=no*size",
      "if(size && no!=bytes/size",
      "return 0",
      "unsigned flags=NEDMALLOC_FORCERESERVE(p, 0, bytes",
      "return nedpmalloc2(p, bytes, 0, M2_ZERO_MEMORY|flags"
    ],
    "removed_lines": [
      "unsigned flags=NEDMALLOC_FORCERESERVE(p, 0, no*size",
      "return nedpmalloc2(p, size*no, 0, M2_ZERO_MEMORY|flags"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 2308,
    "id": "CVE-2012-2673",
    "commit_id": "be9df82919960214ee4b9d3313523bff44fd99e1",
    "added_lines": [
      "if (lb_rounded < lb",
      "return((*GC_get_oom_fn())(lb"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 2309,
    "id": "CVE-2012-2673",
    "commit_id": "6a93f8e5bcad22137f41b6c60a1c7384baaec2b3",
    "added_lines": [
      "#include <limits.h>",
      "#ifdef SIZE_MAX",
      "# define GC_SIZE_MAX SIZE_MAX",
      "#else",
      "# define GC_SIZE_MAX (~(size_t)0",
      "if (lb && n > GC_SIZE_MAX / lb"
    ],
    "removed_lines": [
      "#ifndef SIZE_MAX",
      "#define SIZE_MAX (~(size_t)0",
      "if (lb && n > SIZE_MAX / lb"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 2310,
    "id": "CVE-2012-2673",
    "commit_id": "83231d0ab5ed60015797c3d1ad9056295ac3b2bb",
    "added_lines": [
      "#define GC_SQRT_SIZE_MAX ((1U << (WORDSZ / 2)) - 1",
      "if ((lb | n) > GC_SQRT_SIZE_MAX",
      "&& lb && n > GC_SIZE_MAX / lb"
    ],
    "removed_lines": [
      "if (lb && n > GC_SIZE_MAX / lb"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 2311,
    "id": "CVE-2012-1571",
    "commit_id": "1859fdb4e67c49c463c4e0078054335cd46ba295",
    "added_lines": [
      "FILE_RCSID(\"@(#)$File: cdf.c,v 1.46 2011/09/16 21:23:59 christos Exp $\"",
      "size_t ss = CDF_SEC_SIZE(h",
      "size_t pos = CDF_SEC_POS(h, id",
      "assert(ss == len",
      "return cdf_read(info, (off_t)pos, ((char *)buf) + offs, len",
      "size_t ss = CDF_SHORT_SEC_SIZE(h",
      "size_t pos = CDF_SHORT_SEC_POS(h, id",
      "assert(ss == len",
      "if (sst->sst_len < (size_t)id)",
      "DPRINTF((\"bad sector id %d > %d\\n\", id, sst->sst_len",
      "return -1",
      "((const char *)sst->sst_tab) + pos, len",
      "if (q + o >= e",
      "goto out"
    ],
    "removed_lines": [
      "FILE_RCSID(\"@(#)$File: cdf.c,v 1.45 2011/08/28 08:38:48 christos Exp $\"",
      "assert((size_t)CDF_SEC_SIZE(h) == len",
      "return cdf_read(info, (off_t)CDF_SEC_POS(h, id),",
      "((char *)buf) + offs, len",
      "assert((size_t)CDF_SHORT_SEC_SIZE(h) == len",
      "((const char *)sst->sst_tab) + CDF_SHORT_SEC_POS(h, id), len"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 10"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "invalid pointer dereference",
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 2314,
    "id": "CVE-2012-0038",
    "commit_id": "093019cf1b18dd31b2c3b77acce4e000e2cbc9ce",
    "added_lines": [
      "unsigned int count, i"
    ],
    "removed_lines": [
      "int count, i"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 2320,
    "id": "CVE-2013-2596",
    "commit_id": "b4cbb197c7e7a68dbad0d491242e3ca67420c13e",
    "added_lines": [
      "int vm_iomap_memory(struct vm_area_struct *vma, phys_addr_t start, unsigned long len",
      "unsigned long vm_len, pfn, pages",
      "if (start + len < start",
      "return -EINVAL",
      "len += start & ~PAGE_MASK",
      "pfn = start >> PAGE_SHIFT",
      "pages = (len + ~PAGE_MASK) >> PAGE_SHIFT",
      "if (pfn + pages < pfn",
      "return -EINVAL",
      "if (vma->vm_pgoff > pages",
      "return -EINVAL",
      "pfn += vma->vm_pgoff",
      "pages -= vma->vm_pgoff",
      "vm_len = vma->vm_end - vma->vm_start",
      "if (vm_len >> PAGE_SHIFT > pages",
      "return -EINVAL",
      "return io_remap_pfn_range(vma, vma->vm_start, pfn, vm_len, vma->vm_page_prot",
      "EXPORT_SYMBOL(vm_iomap_memory"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": " +Priv",
    "score": 6.9,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow +Priv ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2330,
    "id": "CVE-2014-4656",
    "commit_id": "883a1d49f0d77d30012f114b2e19fc141beb3e8e",
    "added_lines": [
      "if (id.index > UINT_MAX - kcontrol->count",
      "goto error"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2331,
    "id": "CVE-2014-4502",
    "commit_id": "ff7f30129f15f7a2213f8ced0cd65c9a331493d9",
    "added_lines": [
      "if (n2size < 1"
    ],
    "removed_lines": [
      "if (!n2size)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 10.0,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2332,
    "id": "CVE-2014-4502",
    "commit_id": "bac5831b355f916e0696b7bbcccfc51c057b729a",
    "added_lines": [
      "if (n2size < 1"
    ],
    "removed_lines": [
      "if (!n2size)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 10.0,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2333,
    "id": "CVE-2014-4501",
    "commit_id": "78cc408369bdbbd440196c93574098d1482efbce",
    "added_lines": [
      "applog(LOG_WARNING, \"Stratum client.reconnect received but is disabled, not reconnecting.\"",
      "char *url, *port, address[256]",
      "char *sockaddr_url, *stratum_port, *tmp;",
      "snprintf(address, sizeof(address), \"%s:%s\", url, port"
    ],
    "removed_lines": [
      "char *sockaddr_url, *stratum_port, *tmp",
      "char *url, *port, address[256]",
      "applog(LOG_WARNING, \"Stratum client.reconnect forbidden, aborting.\"",
      "memset(address, 0, 255",
      "sprintf(address, \"%s:%s\", url, port"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 10.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_COPY",
      "SIZE_CHECK"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "MEM_ZERO",
      "MEM_COPY"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2334,
    "id": "CVE-2014-4501",
    "commit_id": "c80ad8548251eb0e15329fc240c89070640c9d79",
    "added_lines": [
      "if (url_len >= sizeof(url_address",
      "applog(LOG_WARNING, \"%s: Truncating overflowed address '%.*s'\",",
      "__func__, url_len, url_begin",
      "url_len = sizeof(url_address) - 1"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 10.0,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2335,
    "id": "CVE-2014-4501",
    "commit_id": "e1c5050734123973b99d181c45e74b2cbb00272e",
    "added_lines": [
      "static bool _valid_hex(char *s, const char *file, const char *func, const int line",
      "bool ret = false",
      "int i, len",
      "if (unlikely(!s))",
      "applog(LOG_ERR, \"Null string passed to valid_hex from\"IN_FMT_FFL, file, func, line",
      "return ret",
      "len = strlen(s",
      "if (unlikely(!len))",
      "applog(LOG_ERR, \"Zero length string passed to valid_hex from\"IN_FMT_FFL, file, func, line",
      "return ret",
      "for (i = 0; i < len; i++)",
      "unsigned char idx = s[i]",
      "if (unlikely(hex2bin_tbl[idx] < 0))",
      "applog(LOG_ERR, \"Invalid char %x passed to valid_hex from\"IN_FMT_FFL, idx, file, func, line",
      "return ret",
      "ret = true",
      "return ret",
      "#define valid_hex(s) _valid_hex(s, __FILE__, __func__, __LINE__",
      "snprintf(url_address, 254, \"%.*s\", url_len, url_begin",
      "if (!valid_hex(job_id) || !valid_hex(prev_hash) || !valid_hex(coinbase1) ||",
      "!valid_hex(coinbase2) || !valid_hex(bbversion) || !valid_hex(nbit) ||",
      "!valid_hex(ntime))",
      "free(job_id",
      "free(coinbase1",
      "free(coinbase2",
      "snprintf(address, 254, \"%s:%s\", url, port",
      "if (!valid_hex(nonce1))",
      "applog(LOG_INFO, \"Failed to get valid nonce1 in initiate_stratum\"",
      "if (n2size < 2 || n2size > 16)",
      "applog(LOG_INFO, \"Failed to get valid n2size in initiate_stratum\""
    ],
    "removed_lines": [
      "sprintf(url_address, \"%.*s\", url_len, url_begin",
      "if (!job_id || !prev_hash || !coinbase1 || !coinbase2 || !bbversion || !nbit || !ntime)",
      "if (job_id",
      "free(job_id",
      "if (coinbase1",
      "free(coinbase1",
      "if (coinbase2",
      "free(coinbase2",
      "sprintf(address, \"%s:%s\", url, port",
      "if (!nonce1)",
      "applog(LOG_INFO, \"Failed to get nonce1 in initiate_stratum\"",
      "if (!n2size)",
      "applog(LOG_INFO, \"Failed to get n2size in initiate_stratum\""
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 10.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "INDEX_OP",
      "RETURN",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "MEM_FREE",
      "MEM_FREE",
      "MEM_FREE",
      "MEM_COPY",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "MEM_FREE",
      "CONTROL_FLOW",
      "MEM_FREE",
      "CONTROL_FLOW",
      "MEM_FREE",
      "MEM_COPY",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2338,
    "id": "CVE-2014-3587",
    "commit_id": "0641e56be1af003aa02c7c6b0184466540637233",
    "added_lines": [
      "FILE_RCSID(\"@(#)$File: cdf.c,v 1.64 2014/07/24 19:35:39 christos Exp $\"",
      "if (q < p)",
      "DPRINTF((\"Wrapped around %p < %p\\n\", q, p",
      "goto out"
    ],
    "removed_lines": [
      "FILE_RCSID(\"@(#)$File: cdf.c,v 1.63 2014/06/09 13:04:37 christos Exp $\""
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2343,
    "id": "CVE-2011-3346",
    "commit_id": "103b40f51e4012b3b0ad20f615562a1806d7f49a",
    "added_lines": [
      "static uint32_t scsi_init_iovec(SCSIDiskReq *r",
      "r->iov.iov_len = MIN(r->sector_count * 512, SCSI_DMA_BUF_SIZE",
      "qemu_iovec_init_external(&r->qiov, &r->iov, 1",
      "return r->qiov.size / 512",
      "DPRINTF(\"Data ready tag=0x%x len=%zd\\n\", r->req.tag, r->qiov.size",
      "n = r->qiov.size / 512",
      "scsi_req_data(&r->req, r->qiov.size",
      "n = scsi_init_iovec(r",
      "n = r->qiov.size / 512",
      "scsi_init_iovec(r",
      "DPRINTF(\"Write complete tag=0x%x more=%d\\n\", r->req.tag, r->qiov.size",
      "scsi_req_data(&r->req, r->qiov.size",
      "n = r->qiov.size / 512",
      "scsi_write_complete, r"
    ],
    "removed_lines": [
      "DPRINTF(\"Data ready tag=0x%x len=%zd\\n\", r->req.tag, r->iov.iov_len",
      "n = r->iov.iov_len / 512",
      "scsi_req_data(&r->req, r->iov.iov_len",
      "n = r->sector_count",
      "if (n > SCSI_DMA_BUF_SIZE / 512",
      "n = SCSI_DMA_BUF_SIZE / 512",
      "r->iov.iov_len = n * 512",
      "qemu_iovec_init_external(&r->qiov, &r->iov, 1",
      "uint32_t len",
      "n = r->iov.iov_len / 512",
      "len = r->sector_count * 512",
      "if (len > SCSI_DMA_BUF_SIZE)",
      "len = SCSI_DMA_BUF_SIZE",
      "r->iov.iov_len = len",
      "DPRINTF(\"Write complete tag=0x%x more=%d\\n\", r->req.tag, len",
      "scsi_req_data(&r->req, len",
      "n = r->iov.iov_len / 512",
      "qemu_iovec_init_external(&r->qiov, &r->iov, 1",
      "scsi_write_complete, r"
    ],
    "cause": [
      "Memory Management",
      "Configuration or Permissions Errors"
    ],
    "effect": "DoS ",
    "score": 4.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "permissions",
      "buffer overflow"
    ]
  },
  {
    "index": 2345,
    "id": "CVE-2015-5707",
    "commit_id": "fdc81f45e9f57858da6351836507fbcf1b7583ee",
    "added_lines": [
      "struct iovec *iov = NULL",
      "res = import_iovec(rw, hp->dxferp, iov_count, 0, &iov, &i",
      "if (res < 0",
      "return res",
      "iov_iter_truncate(&i, hp->dxfer_len"
    ],
    "removed_lines": [
      "if (unlikely(iov_count > MAX_UIOVEC",
      "return -EINVAL",
      "int size = sizeof(struct iovec) * iov_count",
      "struct iovec *iov",
      "iov = memdup_user(hp->dxferp, size",
      "if (IS_ERR(iov",
      "return PTR_ERR(iov",
      "iov_iter_init(&i, rw, iov, iov_count,",
      "min_t(size_t, hp->dxfer_len,",
      "iov_length(iov, iov_count"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.6,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2346,
    "id": "CVE-2015-4002",
    "commit_id": "9a59029bc218b48eff8b5d4dde5662fd79d3e1a8",
    "added_lines": [
      "unsigned int n",
      "if (!body->unit_size ||",
      "len < sizeof(struct oz_multiple_fixed) - 1",
      "n = (len - (sizeof(struct oz_multiple_fixed) - 1"
    ],
    "removed_lines": [
      "int n",
      "if (!body->unit_size",
      "n = (len - sizeof(struct oz_multiple_fixed)+1"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode ",
    "score": 9.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "does not ensure that certain length values are sufficiently large,"
    ]
  },
  {
    "index": 2347,
    "id": "CVE-2015-3885",
    "commit_id": "4606c28f494a750892c5c1ac7903e62dd1c6fdb5",
    "added_lines": [
      "#define LIBRAW_PATCH_VERSION  1"
    ],
    "removed_lines": [
      "#define LIBRAW_PATCH_VERSION  0"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 2350,
    "id": "CVE-2014-9728",
    "commit_id": "e159332b9af4b04d882dbcfe1bb0117f0a6d4b58",
    "added_lines": [
      "if (iinfo->i_alloc_type == ICBTAG_FLAG_AD_IN_ICB)",
      "if (iinfo->i_lenAlloc != inode->i_size",
      "goto out",
      "if (inode->i_size > inode->i_sb->s_blocksize -",
      "udf_file_entry_alloc_offset(inode",
      "goto out"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 2351,
    "id": "CVE-2014-9728",
    "commit_id": "a1d47b262952a45aae62bd49cfaf33dd76c11a2c",
    "added_lines": [
      "int err",
      "if (inode->i_size > inode->i_sb->s_blocksize)",
      "err = -ENAMETOOLONG",
      "goto out_unmap",
      "if (!bh)",
      "err = -EIO",
      "goto out_unlock_inode",
      "out_unlock_inode:",
      "out_unmap:"
    ],
    "removed_lines": [
      "int err = -EIO",
      "if (!bh",
      "goto out",
      "out:"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS ",
    "score": 4.9,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 2354,
    "id": "CVE-2016-9535",
    "commit_id": "6a984bf7905c6621281588431f384e79d11a2e33",
    "added_lines": [
      "uint8 *tmp",
      "tmp = (uint8 *)_TIFFmalloc(cc",
      "uint8 *tmp",
      "tmp = (uint8 *)_TIFFmalloc(cc",
      "_TIFFfree( working_copy"
    ],
    "removed_lines": [
      "uint8 *tmp = (uint8 *)_TIFFmalloc(cc",
      "uint8 *tmp = (uint8 *)_TIFFmalloc(cc"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap-buffer-overflow",
      "assertion failure",
      "buffer overflow"
    ]
  },
  {
    "index": 2355,
    "id": "CVE-2016-7568",
    "commit_id": "c18263e0e0769faee96a5d0ee04b750c442783c6",
    "added_lines": [
      "if (overflow2(gdImageSX(im), 4))",
      "return",
      "if (overflow2(gdImageSX(im) * 4, gdImageSY(im)))",
      "return"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 2356,
    "id": "CVE-2016-7163",
    "commit_id": "ef01f18dfc6780b776d0674ed3e7415c6ef54d24",
    "added_lines": [
      "l_current_pi->include = (OPJ_INT16*) opj_calloc((size_t)(l_tcp->numlayers + 1U) * l_step_l, sizeof(OPJ_INT16"
    ],
    "removed_lines": [
      "l_current_pi->include = (OPJ_INT16*) opj_calloc((l_tcp->numlayers +1) * l_step_l, sizeof(OPJ_INT16"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "integer overflow"
    ]
  },
  {
    "index": 2362,
    "id": "CVE-2016-5688",
    "commit_id": "fc43974d34318c834fbf78570ca1a3764ed8c7d7",
    "added_lines": [
      "status=SetImageExtent(image,image->columns,image->rows,exception",
      "if (status == MagickFalse",
      "break",
      "status=SetImageExtent(image,image->columns,image->rows,exception",
      "if (status == MagickFalse",
      "break"
    ],
    "removed_lines": [
      "status=SetImageExtent(image,image->columns,image->rows,exception",
      "if (status == MagickFalse",
      "return(DestroyImageList(image"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "invalid write"
    ]
  },
  {
    "index": 2363,
    "id": "CVE-2016-5688",
    "commit_id": "aecd0ada163a4d6c769cec178955d5f3e9316f2f",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "invalid write"
    ]
  },
  {
    "index": 2366,
    "id": "CVE-2016-5356",
    "commit_id": "f5ec0afb766f19519ea9623152cca3bbe2229500",
    "added_lines": [
      "static int parse_cosine_packet(FILE_T fh, struct wtap_pkthdr *phdr, Buffer* buf,",
      "char *line, int *err, gchar **err_info",
      "return parse_cosine_packet(wth->fh, &wth->phdr, wth->frame_buffer,",
      "line, err, err_info",
      "return parse_cosine_packet(wth->random_fh, phdr, buf, line, err,",
      "static gboolean",
      "parse_cosine_packet(FILE_T fh, struct wtap_pkthdr *phdr, Buffer *buf,",
      "char *line, int *err, gchar **err_info",
      "int\tyy, mm, dd, hr, min, sec, csec",
      "guint\tpkt_len",
      "guint8 *pd",
      "int\ti, hex_lines, n, caplen = 0",
      "\"%4d-%2d-%2d,%2d:%2d:%2d.%9d: %5s (%127[A-Za-z0-9/:]), Length:%9u, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
      "return FALSE",
      "\"%5s (%127[A-Za-z0-9/:]), Length:%9u, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
      "return FALSE",
      "if (pkt_len > WTAP_MAX_PACKET_SIZE)",
      "pkt_len, WTAP_MAX_PACKET_SIZE",
      "return FALSE",
      "ws_buffer_assure_space(buf, pkt_len"
    ],
    "removed_lines": [
      "#define COSINE_MAX_PACKET_LEN\t65536",
      "static int parse_cosine_rec_hdr(struct wtap_pkthdr *phdr, const char *line,",
      "int *err, gchar **err_info",
      "static gboolean parse_cosine_hex_dump(FILE_T fh, struct wtap_pkthdr *phdr,",
      "int pkt_len, Buffer* buf, int *err, gchar **err_info",
      "int\tpkt_len",
      "pkt_len = parse_cosine_rec_hdr(&wth->phdr, line, err, err_info",
      "if (pkt_len == -1",
      "return FALSE",
      "return parse_cosine_hex_dump(wth->fh, &wth->phdr, pkt_len,",
      "wth->frame_buffer, err, err_info",
      "int\tpkt_len",
      "pkt_len = parse_cosine_rec_hdr(phdr, line, err, err_info",
      "if (pkt_len == -1",
      "return FALSE",
      "return parse_cosine_hex_dump(wth->random_fh, phdr, pkt_len, buf, err,",
      "static int",
      "parse_cosine_rec_hdr(struct wtap_pkthdr *phdr, const char *line,",
      "int *err, gchar **err_info",
      "int\tyy, mm, dd, hr, min, sec, csec, pkt_len",
      "\"%4d-%2d-%2d,%2d:%2d:%2d.%9d: %5s (%127[A-Za-z0-9/:]), Length:%9d, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
      "return -1",
      "\"%5s (%127[A-Za-z0-9/:]), Length:%9d, Pro:%9d, Off:%9d, Pri:%9d, RM:%9d, Err:%9d [%8x, %8x]\",",
      "return -1",
      "return pkt_len",
      "FALSE if any error is encountered. */",
      "static gboolean",
      "parse_cosine_hex_dump(FILE_T fh, struct wtap_pkthdr *phdr, int pkt_len,",
      "Buffer* buf, int *err, gchar **err_info",
      "guint8 *pd",
      "gchar\tline[COSINE_LINE_LENGTH]",
      "int\ti, hex_lines, n, caplen = 0",
      "ws_buffer_assure_space(buf, COSINE_MAX_PACKET_LEN"
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "RETURN",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "mishandles sscanf unsigned-integer processing"
    ]
  },
  {
    "index": 2372,
    "id": "CVE-2016-2315",
    "commit_id": "de1e67d0703894cb6ea782e36abb63976ab07e60",
    "added_lines": [
      "extern void show_object_with_name(FILE *, struct object *, const char *"
    ],
    "removed_lines": [
      "extern void show_object_with_name(FILE *, struct object *,",
      "struct strbuf *, const char *"
    ],
    "cause": [
      "Memory Management",
      "Logical Flaws"
    ],
    "effect": "ExecCode ",
    "score": 10.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "incorrect integer data type",
      "buffer overflow"
    ]
  },
  {
    "index": 2373,
    "id": "CVE-2016-1583",
    "commit_id": "f0fe970df3838c202ef6c07a4c2b36838ef0a88b",
    "added_lines": [
      "static int ecryptfs_mmap(struct file *file, struct vm_area_struct *vma",
      "struct file *lower_file = ecryptfs_file_to_lower(file",
      "if (!lower_file->f_op->mmap",
      "return -ENODEV",
      "return generic_file_mmap(file, vma",
      ".mmap = ecryptfs_mmap,"
    ],
    "removed_lines": [
      ".mmap = generic_file_mmap,"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  +Priv",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "stack memory consumption"
    ]
  },
  {
    "index": 2374,
    "id": "CVE-2016-1583",
    "commit_id": "2f36db71009304b3f0b95afacd8eba1f9f046b87",
    "added_lines": [
      "#include <linux/file.h>",
      "goto have_file",
      "if (IS_ERR(*lower_file))",
      "goto out",
      "have_file:",
      "if ((*lower_file)->f_op->mmap == NULL)",
      "fput(*lower_file",
      "rc = -EMEDIUMTYPE"
    ],
    "removed_lines": [
      "goto out",
      "if (IS_ERR(*lower_file"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS  +Priv",
    "score": 7.2,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow +Priv ",
    "summary": [
      "stack memory consumption"
    ]
  },
  {
    "index": 2378,
    "id": "CVE-2015-8830",
    "commit_id": "4c185ce06dca14f5cea192f5a2c981ef50663f2b",
    "added_lines": [
      "bool compat,",
      "struct iov_iter *iter",
      "iov_iter_init(iter, rw, *iovec, *nr_segs, *len",
      "struct iovec *iovec,",
      "struct iov_iter *iter",
      "if (len > MAX_RW_COUNT",
      "len = MAX_RW_COUNT",
      "iov_iter_init(iter, rw, iovec, *nr_segs, len",
      "&len, &iovec, compat, &iter",
      "len, iovec, &iter",
      "ret = rw_op(req, iter.iov, iter.nr_segs, req->ki_pos"
    ],
    "removed_lines": [
      "bool compat",
      "struct iovec *iovec",
      "&len, &iovec, compat",
      "len, iovec",
      "iov_iter_init(&iter, rw, iovec, nr_segs, len",
      "ret = rw_op(req, iovec, nr_segs, req->ki_pos"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.2,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 2382,
    "id": "CVE-2017-1000249",
    "commit_id": "9611f31313a93aa036389c5f3b15eea53510d4d",
    "added_lines": [
      "FILE_RCSID(\"@(#)$File: readelf.c,v 1.127 2015/11/18 12:29:29 christos Exp $\"",
      "type == NT_GNU_BUILD_ID && (descsz >= 4 || descsz <= 20))",
      "const char *btype",
      "switch (descsz)",
      "case 8:",
      "btype = \"xxHash\"",
      "break",
      "case 16:",
      "btype = \"md5/uuid\"",
      "break",
      "case 20:",
      "btype = \"sha1\"",
      "break",
      "default:",
      "btype = \"unknown\"",
      "break",
      "if (file_printf(ms, \", BuildID[%s]=\", btype) == -1"
    ],
    "removed_lines": [
      "FILE_RCSID(\"@(#)$File: readelf.c,v 1.126 2015/11/16 16:03:45 christos Exp $\"",
      "type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20))",
      "if (file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :",
      "\"sha1\") == -1"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 2.1,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "overwrite a fixed 20 bytes stack buffer"
    ]
  },
  {
    "index": 2385,
    "id": "CVE-2017-16546",
    "commit_id": "e04cf3e9524f50ca336253513d977224e083b816",
    "added_lines": [
      "if (WPG_Palette.StartIndex > WPG_Palette.NumOfEntries",
      "ThrowReaderException(CorruptImageError,\"InvalidColormapIndex\""
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly validate the colormap index in a WPG palette",
      "uninitialized data"
    ]
  },
  {
    "index": 2416,
    "id": "CVE-2017-9996",
    "commit_id": "e1b60aad77c27ed5d4dfc11e5e6a05a38c70489d",
    "added_lines": [
      "if (!encoding && c->palette_size && c->bpp <= 8 && c->format != CHUNKY)"
    ],
    "removed_lines": [
      "if (!encoding && c->palette_size && c->bpp <= 8)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2417,
    "id": "CVE-2017-9995",
    "commit_id": "2171dfae8c065878a2e130390eb78cf2947a5b69",
    "added_lines": [
      "if (x >= 16 || c >= 256)",
      "return AVERROR_INVALIDDATA"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2424,
    "id": "CVE-2017-7586",
    "commit_id": "708e996c87c5fae77b104ccfeb8f6db784c32074",
    "added_lines": [
      "{\tSFE_BAD_HEADER_ALLOC \t, \"Error : Required header allocation is too large.\" },",
      "if ((psf = psf_allocate ()) == NULL",
      "if ((psf = psf_allocate ()) == NULL",
      "if ((psf = psf_allocate ()) == NULL",
      "free (psf->header.ptr)"
    ],
    "removed_lines": [
      "if ((psf = calloc (1, sizeof (SF_PRIVATE))) == NULL",
      "if ((psf = calloc (1, sizeof (SF_PRIVATE))) == NULL",
      "if ((psf = calloc (1, sizeof (SF_PRIVATE))) == NULL"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "MEM_FREE",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_ALLOC",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "MEM_ALLOC",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "MEM_ALLOC",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2438,
    "id": "CVE-2017-5511",
    "commit_id": "7d65a814ac76bd04760072c33e452371692ee790",
    "added_lines": [
      "length=(MagickSizeType) (unsigned char) ReadBlobByte(image"
    ],
    "removed_lines": [
      "length=(MagickSizeType) ReadBlobByte(image"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP"
    ],
    "unsafe_features": [
      "INDEX_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2444,
    "id": "CVE-2016-10128",
    "commit_id": "4ac39c76c0153d1ee6889a0984c39e97731684b2",
    "added_lines": [
      "if (len != 0 && len < PKT_LEN_SIZE",
      "return GIT_ERROR"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2445,
    "id": "CVE-2016-9933",
    "commit_id": "77f619d48259383628c3ec4654b1ad578e9eb40e",
    "added_lines": [
      "gdimagefilltoborder/bug00037 \\",
      "gdimagefilltoborder/github_bug_215"
    ],
    "removed_lines": [
      "gdimagefilltoborder/bug00037"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "segmentation violation",
      "stack consumption"
    ]
  },
  {
    "index": 2458,
    "id": "CVE-2015-8957",
    "commit_id": "78f82d9d1c2944725a279acd573a22168dc6e22a",
    "added_lines": [
      "bytes_per_line=sun_info.width*sun_info.depth",
      "sun_data=(unsigned char *) AcquireQuantumMemory((size_t) MagickMax",
      "sun_info.length,bytes_per_line*sun_info.width),sizeof(*sun_data"
    ],
    "removed_lines": [
      "sun_data=(unsigned char *) AcquireQuantumMemory((size_t) sun_info.length,",
      "sizeof(*sun_data",
      "bytes_per_line=sun_info.width*sun_info.depth"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2459,
    "id": "CVE-2015-8957",
    "commit_id": "450bd716ed3b9186dd10f9e60f630a3d9eeea2a4",
    "added_lines": [
      "case RMT_NONE:",
      "break"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2482,
    "id": "CVE-2018-11219",
    "commit_id": "1eb08bcd4634ae42ec45e8284923ac048beaa4c3",
    "added_lines": [
      "static int getnum (const char **fmt, int df)",
      "case 'c': return getnum(fmt, 1",
      "int sz = getnum(fmt, sizeof(int",
      "int a = getnum(fmt, MAXALIGN",
      "int n = 0;",
      "luaL_checkstack(L, 2, \"too many results\"",
      "lua_pushnumber(L, res); n++",
      "lua_pushnumber(L, f); n++",
      "lua_pushnumber(L, d); n++",
      "if (n == 0 || !lua_isnumber(L, -1",
      "luaL_error(L, \"format 'c0' needs a previous size\"",
      "lua_pop(L, 1); n--",
      "luaL_argcheck(L, size <= ld && pos <= ld - size,",
      "2, \"data string too short\"",
      "lua_pushlstring(L, data+pos, size); n++",
      "lua_pushlstring(L, data+pos, size - 1); n++",
      "lua_pushinteger(L, pos + 1);",
      "return n + 1"
    ],
    "removed_lines": [
      "static int getnum (lua_State *L, const char **fmt, int df)",
      "if (a > (INT_MAX / 10) || a * 10 > (INT_MAX - (**fmt - '0'",
      "luaL_error(L, \"integral size overflow\"",
      "case 'c': return getnum(L, fmt, 1",
      "int sz = getnum(L, fmt, sizeof(int",
      "int a = getnum(L, fmt, MAXALIGN",
      "lua_settop(L, 2",
      "luaL_checkstack(L, 1, \"too many results\"",
      "lua_pushnumber(L, res",
      "lua_pushnumber(L, f",
      "lua_pushnumber(L, d",
      "if (!lua_isnumber(L, -1",
      "luaL_error(L, \"format `c0' needs a previous size\"",
      "lua_pop(L, 1",
      "luaL_argcheck(L, pos+size <= ld, 2, \"data string too short\"",
      "lua_pushlstring(L, data+pos, size",
      "lua_pushlstring(L, data+pos, size - 1",
      "lua_pushinteger(L, pos + 1",
      "return lua_gettop(L) - 2"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 8"
    ],
    "effect": "",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "bounds check",
      "integer overflow"
    ]
  },
  {
    "index": 2483,
    "id": "CVE-2018-11218",
    "commit_id": "52a00201fca331217c3b4b8b634f6a0f57d6b7d3",
    "added_lines": [
      "if (!lua_checkstack(L, nargs",
      "return luaL_argerror(L, 0, \"Too many arguments for MessagePack pack.\""
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": " Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2484,
    "id": "CVE-2018-10887",
    "commit_id": "3f461902dc1072acb8b7607ee65d0a0458ffac2a",
    "added_lines": [
      "#include \"delta.h\""
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out of bound read",
      "out of bound read",
      "integer overflow"
    ]
  },
  {
    "index": 2486,
    "id": "CVE-2018-9988",
    "commit_id": "027f84c69f4ef30c0693832a6c396ef19e563ca1",
    "added_lines": [
      "if( p != end - sig_len"
    ],
    "removed_lines": [
      "if( end != p + sig_len"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 2487,
    "id": "CVE-2018-8098",
    "commit_id": "3db1af1f370295ad5355b8f64b865a2a357bcac0",
    "added_lines": [
      "if (path_len > GIT_PATH_MAX",
      "return index_error_invalid(\"unreasonable path length\""
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "integer overflow"
    ]
  },
  {
    "index": 2488,
    "id": "CVE-2018-6337",
    "commit_id": "e2d10a1e32d01f71aaadd81169bcb9ae86c5d6b8",
    "added_lines": [
      "diff --git a/third-party/folly/src/folly/Random.cpp b/third-party/folly/src/folly/Random.cpp",
      "index afb62f5d..40a6b17f 100644",
      "--- a/third-party/folly/src/folly/Random.cpp",
      "@@ -72,6 +72,7 @@ void readRandomDevice(void* data, size_t size)",
      "class BufferedRandomDevice",
      "public:",
      "+  static once_flag flag",
      "static constexpr size_t kDefaultBufferSize = 128",
      "explicit BufferedRandomDevice(size_t bufferSize = kDefaultBufferSize",
      "@@ -97,10 +98,28 @@ class BufferedRandomDevice",
      "unsigned char* ptr_",
      "+once_flag BufferedRandomDevice::flag",
      "+struct RandomTag",
      "+",
      "BufferedRandomDevice::BufferedRandomDevice(size_t bufferSize",
      ": bufferSize_(bufferSize),",
      "buffer_(new unsigned char[bufferSize]),",
      "ptr_(buffer_.get() + bufferSize) {  // refill on first use",
      "+  call_once(flag, [this]()",
      "+    detail::AtFork::registerHandler",
      "+        this,",
      "+         []() { return true; },",
      "+         []() {},",
      "+",
      "+        []()",
      "+          using Single = SingletonThreadLocal<BufferedRandomDevice, RandomTag>",
      "+          auto& t = Single::get",
      "+          // Clear out buffered data on fork.",
      "+          //",
      "+          // Ensure child and parent do not share same entropy pool.",
      "+          t.ptr_ = t.buffer_.get() + t.bufferSize_",
      "+",
      "+",
      "void BufferedRandomDevice::getSlow(unsigned char* data, size_t size)",
      "@@ -124,8 +143,6 @@ void BufferedRandomDevice::getSlow(unsigned char* data, size_t size)",
      "ptr_ += size",
      "-struct RandomTag",
      "-",
      "} // namespace",
      "void Random::secureRandom(void* data, size_t size)",
      "diff --git a/third-party/folly/src/folly/detail/AtFork.cpp b/third-party/folly/src/folly/detail/AtFork.cpp",
      "index 48c42fd3..12a6f934 100644",
      "--- a/third-party/folly/src/folly/detail/AtFork.cpp",
      "@@ -13,12 +13,14 @@",
      "+",
      "#include <folly/detail/AtFork.h>",
      "#include <list>",
      "#include <mutex>",
      "-#include <folly/Exception.h>",
      "+#include <folly/lang/Exception.h>",
      "+#include <folly/portability/PThread.h>",
      "namespace folly",
      "@@ -72,7 +74,10 @@ class AtForkList",
      "#if FOLLY_HAVE_PTHREAD_ATFORK",
      "int ret = pthread_atfork",
      "&AtForkList::prepare, &AtForkList::parent, &AtForkList::child",
      "-    checkPosixError(ret, \"pthread_atfork failed\"",
      "+    if (ret != 0)",
      "+      throw_exception<std::system_error>",
      "+          ret, std::generic_category(), \"pthread_atfork failed\"",
      "+",
      "#elif !__ANDROID__ && !defined(_MSC_VER",
      "diff --git a/third-party/folly/src/folly/test/RandomTest.cpp b/third-party/folly/src/folly/test/RandomTest.cpp",
      "index 9c33159b..2ee74c6d 100644",
      "--- a/third-party/folly/src/folly/test/RandomTest.cpp",
      "@@ -138,3 +138,24 @@ TEST(Random, sanity)",
      "std::unordered_set<uint64_t>(vals.begin(), vals.end()).size",
      "+",
      "+TEST(Random, SecureFork)",
      "+  unsigned char buffer = 0",
      "+  // Init random buffer",
      "+  folly::Random::secureRandom(&buffer, 1",
      "+",
      "+  auto pid = fork",
      "+  EXPECT_NE(pid, -1",
      "+  if (pid)",
      "+    // parent",
      "+    int status = 0",
      "+    folly::Random::secureRandom(&buffer, 1",
      "+    auto pid2 = wait(&status",
      "+    EXPECT_NE(WEXITSTATUS(status), buffer",
      "+    EXPECT_EQ(pid, pid2",
      "+  } else",
      "+    // child",
      "+    folly::Random::secureRandom(&buffer, 1",
      "+    exit(buffer); // Do not print gtest results",
      "+",
      "+"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "re-use a buffer"
    ]
  },
  {
    "index": 2504,
    "id": "CVE-2019-13615",
    "commit_id": "05beb69ba60acce09f73ed491bb76f332849c3a0",
    "added_lines": [
      "if (MaxDataSize <= ReadSize",
      "break",
      "} while (!bFound",
      "if (MaxDataSize <= ReadSize)",
      "bFound = false",
      "break"
    ],
    "removed_lines": [
      "} while (!bFound && MaxDataSize > ReadSize"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer over-read"
    ]
  },
  {
    "index": 2509,
    "id": "CVE-2019-13308",
    "commit_id": "61135001a625364e29bdce83832f043eebde7b5a",
    "added_lines": [
      "next_pixel=MagickFalse",
      "displacement=1",
      "if (k < 0",
      "continue"
    ],
    "removed_lines": [
      "next_pixel=MagickFalse",
      "displacement=1"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2510,
    "id": "CVE-2019-13307",
    "commit_id": "025e77fcb2f45b21689931ba3bf74eac153afa48",
    "added_lines": [
      "rows",
      "rows=MagickMax(GetImageListLength(images),",
      "(size_t) GetMagickResourceLimit(ThreadResource",
      "pixels=(PixelChannels **) AcquireQuantumMemory(rows,sizeof(*pixels",
      "columns=MaxPixelChannels",
      "for (i=0; i < (ssize_t) rows; i++"
    ],
    "removed_lines": [
      "number_threads",
      "number_threads=(size_t) GetMagickResourceLimit(ThreadResource",
      "pixels=(PixelChannels **) AcquireQuantumMemory(number_threads,",
      "sizeof(*pixels",
      "(void) memset(pixels,0,number_threads*sizeof(*pixels",
      "columns=images->columns",
      "for (i=0; i < (ssize_t) number_threads; i++"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "MEM_ZERO",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2511,
    "id": "CVE-2019-13306",
    "commit_id": "e92040ea6ee2a844ebfd2344174076795a4787bd",
    "added_lines": [
      "if ((q-pixels+extent+2) >= sizeof(pixels",
      "if ((q-pixels+extent+2) >= sizeof(pixels"
    ],
    "removed_lines": [
      "if ((q-pixels+extent+1) >= sizeof(pixels",
      "if ((q-pixels+extent+1) >= sizeof(pixels"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "off-by-one",
      "buffer overflow",
      "off-by-one error"
    ]
  },
  {
    "index": 2512,
    "id": "CVE-2019-13305",
    "commit_id": "29efd648f38b73a64d73f14cd2019d869a585888",
    "added_lines": [
      "if ((q-pixels+extent+1) >= sizeof(pixels",
      "(void) strncpy((char *) q,buffer,extent",
      "q+=extent",
      "(void) strncpy((char *) q,buffer,extent",
      "q+=extent"
    ],
    "removed_lines": [
      "(void) strncpy((char *) q,buffer,extent",
      "q+=extent",
      "if ((q-pixels+extent+2) >= sizeof(pixels",
      "(void) strncpy((char *) q,buffer,extent",
      "q+=extent"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "ARITH_OP",
      "MEM_COPY",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "off-by-one",
      "buffer overflow",
      "off-by-one error"
    ]
  },
  {
    "index": 2513,
    "id": "CVE-2019-13304",
    "commit_id": "bfa3b9610c83227894c92b0d312ad327fceb6241",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2514,
    "id": "CVE-2019-13300",
    "commit_id": "a906fe9298bf89e01d5272023db687935068849a",
    "added_lines": [
      "static PixelChannels **AcquirePixelThreadSet(const Image *images",
      "const Image",
      "columns,",
      "columns=images->columns",
      "for (next=images; next != (Image *) NULL; next=next->next",
      "columns=MagickMax(next->columns,columns",
      "pixels[i]=(PixelChannels *) AcquireQuantumMemory(columns,sizeof(**pixels",
      "for (j=0; j < (ssize_t) columns; j++"
    ],
    "removed_lines": [
      "static PixelChannels **AcquirePixelThreadSet(const Image *image",
      "pixels[i]=(PixelChannels *) AcquireQuantumMemory(image->columns,",
      "sizeof(**pixels",
      "for (j=0; j < (ssize_t) image->columns; j++"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2517,
    "id": "CVE-2019-13217",
    "commit_id": "98fdfc6df88b1e34a736d5e126e6c8139c8de1a6",
    "added_lines": [
      "if (pow((float) r+1, dim) <= entries",
      "return -1",
      "if ((int) floor(pow((float) r, dim)) > entries",
      "return -1",
      "LINE_OP(output[x], inverse_db_table[y&255]",
      "LINE_OP(output[x], inverse_db_table[y&255]",
      "if (w == NULL) return 0",
      "if (current_length >= 32) return error(f, VORBIS_invalid_setup",
      "int values = lookup1_values(c->entries, c->dimensions",
      "if (values < 0) return error(f, VORBIS_invalid_setup",
      "c->lookup_values = (uint32) values",
      "for (j=0; j < g->values-1; ++j",
      "if (p[j].x == p[j+1].x",
      "return error(f, VORBIS_invalid_setup",
      "if (m->coupling_steps > f->channels) return error(f, VORBIS_invalid_setup",
      "1.17    - 2019-07-08 - fix CVE-2019-13217, -13218, -13219, -13220, -13221, -13223, -13223",
      "found with Mayhem by ForAllSecure",
      "1.16    - 2019-03-04 - fix warnings",
      "1.15    - 2019-02-07 - explicit failure if Ogg Skeleton data is found",
      "1.14    - 2018-02-11 - delete bogus dealloca usage",
      "1.13    - 2018-01-29 - fix truncation of last frame (hopefully"
    ],
    "removed_lines": [
      "assert(pow((float) r+1, dim) > entries",
      "assert((int) floor(pow((float) r, dim)) <= entries); // (int),floor() as above",
      "LINE_OP(output[x], inverse_db_table[y]",
      "LINE_OP(output[x], inverse_db_table[y]",
      "assert(0",
      "c->lookup_values = lookup1_values(c->entries, c->dimensions"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 2524,
    "id": "CVE-2019-11487",
    "commit_id": "6b3a707736301c2128ca85ce85fb13f60b5e350a",
    "added_lines": [
      "if (unlikely(page_count(page) <= 0))",
      "if (pages)",
      "spin_unlock(ptl",
      "remainder = 0",
      "err = -ENOMEM",
      "break"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.2,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "use-after-free"
    ]
  },
  {
    "index": 2525,
    "id": "CVE-2019-11487",
    "commit_id": "88b1a17dfc3ed7728316478fae0f5ad508f50397",
    "added_lines": [
      "static inline __must_check bool try_get_page(struct page *page",
      "page = compound_head(page",
      "if (WARN_ON_ONCE(page_ref_count(page) <= 0",
      "return false",
      "page_ref_inc(page",
      "return true"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "use-after-free"
    ]
  },
  {
    "index": 2526,
    "id": "CVE-2019-11487",
    "commit_id": "8fde12ca79aff9b5ba951fce1a2641901b8d8e64",
    "added_lines": [
      "if (unlikely(page_count(page) <= 0))",
      "if (pages)",
      "spin_unlock(ptl",
      "remainder = 0",
      "err = -ENOMEM",
      "break"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.2,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "use-after-free"
    ]
  },
  {
    "index": 2527,
    "id": "CVE-2019-11487",
    "commit_id": "15fab63e1e57be9fdb5eec1bbc5916e9825e9acb",
    "added_lines": [
      "static bool buffer_pipe_buf_get(struct pipe_inode_info *pipe,",
      "if (ref->ref > INT_MAX/2",
      "return false",
      "return true"
    ],
    "removed_lines": [
      "static void buffer_pipe_buf_get(struct pipe_inode_info *pipe,"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 7.2,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "use-after-free"
    ]
  },
  {
    "index": 2536,
    "id": "CVE-2018-20847",
    "commit_id": "5d00b719f4b93b1445e6fb4c766b9a9883c57949",
    "added_lines": [
      "l_tile->x0 = (OPJ_INT32)opj_uint_max(l_cp->tx0 + p * l_cp->tdx, l_image->x0",
      "l_tile->y0 = (OPJ_INT32)opj_uint_max(l_cp->ty0 + q * l_cp->tdy, l_image->y0",
      "l_tile->x1 = (OPJ_INT32)opj_uint_min(l_cp->tx0 + (p + 1) * l_cp->tdx, l_image->x1",
      "l_tile->y1 = (OPJ_INT32)opj_uint_min(l_cp->ty0 + (q + 1) * l_cp->tdy, l_image->y1"
    ],
    "removed_lines": [
      "l_tile->x0 = opj_int_max((OPJ_INT32)(l_cp->tx0 + p * l_cp->tdx), (OPJ_INT32)l_image->x0",
      "l_tile->y0 = opj_int_max((OPJ_INT32)(l_cp->ty0 + q * l_cp->tdy), (OPJ_INT32)l_image->y0",
      "l_tile->x1 = opj_int_min((OPJ_INT32)(l_cp->tx0 + (p + 1) * l_cp->tdx), (OPJ_INT32)l_image->x1",
      "l_tile->y1 = opj_int_min((OPJ_INT32)(l_cp->ty0 + (q + 1) * l_cp->tdy), (OPJ_INT32)l_image->y1"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3013,
    "id": "CVE-2011-3903",
    "commit_id": "de66aac8b69c5e9f97905efb662557cfafb9b570",
    "added_lines": [
      "bug_81753e",
      "Memcheck:Cond",
      "...",
      "fun:_ZN6icu_4612RegexMatcher12MatchChunkAtEiaR10UErrorCode",
      "fun:_ZN6icu_4612RegexMatcher14findUsingChunkEv",
      "fun:_ZN6icu_4612RegexMatcher4findEv",
      "fun:_ZN6icu_4612RegexMatcher4findExR10UErrorCode",
      "fun:_ZN8autofill11MatchStringERKSbItN4base20string16_char_traitsESaItEES5_",
      "fun:_ZN9FormField5MatchEPK13AutofillFieldRKSbItN4base20string16_char_traitsESaItEEi"
    ],
    "removed_lines": [
      "bug_84304_a",
      "Memcheck:Cond",
      "...",
      "fun:_ZN6icu_4612RegexMatcher12MatchChunkAtEiaR10UErrorCode",
      "fun:_ZN6icu_4612RegexMatcher14findUsingChunkEv",
      "fun:_ZN6icu_4612RegexMatcher4findEv",
      "fun:_ZN6icu_4612RegexMatcher4findExR10UErrorCode",
      "fun:_ZN8autofill11MatchStringERKSbItN4base20string16_char_traitsESaItEES5_",
      "fun:_ZN9FormField5MatchEPK13AutofillFieldRKSbItN4base20string16_char_traitsESaItEEi",
      "bug_84304_b",
      "Memcheck:Value4",
      "...",
      "fun:_ZN6icu_4612RegexMatcher12MatchChunkAtEiaR10UErrorCode",
      "fun:_ZN6icu_4612RegexMatcher14findUsingChunkEv",
      "fun:_ZN6icu_4612RegexMatcher4findEv",
      "fun:_ZN6icu_4612RegexMatcher4findExR10UErrorCode",
      "fun:_ZN8autofill11MatchStringERKSbItN4base20string16_char_traitsESaItEES5_",
      "fun:_ZN9FormField5MatchEPK13AutofillFieldRKSbItN4base20string16_char_traitsESaItEEi",
      "fun:_ZN9FormField15MatchAndAdvanceEP15AutofillScannerRKSbItN4base20string16_char_traitsESaItEEiPPK13AutofillField",
      "fun:_ZN9FormField19ParseFieldSpecificsEP15AutofillScannerRKSbItN4base20string16_char_traitsESaItEEiPPK13AutofillField"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3014,
    "id": "CVE-2011-3906",
    "commit_id": "60c9d8a39e4aa78dd51c236bd1b2c4f17c9d27fe",
    "added_lines": [
      "windowInfo.windowSize = mainFrame->view()->visibleContentRect(includeScrollbars).size",
      "if (!m_document->settings()->applyPageScaleFactorInCompositor",
      "windowInfo.windowSize.scale(1 / m_document->page()->deviceScaleFactor"
    ],
    "removed_lines": [
      "windowInfo.windowSize = mainFrame->view()->visibleContentRect(includeScrollbars).size(); // FIXME: Check that this is always in logical (density-independent) pixels (see wkbug.com/87440)."
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3016,
    "id": "CVE-2011-3909",
    "commit_id": "0a897162894ccac0dcbdcdd8b510e3df71c4a4dc",
    "added_lines": [
      "BUGWK72966 WIN LINUX RELEASE : inspector/extensions/extensions-events.html = TIMEOUT"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3017,
    "id": "CVE-2011-3911",
    "commit_id": "499f6a610abcf6a057cbb8324f90a07d89f59431",
    "added_lines": [
      "if (!process_type.empty() && process_type != switches::kZygoteProcess",
      "InitCrashReporter"
    ],
    "removed_lines": [
      "if (!process_type.empty() && process_type != switches::kZygoteProcess",
      "InitCrashReporter"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3018,
    "id": "CVE-2011-3914",
    "commit_id": "9a1a5faa13f9054830f94cc0cd15d4dd5122a76f",
    "added_lines": [
      "(Var(\"googlecode_url\") % \"v8-i18n\") + \"/trunk@7\","
    ],
    "removed_lines": [
      "(Var(\"googlecode_url\") % \"v8-i18n\") + \"/trunk@4\","
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "unknown vectors",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3019,
    "id": "CVE-2011-3915",
    "commit_id": "2156ea103b778a64228413a5bf304e18b741a2f6",
    "added_lines": [
      "# We first check if a specific SDK is set to be used for the build.",
      "contains(QMAKE_MAC_SDK, \".*MacOSX10.7.sdk.*\")",
      "SYSTEM_LIBRARY_PATH = $${ROOT_WEBKIT_DIR}/WebKitLibraries/libWebKitSystemInterfaceLion.a",
      "} else:contains(QMAKE_MAC_SDK, \".*MacOSX10.8.sdk.*\")",
      "SYSTEM_LIBRARY_PATH = $${ROOT_WEBKIT_DIR}/WebKitLibraries/libWebKitSystemInterfaceMountainLion.a",
      "# If the previous check did not yield a result, we resort to the Darwin version.",
      "isEmpty(SYSTEM_LIBRARY_PATH)",
      "equals(DARWIN_MAJOR_VERSION, \"11\")",
      "SYSTEM_LIBRARY_PATH = $${ROOT_WEBKIT_DIR}/WebKitLibraries/libWebKitSystemInterfaceLion.a",
      "} else:equals(DARWIN_MAJOR_VERSION, \"12\")",
      "SYSTEM_LIBRARY_PATH = $${ROOT_WEBKIT_DIR}/WebKitLibraries/libWebKitSystemInterfaceMountainLion.a",
      "LIBS += $$SYSTEM_LIBRARY_PATH"
    ],
    "removed_lines": [
      "# We can know the Mac OS version by using the Darwin major version",
      "equals(DARWIN_MAJOR_VERSION, \"12\")",
      "LIBS += $${ROOT_WEBKIT_DIR}/WebKitLibraries/libWebKitSystemInterfaceMountainLion.a",
      "} else:equals(DARWIN_MAJOR_VERSION, \"11\")",
      "LIBS += $${ROOT_WEBKIT_DIR}/WebKitLibraries/libWebKitSystemInterfaceLion.a",
      "} else:equals(DARWIN_MAJOR_VERSION, \"10\")",
      "LIBS += $${ROOT_WEBKIT_DIR}/WebKitLibraries/libWebKitSystemInterfaceSnowLeopard.a",
      "} else:equals(DARWIN_MAJOR_VERSION, \"9\")",
      "LIBS += $${ROOT_WEBKIT_DIR}/WebKitLibraries/libWebKitSystemInterfaceLeopard.a"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3020,
    "id": "CVE-2011-3916",
    "commit_id": "7d8cefdf6d0e457b7a855c9503684f1058c2a356",
    "added_lines": [
      "WebGLObject::WebGLObject(WebGLRenderingContext*"
    ],
    "removed_lines": [
      "WebGLObject::WebGLObject(WebGLRenderingContext* context"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3028,
    "id": "CVE-2011-3900",
    "commit_id": "f69d936b6d5de4f7eae7a305fbdd7a5bf8145992",
    "added_lines": [
      "BUGWK74427 MAC : fast/borders/border-antialiasing.html = IMAGE",
      "BUGWK74881 : fast/overflow/unreachable-overflow-rtl-bug.html = IMAGE"
    ],
    "removed_lines": [
      "BUGWK74427 MAC WIN : fast/borders/border-antialiasing.html = IMAGE"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "unknown vectors",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3033,
    "id": "CVE-2011-3894",
    "commit_id": "dc4e69124b214f7f31a08ad4a2fed0e8fd75669d",
    "added_lines": [
      "\"ffmpeg_revision\": \"107500\","
    ],
    "removed_lines": [
      "\"ffmpeg_revision\": \"106016\","
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "does not properly perform VP8 decoding"
    ]
  },
  {
    "index": 3034,
    "id": "CVE-2011-3896",
    "commit_id": "5925dff83699508b5e2735afb0297dfb310e159d",
    "added_lines": [
      "'browser/ui/cocoa/fullscreen_exit_bubble_controller_unittest.mm',"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3048,
    "id": "CVE-2011-2881",
    "commit_id": "88c4913f11967abfd08a8b22b4423710322ac49b",
    "added_lines": [
      "#include \"cc/CCScopedMainThreadProxy.h\"",
      "PingPongTestUsingTasks",
      ": m_mainThreadProxy(CCScopedMainThreadProxy::create",
      "m_mainThreadProxy->postTask(createMainThreadTask(this, &PingPongTestUsingTasks::pong",
      "private:",
      "RefPtr<CCScopedMainThreadProxy> m_mainThreadProxy"
    ],
    "removed_lines": [
      "CCMainThread::postTask(createMainThreadTask(this, &PingPongTestUsingTasks::pong"
    ],
    "cause": [
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "does not properly handle Google V8 hidden objects"
    ]
  },
  {
    "index": 3049,
    "id": "CVE-2011-3873",
    "commit_id": "a452fc081f4e81befb97cc911ea2391c61d32926",
    "added_lines": [
      "#if OS(DARWIN",
      "#include <sys/mman.h>",
      "#endif"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 9.3,
    "safe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3059,
    "id": "CVE-2011-2843",
    "commit_id": "d304b5ec1b16766ea2cb552a27dc14df848d6a0e",
    "added_lines": [
      "codec_context_->extradata = reinterpret_cast<uint8_t*>",
      "av_malloc(config.extra_data_size() + FF_INPUT_BUFFER_PADDING_SIZE",
      "memset(codec_context_->extradata + config.extra_data_size(), '\\0',",
      "FF_INPUT_BUFFER_PADDING_SIZE"
    ],
    "removed_lines": [
      "codec_context_->extradata =",
      "reinterpret_cast<uint8_t*>(av_malloc(config.extra_data_size"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_ZERO",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3060,
    "id": "CVE-2011-2844",
    "commit_id": "f052f14d59c8993525bed59bc3983922cbd42819",
    "added_lines": [
      "$cmakeArgs .= ($cmakeArgs ? \" \" : \"\") . \"-DENABLE_WEBKIT=ON\"",
      "$cmakeArgs .= \" -DENABLE_WEBKIT2=ON\" if !$noWebKit2"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3065,
    "id": "CVE-2011-3234",
    "commit_id": "52dac009556881941c60d378e34867cdb2fd00a0",
    "added_lines": [
      "if (!dict",
      "return FilePath"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3066,
    "id": "CVE-2011-2850",
    "commit_id": "87c724d81f0210494211cd36814c4cb2cf4c4bd1",
    "added_lines": [
      "void OnTexturesCreated(const std::vector<int>& textures"
    ],
    "removed_lines": [
      "void OnTexturesCreated(std::vector<int> textures"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3067,
    "id": "CVE-2011-2851",
    "commit_id": "7155d7caafd2aa1fb822dc5672c90ea446247e8d",
    "added_lines": [
      "#include \"base/logging.h\"",
      "static const int kYUV12Size = kSourceYSize * 12 / 8",
      "static const int kYUV16Size = kSourceYSize * 16 / 8",
      "static const int kYUY2Size =  kSourceYSize * 16 / 8",
      "static const int kRGBSize = kSourceYSize * kBpp",
      "static const int kRGBSizeScaled = kScaledWidth * kScaledHeight * kBpp",
      "static const int kRGB24Size = kSourceYSize * 3",
      "static const int kRGBSizeConverted = kSourceYSize * kBpp",
      "static void ReadData(const FilePath::CharType* filename,",
      "int expected_size,",
      "scoped_array<uint8>* data)",
      "data->reset(new uint8[expected_size]",
      "FilePath path",
      "CHECK(PathService::Get(base::DIR_SOURCE_ROOT, &path",
      "path = path.Append(FILE_PATH_LITERAL(\"media\"",
      ".Append(FILE_PATH_LITERAL(\"test\"",
      ".Append(FILE_PATH_LITERAL(\"data\"",
      ".Append(filename",
      "int64 actual_size = 0",
      "file_util::GetFileSize(path, &actual_size",
      "CHECK_EQ(actual_size, expected_size",
      "int bytes_read = file_util::ReadFile",
      "path, reinterpret_cast<char*>(data->get()), expected_size",
      "CHECK_EQ(bytes_read, expected_size",
      "static void ReadYV12Data(scoped_array<uint8>* data)",
      "ReadData(FILE_PATH_LITERAL(\"bali_640x360_P420.yuv\"), kYUV12Size, data",
      "static void ReadYV16Data(scoped_array<uint8>* data)",
      "ReadData(FILE_PATH_LITERAL(\"bali_640x360_P422.yuv\"), kYUV16Size, data",
      "static void ReadRGB24Data(scoped_array<uint8>* data)",
      "ReadData(FILE_PATH_LITERAL(\"bali_640x360_RGB24.rgb\"), kRGB24Size, data",
      "static void ReadYUY2Data(scoped_array<uint8>* data)",
      "ReadData(FILE_PATH_LITERAL(\"bali_640x360_YUY2.yuv\"), kYUY2Size, data",
      "scoped_array<uint8> yuv_bytes",
      "ReadYV12Data(&yuv_bytes",
      "scoped_array<uint8> yuv_bytes",
      "ReadYV16Data(&yuv_bytes",
      "struct YUVScaleTestData",
      "YUVScaleTestData(media::YUVType y, media::ScaleFilter s, uint32 r",
      ": yuv_type(y),",
      "scale_filter(s),",
      "rgb_hash(r)",
      "media::YUVType yuv_type",
      "media::ScaleFilter scale_filter",
      "uint32 rgb_hash",
      "class YUVScaleTest : public ::testing::TestWithParam<YUVScaleTestData>",
      "public:",
      "YUVScaleTest()",
      "switch (GetParam().yuv_type)",
      "case media::YV12:",
      "ReadYV12Data(&yuv_bytes_",
      "break",
      "case media::YV16:",
      "ReadYV16Data(&yuv_bytes_",
      "break",
      "rgb_bytes_.reset(new uint8[kRGBSizeScaled]",
      "uint8* y_plane() { return yuv_bytes_.get();",
      "uint8* u_plane() { return yuv_bytes_.get() + kSourceYSize;",
      "uint8* v_plane()",
      "switch (GetParam().yuv_type)",
      "case media::YV12:",
      "return yuv_bytes_.get() + kSourceYSize * 5 / 4",
      "case media::YV16:",
      "return yuv_bytes_.get() + kSourceYSize * 3 / 2",
      "return NULL",
      "scoped_array<uint8> yuv_bytes_",
      "scoped_array<uint8> rgb_bytes_",
      "TEST_P(YUVScaleTest, Normal)",
      "media::ScaleYUVToRGB32(y_plane(),                    // Y",
      "u_plane(),                    // U",
      "v_plane(),                    // V",
      "rgb_bytes_.get(),             // RGB output",
      "kSourceWidth, kSourceHeight,  // Dimensions",
      "kScaledWidth, kScaledHeight,  // Dimensions",
      "kSourceWidth,                 // YStride",
      "kSourceWidth / 2,             // UvStride",
      "kScaledWidth * kBpp,          // RgbStride",
      "GetParam().yuv_type,",
      "GetParam().scale_filter",
      "uint32 rgb_hash = DJB2Hash(rgb_bytes_.get(), kRGBSizeScaled, kDJB2HashSeed",
      "EXPECT_EQ(GetParam().rgb_hash, rgb_hash",
      "TEST_P(YUVScaleTest, ZeroSourceSize)",
      "media::ScaleYUVToRGB32(y_plane(),                    // Y",
      "u_plane(),                    // U",
      "v_plane(),                    // V",
      "rgb_bytes_.get(),             // RGB output",
      "0, 0,                         // Dimensions",
      "kScaledWidth, kScaledHeight,  // Dimensions",
      "kSourceWidth,                 // YStride",
      "kSourceWidth / 2,             // UvStride",
      "kScaledWidth * kBpp,          // RgbStride",
      "GetParam().yuv_type,",
      "GetParam().scale_filter",
      "TEST_P(YUVScaleTest, ZeroDestinationSize)",
      "media::ScaleYUVToRGB32(y_plane(),                    // Y",
      "u_plane(),                    // U",
      "v_plane(),                    // V",
      "rgb_bytes_.get(),             // RGB output",
      "kSourceWidth, kSourceHeight,  // Dimensions",
      "0, 0,                         // Dimensions",
      "kSourceWidth,                 // YStride",
      "kSourceWidth / 2,             // UvStride",
      "kScaledWidth * kBpp,          // RgbStride",
      "GetParam().yuv_type,",
      "GetParam().scale_filter",
      "INSTANTIATE_TEST_CASE_P",
      "YUVScaleFormats, YUVScaleTest,",
      "::testing::Values",
      "YUVScaleTestData(media::YV12, media::FILTER_NONE, 4259656254u),",
      "YUVScaleTestData(media::YV16, media::FILTER_NONE, 974965419u),",
      "YUVScaleTestData(media::YV12, media::FILTER_BILINEAR, 2086305576u),",
      "YUVScaleTestData(media::YV16, media::FILTER_BILINEAR, 3857179240u",
      "scoped_array<uint8> rgb_bytes",
      "ReadRGB24Data(&rgb_bytes",
      "scoped_array<uint8> yuy_bytes",
      "ReadYUY2Data(&yuy_bytes"
    ],
    "removed_lines": [
      "static const size_t kYUV12Size = kSourceYSize * 12 / 8",
      "static const size_t kYUV16Size = kSourceYSize * 16 / 8",
      "static const size_t kYUY2Size =  kSourceYSize * 16 / 8",
      "static const size_t kRGBSize = kSourceYSize * kBpp",
      "static const size_t kRGB24Size = kSourceYSize * 3",
      "static const size_t kRGBSizeConverted = kSourceYSize * kBpp",
      "scoped_array<uint8> yuv_bytes(new uint8[kYUV12Size]",
      "FilePath yuv_url",
      "EXPECT_TRUE(PathService::Get(base::DIR_SOURCE_ROOT, &yuv_url",
      "yuv_url = yuv_url.Append(FILE_PATH_LITERAL(\"media\"",
      ".Append(FILE_PATH_LITERAL(\"test\"",
      ".Append(FILE_PATH_LITERAL(\"data\"",
      ".Append(FILE_PATH_LITERAL(\"bali_640x360_P420.yuv\"",
      "EXPECT_EQ(static_cast<int>(kYUV12Size),",
      "file_util::ReadFile(yuv_url,",
      "reinterpret_cast<char*>(yuv_bytes.get()),",
      "static_cast<int>(kYUV12Size",
      "scoped_array<uint8> yuv_bytes(new uint8[kYUV16Size]",
      "FilePath yuv_url",
      "EXPECT_TRUE(PathService::Get(base::DIR_SOURCE_ROOT, &yuv_url",
      "yuv_url = yuv_url.Append(FILE_PATH_LITERAL(\"media\"",
      ".Append(FILE_PATH_LITERAL(\"test\"",
      ".Append(FILE_PATH_LITERAL(\"data\"",
      ".Append(FILE_PATH_LITERAL(\"bali_640x360_P422.yuv\"",
      "EXPECT_EQ(static_cast<int>(kYUV16Size),",
      "file_util::ReadFile(yuv_url,",
      "reinterpret_cast<char*>(yuv_bytes.get()),",
      "static_cast<int>(kYUV16Size",
      "TEST(YUVScaleTest, YV12)",
      "FilePath yuv_url",
      "EXPECT_TRUE(PathService::Get(base::DIR_SOURCE_ROOT, &yuv_url",
      "yuv_url = yuv_url.Append(FILE_PATH_LITERAL(\"media\"",
      ".Append(FILE_PATH_LITERAL(\"test\"",
      ".Append(FILE_PATH_LITERAL(\"data\"",
      ".Append(FILE_PATH_LITERAL(\"bali_640x360_P420.yuv\"",
      "const size_t size_of_yuv = kSourceYSize * 12 / 8;  // 12 bpp.",
      "scoped_array<uint8> yuv_bytes(new uint8[size_of_yuv]",
      "EXPECT_EQ(static_cast<int>(size_of_yuv),",
      "file_util::ReadFile(yuv_url,",
      "reinterpret_cast<char*>(yuv_bytes.get()),",
      "static_cast<int>(size_of_yuv",
      "const size_t size_of_rgb_scaled = kScaledWidth * kScaledHeight * kBpp",
      "scoped_array<uint8> rgb_source_bytes(new uint8[size_of_rgb_scaled]",
      "media::ScaleYUVToRGB32(yuv_bytes.get(),                          // Y",
      "yuv_bytes.get() + kSourceYSize,           // U",
      "yuv_bytes.get() + kSourceYSize * 5 / 4,   // V",
      "rgb_source_bytes.get(),                   // Rgb output",
      "kSourceWidth, kSourceHeight,              // Dimensions",
      "kScaledWidth, kScaledHeight,              // Dimensions",
      "kSourceWidth,                             // YStride",
      "kSourceWidth / 2,                         // UvStride",
      "kScaledWidth * kBpp,                      // RgbStride",
      "media::YV12,",
      "media::FILTER_NONE",
      "uint32 rgb_hash = DJB2Hash(rgb_source_bytes.get(), size_of_rgb_scaled,",
      "kDJB2HashSeed",
      "EXPECT_EQ(4259656254u, rgb_hash",
      "TEST(YUVFilterScaleTest, YV12)",
      "FilePath yuv_url",
      "EXPECT_TRUE(PathService::Get(base::DIR_SOURCE_ROOT, &yuv_url",
      "yuv_url = yuv_url.Append(FILE_PATH_LITERAL(\"media\"",
      ".Append(FILE_PATH_LITERAL(\"test\"",
      ".Append(FILE_PATH_LITERAL(\"data\"",
      ".Append(FILE_PATH_LITERAL(\"bali_640x360_P420.yuv\"",
      "const size_t size_of_yuv = kSourceYSize * 12 / 8;  // 12 bpp.",
      "scoped_array<uint8> yuv_bytes(new uint8[size_of_yuv]",
      "EXPECT_EQ(static_cast<int>(size_of_yuv),",
      "file_util::ReadFile(yuv_url,",
      "reinterpret_cast<char*>(yuv_bytes.get()),",
      "static_cast<int>(size_of_yuv",
      "const size_t size_of_rgb_scaled = kScaledWidth * kScaledHeight * kBpp",
      "scoped_array<uint8> rgb_source_bytes(new uint8[size_of_rgb_scaled]",
      "media::ScaleYUVToRGB32(yuv_bytes.get(),                        // Y",
      "yuv_bytes.get() + kSourceYSize,         // U",
      "yuv_bytes.get() + kSourceYSize * 5 / 4, // V",
      "rgb_source_bytes.get(),                 // Rgb output",
      "kSourceWidth, kSourceHeight,            // Dimensions",
      "kScaledWidth, kScaledHeight,            // Dimensions",
      "kSourceWidth,                           // YStride",
      "kSourceWidth / 2,                       // UvStride",
      "kScaledWidth * kBpp,                    // RgbStride",
      "media::YV12,",
      "media::FILTER_BILINEAR",
      "uint32 rgb_hash = DJB2Hash(rgb_source_bytes.get(), size_of_rgb_scaled,",
      "kDJB2HashSeed",
      "EXPECT_EQ(2086305576u, rgb_hash",
      "TEST(YUVScaleTest, YV16)",
      "FilePath yuv_url",
      "EXPECT_TRUE(PathService::Get(base::DIR_SOURCE_ROOT, &yuv_url",
      "yuv_url = yuv_url.Append(FILE_PATH_LITERAL(\"media\"",
      ".Append(FILE_PATH_LITERAL(\"test\"",
      ".Append(FILE_PATH_LITERAL(\"data\"",
      ".Append(FILE_PATH_LITERAL(\"bali_640x360_P422.yuv\"",
      "const size_t size_of_yuv = kSourceYSize * 16 / 8;  // 16 bpp.",
      "scoped_array<uint8> yuv_bytes(new uint8[size_of_yuv]",
      "EXPECT_EQ(static_cast<int>(size_of_yuv),",
      "file_util::ReadFile(yuv_url,",
      "reinterpret_cast<char*>(yuv_bytes.get()),",
      "static_cast<int>(size_of_yuv",
      "const size_t size_of_rgb_scaled = kScaledWidth * kScaledHeight * kBpp",
      "scoped_array<uint8> rgb_source_bytes(new uint8[size_of_rgb_scaled]",
      "media::ScaleYUVToRGB32(yuv_bytes.get(),                        // Y",
      "yuv_bytes.get() + kSourceYSize,         // U",
      "yuv_bytes.get() + kSourceYSize * 3 / 2, // V",
      "rgb_source_bytes.get(),                 // Rgb output",
      "kSourceWidth, kSourceHeight,            // Dimensions",
      "kScaledWidth, kScaledHeight,            // Dimensions",
      "kSourceWidth,                           // YStride",
      "kSourceWidth / 2,                       // UvStride",
      "kScaledWidth * kBpp,                    // RgbStride",
      "media::YV16,",
      "media::FILTER_NONE",
      "uint32 rgb_hash = DJB2Hash(rgb_source_bytes.get(), size_of_rgb_scaled,",
      "kDJB2HashSeed",
      "EXPECT_EQ(974965419u, rgb_hash",
      "TEST(YUVFilterScaleTest, YV16)",
      "FilePath yuv_url",
      "EXPECT_TRUE(PathService::Get(base::DIR_SOURCE_ROOT, &yuv_url",
      "yuv_url = yuv_url.Append(FILE_PATH_LITERAL(\"media\"",
      ".Append(FILE_PATH_LITERAL(\"test\"",
      ".Append(FILE_PATH_LITERAL(\"data\"",
      ".Append(FILE_PATH_LITERAL(\"bali_640x360_P422.yuv\"",
      "const size_t size_of_yuv = kSourceYSize * 16 / 8;  // 16 bpp.",
      "scoped_array<uint8> yuv_bytes(new uint8[size_of_yuv]",
      "EXPECT_EQ(static_cast<int>(size_of_yuv),",
      "file_util::ReadFile(yuv_url,",
      "reinterpret_cast<char*>(yuv_bytes.get()),",
      "static_cast<int>(size_of_yuv",
      "const size_t size_of_rgb_scaled = kScaledWidth * kScaledHeight * kBpp",
      "scoped_array<uint8> rgb_source_bytes(new uint8[size_of_rgb_scaled]",
      "media::ScaleYUVToRGB32(yuv_bytes.get(),                        // Y",
      "yuv_bytes.get() + kSourceYSize,         // U",
      "yuv_bytes.get() + kSourceYSize * 3 / 2, // V",
      "rgb_source_bytes.get(),                 // Rgb output",
      "kSourceWidth, kSourceHeight,            // Dimensions",
      "kScaledWidth, kScaledHeight,            // Dimensions",
      "kSourceWidth,                           // YStride",
      "kSourceWidth / 2,                       // UvStride",
      "kScaledWidth * kBpp,                    // RgbStride",
      "media::YV16,",
      "media::ROTATE_0,",
      "media::FILTER_BILINEAR",
      "uint32 rgb_hash = DJB2Hash(rgb_source_bytes.get(), size_of_rgb_scaled,",
      "kDJB2HashSeed",
      "EXPECT_EQ(3857179240u, rgb_hash",
      "scoped_array<uint8> rgb_bytes(new uint8[kRGB24Size]",
      "FilePath rgb_url",
      "EXPECT_TRUE(PathService::Get(base::DIR_SOURCE_ROOT, &rgb_url",
      "rgb_url = rgb_url.Append(FILE_PATH_LITERAL(\"media\"",
      ".Append(FILE_PATH_LITERAL(\"test\"",
      ".Append(FILE_PATH_LITERAL(\"data\"",
      ".Append(FILE_PATH_LITERAL(\"bali_640x360_RGB24.rgb\"",
      "EXPECT_EQ(static_cast<int>(kRGB24Size),",
      "file_util::ReadFile(rgb_url,",
      "reinterpret_cast<char*>(rgb_bytes.get()),",
      "static_cast<int>(kRGB24Size",
      "scoped_array<uint8> yuy_bytes(new uint8[kYUY2Size]",
      "FilePath yuy_url",
      "EXPECT_TRUE(PathService::Get(base::DIR_SOURCE_ROOT, &yuy_url",
      "yuy_url = yuy_url.Append(FILE_PATH_LITERAL(\"media\"",
      ".Append(FILE_PATH_LITERAL(\"test\"",
      ".Append(FILE_PATH_LITERAL(\"data\"",
      ".Append(FILE_PATH_LITERAL(\"bali_640x360_YUY2.yuv\"",
      "EXPECT_EQ(static_cast<int>(kYUY2Size),",
      "file_util::ReadFile(yuy_url,",
      "reinterpret_cast<char*>(yuy_bytes.get()),",
      "static_cast<int>(kYUY2Size"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "RETURN",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3080,
    "id": "CVE-2011-2864",
    "commit_id": "5b65968b6c64fa02e74ca6b965bf5998b911e826",
    "added_lines": [
      "return true"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3081,
    "id": "CVE-2011-2858",
    "commit_id": "c13e1da62b5f5f0e6fe8c1f769a5a28415415244",
    "added_lines": [
      "void AddExpectationsForSimulatedAttrib0WithError",
      "GLsizei num_vertices, GLuint buffer_id, GLenum error)",
      "if (gfx::GetGLImplementation() == gfx::kGLImplementationEGLGLES2)",
      "return",
      "EXPECT_CALL(*gl_, GetError",
      ".WillOnce(Return(GL_NO_ERROR",
      ".WillOnce(Return(error",
      ".RetiresOnSaturation",
      "if (error == GL_NO_ERROR)",
      "EXPECT_CALL(*gl_, BufferSubData",
      "GL_ARRAY_BUFFER, 0, num_vertices * sizeof(GLfloat) * 4, _",
      ".Times(1",
      ".RetiresOnSaturation",
      "EXPECT_CALL(*gl_, VertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, NULL",
      ".Times(1",
      ".RetiresOnSaturation",
      "EXPECT_CALL(*gl_, BindBuffer(GL_ARRAY_BUFFER, 0",
      ".Times(1",
      ".RetiresOnSaturation",
      "EXPECT_CALL(*gl_, VertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, NULL",
      ".Times(1",
      ".RetiresOnSaturation",
      "EXPECT_CALL(*gl_, BindBuffer(GL_ARRAY_BUFFER, buffer_id",
      ".Times(1",
      ".RetiresOnSaturation",
      "void AddExpectationsForSimulatedAttrib0",
      "GLsizei num_vertices, GLuint buffer_id)",
      "AddExpectationsForSimulatedAttrib0WithError",
      "num_vertices, buffer_id, GL_NO_ERROR",
      "TEST_F(GLES2DecoderWithShaderTest, DrawArraysSimulatedAttrib0OverflowFails)",
      "const GLsizei kLargeCount = 0x40000000",
      "SetupTexture",
      "EXPECT_CALL(*gl_, DrawArrays(_, _, _",
      ".Times(0",
      ".RetiresOnSaturation",
      "DrawArrays cmd",
      "cmd.Init(GL_TRIANGLES, 0, kLargeCount",
      "EXPECT_EQ(error::kNoError, ExecuteCmd(cmd",
      "EXPECT_EQ(GL_OUT_OF_MEMORY, GetGLError",
      "TEST_F(GLES2DecoderWithShaderTest, DrawArraysSimulatedAttrib0PosToNegFails)",
      "const GLsizei kLargeCount = 0x7FFFFFFF",
      "SetupTexture",
      "EXPECT_CALL(*gl_, DrawArrays(_, _, _",
      ".Times(0",
      ".RetiresOnSaturation",
      "DrawArrays cmd",
      "cmd.Init(GL_TRIANGLES, 0, kLargeCount",
      "EXPECT_EQ(error::kNoError, ExecuteCmd(cmd",
      "EXPECT_EQ(GL_OUT_OF_MEMORY, GetGLError",
      "TEST_F(GLES2DecoderWithShaderTest, DrawArraysSimulatedAttrib0OOMFails)",
      "const GLsizei kFakeLargeCount = 0x1234",
      "SetupTexture",
      "AddExpectationsForSimulatedAttrib0WithError",
      "kFakeLargeCount, 0, GL_OUT_OF_MEMORY",
      "EXPECT_CALL(*gl_, DrawArrays(_, _, _",
      ".Times(0",
      ".RetiresOnSaturation",
      "DrawArrays cmd",
      "cmd.Init(GL_TRIANGLES, 0, kFakeLargeCount",
      "EXPECT_EQ(error::kNoError, ExecuteCmd(cmd",
      "EXPECT_EQ(GL_OUT_OF_MEMORY, GetGLError"
    ],
    "removed_lines": [
      "void AddExpectationsForSimulatedAttrib0",
      "GLsizei num_vertices, GLuint buffer_id)",
      "EXPECT_CALL(*gl_, BufferSubData",
      "GL_ARRAY_BUFFER, 0, num_vertices * sizeof(GLfloat) * 4, _",
      ".Times(1",
      ".RetiresOnSaturation",
      "EXPECT_CALL(*gl_, VertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, NULL",
      ".Times(1",
      ".RetiresOnSaturation",
      "EXPECT_CALL(*gl_, BindBuffer(GL_ARRAY_BUFFER, 0",
      ".Times(1",
      ".RetiresOnSaturation",
      "EXPECT_CALL(*gl_, VertexAttribPointer(0, 4, GL_FLOAT, GL_FALSE, 0, NULL",
      ".Times(1",
      ".RetiresOnSaturation",
      "EXPECT_CALL(*gl_, BindBuffer(GL_ARRAY_BUFFER, buffer_id",
      ".Times(1",
      ".RetiresOnSaturation"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3089,
    "id": "CVE-2011-2806",
    "commit_id": "01e4ee2fda0a5e57a8d0c8cb829022eb84fdff12",
    "added_lines": [
      "if (!renderLayer->renderer()->isOutOfFlowPositioned() || renderLayer->renderer()->style()->position() != FixedPosition"
    ],
    "removed_lines": [
      "if (!renderLayer->renderer()->isPositioned() || renderLayer->renderer()->style()->position() != FixedPosition"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 10.0,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3091,
    "id": "CVE-2011-2828",
    "commit_id": "abbd2f4b36da8c89e6f3002eb84f60064a6ff067",
    "added_lines": [
      "<include name=\"IDR_DEFAULT_LARGE_FAVICON\" file=\"default_large_favicon.png\" type=\"BINDATA\" />"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "unknown vectors",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3092,
    "id": "CVE-2011-2829",
    "commit_id": "a4b20ed4917f1f6fc83b6375a48e2c3895d43a8a",
    "added_lines": [
      "'variables':",
      "'chromium_code': 1,",
      "},"
    ],
    "removed_lines": [
      "'sources/': [",
      "['exclude', '/(cocoa|gtk|win)/'],",
      "['exclude', '_(cocoa|gtk|linux|mac|posix|win|x)\\\\.(cc|mm?)$'],",
      "['exclude', '/(gtk|win|x11)_[^/]*\\\\.cc$'],",
      "],",
      "'sources/': [",
      "['include', '/gtk/'],",
      "['include', '_(gtk|linux|posix|skia|x)\\\\.cc$'],",
      "['include', '/(gtk|x11)_[^/]*\\\\.cc$'],",
      "],",
      "['OS==\"mac\"', {'sources/': [",
      "['include', '/cocoa/'],",
      "['include', '_(cocoa|mac|posix)\\\\.(cc|mm?)$'],",
      "]}, { # else: OS != \"mac\"",
      "'sources/': [",
      "['exclude', '\\\\.mm?$'],",
      "],",
      "}],",
      "['OS==\"win\"',",
      "{'sources/': [",
      "['include', '_(win)\\\\.cc$'],",
      "['include', '/win/'],",
      "['include', '/win_[^/]*\\\\.cc$'],",
      "]}],"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3103,
    "id": "CVE-2011-2788",
    "commit_id": "b353e6983bdf9bd935b97bb5a7f225f246089fba",
    "added_lines": [
      "#ifndef BASE_I18N_CASE_CONVERSION_H_",
      "#define BASE_I18N_CASE_CONVERSION_H_",
      "#endif  // BASE_I18N_CASE_CONVERSION_H_"
    ],
    "removed_lines": [
      "#ifndef BASE_I18N_CASE_CONVERSION_",
      "#define BASE_I18N_CASE_CONVERSION_",
      "#include <string>",
      "#endif  // BASE_I18N_CASE_CONVERSION_"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "unknown vectors",
      "buffer overflow"
    ]
  },
  {
    "index": 3106,
    "id": "CVE-2011-2791",
    "commit_id": "38fd88d538558ad46e9f8ace1e8eeeed48c1548f",
    "added_lines": [
      "\"/trunk/deps/third_party/icu46@90787\","
    ],
    "removed_lines": [
      "\"/trunk/deps/third_party/icu46@88321\","
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "unknown vectors",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3109,
    "id": "CVE-2011-2794",
    "commit_id": "3057be01bcbbd1d0938afb489e18f2ca6d9b8229",
    "added_lines": [],
    "removed_lines": [
      "Platform::IntPoint calculateMinimumScrollPosition(const Platform::IntSize& viewportSize, float overscrollLimitFactor) const",
      "Platform::IntPoint calculateMaximumScrollPosition(const Platform::IntSize& viewportSize, const Platform::IntSize& contentsSize, float overscrollLimitFactor) const"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3117,
    "id": "CVE-2011-2803",
    "commit_id": "48f2ec5c24570c9b96bb2798a9ffe956117c5066",
    "added_lines": [
      "#include \"base/compiler_specific.h\"",
      "int count) OVERRIDE",
      "int count) OVERRIDE",
      "virtual void TreeNodeChanged(ui::TreeModel* model,",
      "ui::TreeModelNode* node) OVERRIDE"
    ],
    "removed_lines": [
      "int count",
      "int count",
      "virtual void TreeNodeChanged(ui::TreeModel* model, ui::TreeModelNode* node"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3123,
    "id": "CVE-2011-2345",
    "commit_id": "bf04ad0dae9f4f479f90fd2b38f634ffbaf434b4",
    "added_lines": [
      "char* c_string = static_cast<char*>(malloc(value.size",
      "memcpy(c_string, value.data(), value.size",
      "STRINGN_TO_NPVARIANT(c_string, value.size(), *result"
    ],
    "removed_lines": [
      "STRINGN_TO_NPVARIANT(base::strdup(value.c_str()), value.size(), *result"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 4",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_COPY",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "does not properly handle strings",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3125,
    "id": "CVE-2011-2347",
    "commit_id": "60cc89e8d2e761dea28bb9e4cf9ebbad516bff09",
    "added_lines": [
      "#include \"base/callback_old.h\""
    ],
    "removed_lines": [
      "#include \"base/callback.h\""
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown vectors"
    ]
  },
  {
    "index": 3139,
    "id": "CVE-2011-1800",
    "commit_id": "1777aa6484af15014b8691082a8c3075418786f5",
    "added_lines": [
      "m_nonCompositedContentLayer->setContentsOpaque(m_webPage->drawsBackground() && !m_webPage->drawsTransparentBackground"
    ],
    "removed_lines": [
      "m_nonCompositedContentLayer->setContentsOpaque(m_webPage->drawsBackground() && !m_webPage->drawsTransparentBackground"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown vectors",
      "integer overflow"
    ]
  },
  {
    "index": 3142,
    "id": "CVE-2011-1291",
    "commit_id": "0934e35f418895925345d059490e27d643db1133",
    "added_lines": [
      "const size_t length_with_null = 4",
      "char16 buf_with_null[length_with_null] = { 0, 'a', 0, 'b'",
      "string16 string16_with_null(buf_with_null, length_with_null",
      "string16 upper_with_null = l10n_util::ToUpper(string16_with_null",
      "ASSERT_EQ(length_with_null, upper_with_null.size",
      "EXPECT_TRUE(upper_with_null[0] == 0 && upper_with_null[1] == 'A' &&",
      "upper_with_null[2] == 0 && upper_with_null[3] == 'B'",
      "string16 lower_with_null = l10n_util::ToLower(upper_with_null",
      "ASSERT_EQ(length_with_null, upper_with_null.size",
      "EXPECT_TRUE(lower_with_null[0] == 0 && lower_with_null[1] == 'a' &&",
      "lower_with_null[2] == 0 && lower_with_null[3] == 'b'"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "INDEX_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown vectors"
    ]
  },
  {
    "index": 3191,
    "id": "CVE-2012-5143",
    "commit_id": "ad103a1564365c95f4ee4f10261f9604f91f686a",
    "added_lines": [
      "if (static_cast<int64>(width) * static_cast<int64>(height) >=",
      "std::numeric_limits<int32>::max() / 4"
    ],
    "removed_lines": [
      "if (static_cast<int64>(width) * static_cast<int64>(height) * 4 >=",
      "std::numeric_limits<int32>::max"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 10.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3192,
    "id": "CVE-2012-5144",
    "commit_id": "5defd420a613f2e4769f4c1a38786f4cecdcf173",
    "added_lines": [
      "BLINK_PLATFORM_EXPORT WebMediaStreamSource owner",
      "#if INSIDE_BLINK",
      "BLINK_PLATFORM_EXPORT void setOwner(WebCore::MediaStreamSource*",
      "BLINK_PLATFORM_EXPORT void assign(const WebMediaStreamSource&",
      "BLINK_PLATFORM_EXPORT void initialize(const WebString& id, Type, const WebString& name",
      "BLINK_PLATFORM_EXPORT void reset",
      "BLINK_PLATFORM_EXPORT WebString id() const",
      "BLINK_PLATFORM_EXPORT Type type() const",
      "BLINK_PLATFORM_EXPORT WebString name() const",
      "BLINK_PLATFORM_EXPORT void setReadyState(ReadyState",
      "BLINK_PLATFORM_EXPORT ReadyState readyState() const",
      "BLINK_PLATFORM_EXPORT ExtraData* extraData() const",
      "BLINK_PLATFORM_EXPORT void setExtraData(ExtraData*",
      "BLINK_PLATFORM_EXPORT WebMediaConstraints constraints",
      "BLINK_PLATFORM_EXPORT WebString deviceId() const",
      "BLINK_PLATFORM_EXPORT void setDeviceId(const WebString&",
      "BLINK_PLATFORM_EXPORT bool requiresAudioConsumer() const",
      "BLINK_PLATFORM_EXPORT void addAudioConsumer(WebAudioDestinationConsumer*",
      "BLINK_PLATFORM_EXPORT bool removeAudioConsumer(WebAudioDestinationConsumer*",
      "#if INSIDE_BLINK",
      "BLINK_PLATFORM_EXPORT WebMediaStreamSource(const WTF::PassRefPtr<WebCore::MediaStreamSource>&",
      "BLINK_PLATFORM_EXPORT WebMediaStreamSource& operator=(WebCore::MediaStreamSource*",
      "BLINK_PLATFORM_EXPORT operator WTF::PassRefPtr<WebCore::MediaStreamSource>() const",
      "BLINK_PLATFORM_EXPORT operator WebCore::MediaStreamSource*() const"
    ],
    "removed_lines": [
      "BLINK_EXPORT WebMediaStreamSource owner",
      "#if BLINK_IMPLEMENTATION",
      "void setOwner(WebCore::MediaStreamSource*",
      "BLINK_EXPORT void assign(const WebMediaStreamSource&",
      "BLINK_EXPORT void initialize(const WebString& id, Type, const WebString& name",
      "BLINK_EXPORT void reset",
      "BLINK_EXPORT WebString id() const",
      "BLINK_EXPORT Type type() const",
      "BLINK_EXPORT WebString name() const",
      "BLINK_EXPORT void setReadyState(ReadyState",
      "BLINK_EXPORT ReadyState readyState() const",
      "BLINK_EXPORT ExtraData* extraData() const",
      "BLINK_EXPORT void setExtraData(ExtraData*",
      "BLINK_EXPORT WebMediaConstraints constraints",
      "BLINK_EXPORT WebString deviceId() const",
      "BLINK_EXPORT void setDeviceId(const WebString&",
      "BLINK_EXPORT bool requiresAudioConsumer() const",
      "BLINK_EXPORT void addAudioConsumer(WebAudioDestinationConsumer*",
      "BLINK_EXPORT bool removeAudioConsumer(WebAudioDestinationConsumer*",
      "#if BLINK_IMPLEMENTATION",
      "WebMediaStreamSource(const WTF::PassRefPtr<WebCore::MediaStreamSource>&",
      "WebMediaStreamSource& operator=(WebCore::MediaStreamSource*",
      "operator WTF::PassRefPtr<WebCore::MediaStreamSource>() const",
      "operator WebCore::MediaStreamSource*() const"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 10.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "off-by-one"
    ]
  },
  {
    "index": 3201,
    "id": "CVE-2012-5134",
    "commit_id": "6e487b9db2ff0324523a040180f8da42796aeef5",
    "added_lines": [
      "while ((len > 0) && (buf[len - 1] == 0x20)) len--"
    ],
    "removed_lines": [
      "while (buf[len - 1] == 0x20) len--"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "Heap-based buffer underflow",
      "buffer underflow"
    ]
  },
  {
    "index": 3209,
    "id": "CVE-2012-2897",
    "commit_id": "67f961d089584f227866808cb7428c111a174210",
    "added_lines": [
      "(Var(\"googlecode_url\") % \"ots\") + \"/trunk@95\","
    ],
    "removed_lines": [
      "(Var(\"googlecode_url\") % \"ots\") + \"/trunk@94\","
    ],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "ExecCode ",
    "score": 10.0,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "Font Parsing Vulnerability"
    ]
  },
  {
    "index": 3212,
    "id": "CVE-2012-2881",
    "commit_id": "ac0a7cb3b0da035c2c2ca21abf2c5f899ec32735",
    "added_lines": [
      "DISABLED_TestSettingsFramePasswords)"
    ],
    "removed_lines": [
      "#if defined(OS_WIN",
      "#define MAYBE_TestSettingsFramePasswords DISABLED_TestSettingsFramePasswords",
      "#else",
      "#define MAYBE_TestSettingsFramePasswords TestSettingsFramePasswords",
      "#endif",
      "MAYBE_TestSettingsFramePasswords)"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown vectors"
    ]
  },
  {
    "index": 3213,
    "id": "CVE-2012-2876",
    "commit_id": "2511466dd15750f2ab0e5cecc30010f0a3f7949c",
    "added_lines": [
      "ui_test_utils::SimulateMouseClick(browser()->GetSelectedWebContents"
    ],
    "removed_lines": [
      "ui_test_utils::SimulateMouseClick",
      "browser()->GetSelectedWebContents(), 150, 250"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown vectors",
      "buffer overflow"
    ]
  },
  {
    "index": 3214,
    "id": "CVE-2012-2883",
    "commit_id": "f7b020b3d36def118881daa4402c44ca72271482",
    "added_lines": [
      "virtual int valueForARIAValueNow() const OVERRIDE FINAL"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3218,
    "id": "CVE-2012-2896",
    "commit_id": "3aad1a37affb1ab70d1897f2b03eb8c077264984",
    "added_lines": [
      "int32 right",
      "int32 top",
      "return SafeAddInt32(xoffset, width, &right) &&",
      "SafeAddInt32(yoffset, height, &top) &&"
    ],
    "removed_lines": [
      "GLint right",
      "GLint top",
      "return SafeAdd(xoffset, width, &right) &&",
      "SafeAdd(yoffset, height, &top) &&"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "INDEX_OP",
      "RETURN",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "INDEX_OP",
      "RETURN",
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown vectors",
      "integer overflow"
    ]
  },
  {
    "index": 3220,
    "id": "CVE-2012-2879",
    "commit_id": "1b01d348e86cb6c3517b7e5b593f2f0ad4b2a57b",
    "added_lines": [
      "webkit.org/b/106419 [ Debug ] dom/html/level2/html/HTMLDocument11.html [ Crash Failure ]",
      "webkit.org/b/106419 [ Debug ] dom/html/level2/html/HTMLDocument01.html [ Crash Failure ]",
      "webkit.org/b/106419 [ Debug ] dom/html/level2/html/HTMLBodyElement09.html [ Crash Failure ]"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 3221,
    "id": "CVE-2012-2884",
    "commit_id": "2bc34f038d1eb149e75c932061a475dbdb369564",
    "added_lines": [
      "{ \"7add320b\", \"470a3da3\", \"\", \"\", \"\", kUninstallLink },"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3222,
    "id": "CVE-2012-2874",
    "commit_id": "76a3314ac3b711e01fae3b76a5d85f0eddeeec0b",
    "added_lines": [
      "protector_service->ShowChange(change.release",
      "protector_service->ShowChange(change.release"
    ],
    "removed_lines": [
      "if (protector::IsEnabled",
      "protector_service->ShowChange(change.release",
      "if (protector::IsEnabled())",
      "protector_service->ShowChange(change.release",
      "} else",
      "SessionStartupPref::SetStartupPref(profile, new_pref",
      "PinnedTabCodec::WritePinnedTabs(profile, new_tabs"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3247,
    "id": "CVE-2012-2895",
    "commit_id": "baef1ffd73db183ca50c854e1779ed7f6e5100a8",
    "added_lines": [],
    "removed_lines": [
      "const char kSymLinkToDevNull[] = \"/dev/null\"",
      "bool DeleteSymlink(const FilePath& file_path"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3248,
    "id": "CVE-2012-2895",
    "commit_id": "16dcd30c215801941d9890859fd79a234128fc3e",
    "added_lines": [
      "MOCK_METHOD2(CompleteDownload, void(content::DownloadId,",
      "const base::Closure&",
      "MOCK_METHOD4(RenameDownloadFile, void(content::DownloadId,",
      "const FilePath&,",
      "bool,",
      "const RenameCompletionCallback&"
    ],
    "removed_lines": [
      "MOCK_METHOD1(CompleteDownload, void(content::DownloadId",
      "MOCK_METHOD4(RenameInProgressDownloadFile,",
      "void(content::DownloadId,",
      "const FilePath&,",
      "bool,",
      "const RenameCompletionCallback&",
      "MOCK_METHOD4(RenameCompletingDownloadFile,",
      "void(content::DownloadId,",
      "const FilePath&,",
      "bool,",
      "const RenameCompletionCallback&"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3249,
    "id": "CVE-2012-2895",
    "commit_id": "3475f5e448ddf5e48888f3d0563245cc46e3c98b",
    "added_lines": [
      "if (launcher_ && launcher_->IsShowingOverflowBubble",
      "return AUTO_HIDE_SHOWN"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3258,
    "id": "CVE-2012-2865",
    "commit_id": "e01b90a445d0de6a0b9b802d4acee10c6537d26a",
    "added_lines": [
      "var iframe = document.querySelector(query",
      "if (iframe)",
      "var container = iframe.parentNode",
      "container.title = title",
      "if (container == getSelectedIframe",
      "document.title = title"
    ],
    "removed_lines": [
      "var container = document.querySelector(query).parentNode",
      "container.title = title",
      "if (container == getSelectedIframe",
      "document.title = title"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3261,
    "id": "CVE-2012-2869",
    "commit_id": "9ce8793d2a8ca2cc0cb3c26fa1ca0eef3d9bc999",
    "added_lines": [
      "user_buffer_ = NULL",
      "user_buffer_size_ = 0",
      "DCHECK(!user_buffer_"
    ],
    "removed_lines": [],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly load URLs"
    ]
  },
  {
    "index": 3282,
    "id": "CVE-2012-2863",
    "commit_id": "9163cc2ff14b9489d090feebfbdf91ce89a82e6b",
    "added_lines": [
      "webkit.org/b/103927 http/tests/w3c/webperf/submission/Intel/resource-timing/test_resource_timing_cross_origin_resource_request.html [ Text ]",
      "webkit.org/b/103927 http/tests/w3c/webperf/submission/Intel/resource-timing/test_resource_timing_timing_allow_cross_origin_resource_request.html [ Text ]"
    ],
    "removed_lines": [
      "# Resource Timing is not enable yet, skip it.",
      "webkit.org/b/61138 http/tests/w3c/webperf/submission/Intel/resource-timing [ Skip ]"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3283,
    "id": "CVE-2012-2863",
    "commit_id": "cec36a7bfa7411a4992820ce8639310b2b426eeb",
    "added_lines": [
      "explicit ScopedGenericObj(C p = C()): obj_(p)",
      "void reset(C p = C())"
    ],
    "removed_lines": [
      "explicit ScopedGenericObj(C p = NULL): obj_(p)",
      "void reset(C p = NULL)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3299,
    "id": "CVE-2012-2828",
    "commit_id": "d560c6f5a89c582c9e12000adcebb4d4538a665d",
    "added_lines": [
      "#if defined(OS_MACOSX",
      "#define MAYBE_VarDeprecated DISABLED_VarDeprecated",
      "#else",
      "#define MAYBE_VarDeprecated VarDeprecated",
      "#endif",
      "TEST_PPAPI_OUT_OF_PROCESS(MAYBE_VarDeprecated"
    ],
    "removed_lines": [
      "TEST_PPAPI_OUT_OF_PROCESS(VarDeprecated"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3304,
    "id": "CVE-2012-2833",
    "commit_id": "1595f66a8dec04864afd048809cd9d0802049feb",
    "added_lines": [
      "ASSERT(!isMainThread"
    ],
    "removed_lines": [
      "if (isMainThread())",
      "DOMData::removeObjectsFromWrapperMap<Node>(&store, store.domNodeMap",
      "DOMData::removeObjectsFromWrapperMap<Node>(&store, store.activeDomNodeMap"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown vectors",
      "buffer overflow"
    ]
  },
  {
    "index": 3305,
    "id": "CVE-2012-2834",
    "commit_id": "00a9b5471ffdd02f36b6c788fab8dcd9fb13d451",
    "added_lines": [
      "FFMPEG_TEST_CASE(Cr117912, \"security/117912.webm\", DEMUXER_ERROR_COULD_NOT_OPEN,",
      "DEMUXER_ERROR_COULD_NOT_OPEN, kNullHash, kNullHash",
      "FFMPEG_TEST_CASE(Cr132779, \"security/132779.webm\",",
      "DEMUXER_ERROR_COULD_NOT_PARSE, DEMUXER_ERROR_COULD_NOT_PARSE,",
      "kNullHash, kNullHash"
    ],
    "removed_lines": [
      "FFMPEG_TEST_CASE(WEBM_6, \"security/117912.webm\", DEMUXER_ERROR_COULD_NOT_OPEN,",
      "DEMUXER_ERROR_COULD_NOT_OPEN, kNullHash, kNullHash"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 9.3,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3307,
    "id": "CVE-2012-2807",
    "commit_id": "f183580d61c054f7f6bb35cfe29e1b342390fbeb",
    "added_lines": [
      "#define MAX_LIBXML_MALLOC (1024*1024*512",
      "static void* size_checked_malloc(size_t size)",
      "if (size > MAX_LIBXML_MALLOC)",
      "return NULL",
      "return malloc(size",
      "static void* size_checked_realloc(void* ptr, size_t size)",
      "if (size > MAX_LIBXML_MALLOC)",
      "return NULL",
      "return realloc(ptr, size",
      "xmlMallocFunc xmlMalloc = (xmlMallocFunc) size_checked_malloc",
      "xmlMallocFunc xmlMallocAtomic = (xmlMallocFunc) size_checked_malloc",
      "xmlReallocFunc xmlRealloc = (xmlReallocFunc) size_checked_realloc"
    ],
    "removed_lines": [
      "xmlMallocFunc xmlMalloc = (xmlMallocFunc) malloc",
      "xmlMallocFunc xmlMallocAtomic = (xmlMallocFunc) malloc",
      "xmlReallocFunc xmlRealloc = (xmlReallocFunc) realloc"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "MEM_ALLOC",
      "INDEX_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN",
      "MEM_ALLOC",
      "INDEX_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "MEM_ALLOC",
      "MEM_ALLOC",
      "MEM_ALLOC"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown vectors",
      "integer overflow"
    ]
  },
  {
    "index": 3319,
    "id": "CVE-2011-3963",
    "commit_id": "0a38f71865b63025dce4de1f8cca71979c48d14d",
    "added_lines": [
      "void SendDeviceNotification(chromeos::BluetoothDevice* device,",
      "base::DictionaryValue* params",
      "int passkey",
      "int passkey,",
      "int entered",
      "void GenerateFakeDevice(const std::string& name,",
      "const std::string& address,",
      "const std::string& icon,",
      "bool paired,",
      "bool connected,",
      "const std::string& pairing"
    ],
    "removed_lines": [
      "void DeviceNotification(const base::DictionaryValue& device",
      "int passkey",
      "int passkey,",
      "int entered",
      "void GenerateFakeDiscoveredDevice(const std::string& name,",
      "const std::string& address,",
      "const std::string& icon,",
      "bool paired,",
      "bool connected",
      "void GenerateFakePairing(const std::string& name,",
      "const std::string& address,",
      "const std::string& icon,",
      "const std::string& pairing"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3336,
    "id": "CVE-2011-3919",
    "commit_id": "d82b03d21f7e581f9206ef1fec4959ae7b06b8eb",
    "added_lines": [
      "growBuffer(buffer, i + XML_PARSER_BUFFER_SIZE"
    ],
    "removed_lines": [
      "growBuffer(buffer, XML_PARSER_BUFFER_SIZE"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown vectors",
      "buffer overflow"
    ]
  },
  {
    "index": 3339,
    "id": "CVE-2011-3104",
    "commit_id": "6b5f83842b5edb5d4bd6684b196b3630c6769731",
    "added_lines": [
      "l10n_util::GetStringUTF16(IDS_EXTENSIONS_INCOGNITO_WARNING"
    ],
    "removed_lines": [
      "l10n_util::GetStringFUTF16(IDS_EXTENSIONS_INCOGNITO_WARNING,",
      "l10n_util::GetStringUTF16(IDS_PRODUCT_NAME"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3341,
    "id": "CVE-2011-3106",
    "commit_id": "5385c44d9634d00b1cec2abf0fe7290d4205c7b0",
    "added_lines": [
      "const base::WeakPtr<SSLErrorHandler::Delegate>& delegate,"
    ],
    "removed_lines": [
      "base::WeakPtr<SSLErrorHandler::Delegate> delegate,"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 10.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3345,
    "id": "CVE-2011-3110",
    "commit_id": "9f5bd739c3b8a02f05ce688adaf570b35a751310",
    "added_lines": [
      "# https://bugs.webkit.org/show_bug.cgi?id=94720",
      "css3/flexbox/flexitem.html"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3346,
    "id": "CVE-2011-3110",
    "commit_id": "70bb0e36d0a0fef6afb8353f26f7562bf79f2032",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3347,
    "id": "CVE-2011-3110",
    "commit_id": "23a52bd208885df236cde3ad2cd162b094c0bbe4",
    "added_lines": [],
    "removed_lines": [
      "},",
      "\"web_accessible_resources\": [",
      "\"devtools.html\",",
      "\"devtools.js\"",
      "]"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3348,
    "id": "CVE-2011-3110",
    "commit_id": "d4421f54c53212824d59d2763b8d4e3f231e3434",
    "added_lines": [
      "'nacl/nacl_validation_query_unittest.cc',"
    ],
    "removed_lines": [
      "'nacl/nacl_validation_query_unittest.cc',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3349,
    "id": "CVE-2011-3110",
    "commit_id": "fd4b6444f5dc40c49b33fe1f60a7ae493d7418fe",
    "added_lines": [
      "rendering/svg/RenderSVGAllInOne.cpp \\",
      "inspector/InspectorAllInOne.cpp \\",
      "loader/appcache/ApplicationCacheAllInOne.cpp \\",
      "rendering/style/StyleAllInOne.cpp"
    ],
    "removed_lines": [
      "inspector/InspectorAllInOne.cpp"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3350,
    "id": "CVE-2011-3110",
    "commit_id": "3c036ca040c114c077e13c35baaea78e2ddbaf61",
    "added_lines": [
      "#include \"ScaleTransformOperation.h\"",
      "TEST(AnimationTranslationUtilTest, createTransformAnimationWithNonDecomposableMatrix",
      "TEST(AnimationTranslationUtilTest, createTransformAnimationWithNonInvertibleTransform",
      "const double duration = 1",
      "WebCore::KeyframeValueList values(AnimatedPropertyWebkitTransform",
      "TransformOperations operations1",
      "operations1.operations().append(ScaleTransformOperation::create(1, 1, 1, TransformOperation::SCALE_3D",
      "values.insert(new TransformAnimationValue(0, &operations1",
      "TransformOperations operations2",
      "operations2.operations().append(ScaleTransformOperation::create(1, 0, 1, TransformOperation::SCALE_3D",
      "values.insert(new TransformAnimationValue(duration, &operations2",
      "RefPtr<Animation> animation = Animation::create",
      "animation->setDuration(duration",
      "EXPECT_TRUE(animationCanBeTranslated(values, animation.get"
    ],
    "removed_lines": [
      "TEST(AnimationTranslationUtilTest, createTransformAnimationWithSingularMatrix"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "MEM_ALLOC",
      "MEM_ALLOC",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3351,
    "id": "CVE-2011-3111",
    "commit_id": "8f4c71d7b3d0bd2be71986742faec10df1edbf38",
    "added_lines": [
      "<div class=\"close-button\"></div>",
      "<div class=\"close-button\"></div>",
      "<div class=\"close-button\"></div>"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "unspecified vectors",
      "invalid read"
    ]
  },
  {
    "index": 3354,
    "id": "CVE-2011-3114",
    "commit_id": "7ee3acb08d9de663e5ec3148ee98b666cd32ad82",
    "added_lines": [
      "if (force_restored",
      "return kTabstripTopSpacingRestored",
      "if (frame()->IsFullscreen",
      "return 0",
      "if (frame()->IsMaximized",
      "return kTabstripTopSpacingMaximized",
      "return kTabstripTopSpacingRestored"
    ],
    "removed_lines": [
      "if (!frame()->IsMaximized() || force_restored",
      "return kTabstripTopSpacingRestored",
      "return kTabstripTopSpacingMaximized"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3355,
    "id": "CVE-2011-3115",
    "commit_id": "ededfa807a7467e9b81c77e3ff5fda20d5d790c0",
    "added_lines": [
      "[V8EnabledAtRuntime=FileSystem] void webkitResolveLocalFileSystemURL(in DOMString url, in [Callback] EntryCallback successCallback, in [Callback, Optional] ErrorCallback errorCallback"
    ],
    "removed_lines": [
      "[V8EnabledAtRuntime=FileSystem] void webkitResolveLocalFileSystemURL(in DOMString url, in [Callback, Optional] EntryCallback successCallback, in [Callback, Optional] ErrorCallback errorCallback"
    ],
    "cause": [
      "Uncategorized Cluster 10"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARRAY_ACCESS"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "type corruption"
    ]
  },
  {
    "index": 3356,
    "id": "CVE-2011-3083",
    "commit_id": "d6b061bf189e0661a3d94d89dbcb2e6f70b433da",
    "added_lines": [
      "media_request_context_->set_ftp_transaction_factory(ftp_factory_.get"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 10"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "null pointer dereference"
    ]
  },
  {
    "index": 3358,
    "id": "CVE-2011-3085",
    "commit_id": "c7e50b5ef454efd6ab9527d795442c213eeb6afa",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 4",
      "Uncategorized Cluster 10"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "UI corruption",
      "does not properly restrict field values"
    ]
  },
  {
    "index": 3360,
    "id": "CVE-2011-3088",
    "commit_id": "1dab554a7e795dac34313e2f7dbe4325628d12d4",
    "added_lines": [
      "class SessionRestoreImpl",
      "std::set<SessionRestoreImpl*>* active_session_restorers = NULL",
      "if (active_session_restorers == NULL",
      "active_session_restorers = new std::set<SessionRestoreImpl*>",
      "std::set<SessionRestoreImpl*>::const_iterator it",
      "for (it = active_session_restorers->begin",
      "it != active_session_restorers->end(); ++it)",
      "if ((*it)->profile_ == profile",
      "break",
      "DCHECK(it == active_session_restorers->end",
      "active_session_restorers->insert(this",
      "active_session_restorers->erase(this",
      "if (active_session_restorers->empty())",
      "delete active_session_restorers",
      "active_session_restorers = NULL",
      "Profile* profile() { return profile_;",
      "if (active_session_restorers == NULL",
      "return false",
      "for (std::set<SessionRestoreImpl*>::const_iterator it =",
      "active_session_restorers->begin",
      "it != active_session_restorers->end(); ++it)",
      "if ((*it)->profile() == profile",
      "return true",
      "return false"
    ],
    "removed_lines": [
      "std::set<const Profile*>* profiles_getting_restored = NULL",
      "if (profiles_getting_restored == NULL",
      "profiles_getting_restored = new std::set<const Profile*>",
      "CHECK(profiles_getting_restored->find(profile) ==",
      "profiles_getting_restored->end",
      "profiles_getting_restored->insert(profile",
      "CHECK(profiles_getting_restored",
      "CHECK(profiles_getting_restored->find(profile_) !=",
      "profiles_getting_restored->end",
      "profiles_getting_restored->erase(profile_",
      "if (profiles_getting_restored->empty())",
      "delete profiles_getting_restored",
      "profiles_getting_restored = NULL",
      "return (profiles_getting_restored &&",
      "profiles_getting_restored->find(profile) !=",
      "profiles_getting_restored->end"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "RETURN"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3379,
    "id": "CVE-2011-3052",
    "commit_id": "64681e22e73e3325e06e6e5e8ef81995b4a306cc",
    "added_lines": [
      "std::vector<uint8> scanline_"
    ],
    "removed_lines": [
      "scoped_array<uint8> scanline_"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown vectors"
    ]
  },
  {
    "index": 3387,
    "id": "CVE-2013-6632",
    "commit_id": "f28ccd0b2709832d05156bd107d29d48a4a440cc",
    "added_lines": [
      ": ChildThreadImpl(Options::Builder",
      ".InBrowserProcess(true",
      ".WithChannelName(channel_name",
      ".Build()),"
    ],
    "removed_lines": [
      ": ChildThreadImpl(Options(channel_name, false)),"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 9.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "integer overflow",
      "unspecified vectors"
    ]
  },
  {
    "index": 3388,
    "id": "CVE-2013-6632",
    "commit_id": "62a44a8fbce598d9924c36a54088045e68a169c7",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 9.3,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "integer overflow",
      "unspecified vectors"
    ]
  },
  {
    "index": 3393,
    "id": "CVE-2013-6638",
    "commit_id": "301b392761fd8f66f3a701ab1dd011c6e7a55e19",
    "added_lines": [
      "#endif  // BASE_WIN_STARTUP_INFORMATION_H__"
    ],
    "removed_lines": [
      "#endif  // BASE_WIN_SCOPED_STARTUP_INFO_EX_H_"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3394,
    "id": "CVE-2013-6640",
    "commit_id": "516abadc2553489ce28faeea4917280032fbe91d",
    "added_lines": [
      "eq_class1->add_facet()->set_id(kExampleWebFacet1URI",
      "eq_class1->add_facet()->set_id(kExampleWebFacet2URI",
      "eq_class1->add_facet()->set_id(kExampleAndroidFacetURI",
      "eq_class2->add_facet()->set_id(kNotExampleWebFacetURI",
      "eq_class2->add_facet()->set_id(kNotExampleAndroidFacetURI",
      "eq_class1->add_facet()->set_id(kExampleWebFacet1URI",
      "eq_class1->add_facet()->set_id(kExampleWebFacet2URI",
      "eq_class1->add_facet()->set_id(kExampleAndroidFacetURI",
      "eq_class2->add_facet()->set_id(kExampleWebFacet2URI",
      "eq_class2->add_facet()->set_id(kExampleAndroidFacetURI",
      "eq_class2->add_facet()->set_id(kExampleWebFacet1URI",
      "eq_class1->add_facet()->set_id(kExampleWebFacet1URI",
      "eq_class1->add_facet()->set_id(kExampleWebFacet1URI",
      "eq_class1->add_facet()->set_id(kExampleWebFacet2URI",
      "eq_class1->add_facet()->set_id(kExampleAndroidFacetURI",
      "eq_class1->add_facet()->set_id(\"new-platform://app-id-on-new-platform\"",
      "eq_class2->add_facet()->set_id(\"new-platform2://app2-id-on-new-platform2\"",
      "eq_class1->add_facet()->set_id(kExampleWebFacet1URI",
      "eq_class1->add_facet()->set_id(kExampleWebFacet2URI",
      "eq_class2->add_facet()->set_id(kExampleWebFacet1URI",
      "eq_class2->add_facet()->set_id(kExampleAndroidFacetURI"
    ],
    "removed_lines": [
      "eq_class1->add_facet(kExampleWebFacet1URI",
      "eq_class1->add_facet(kExampleWebFacet2URI",
      "eq_class1->add_facet(kExampleAndroidFacetURI",
      "eq_class2->add_facet(kNotExampleWebFacetURI",
      "eq_class2->add_facet(kNotExampleAndroidFacetURI",
      "eq_class1->add_facet(kExampleWebFacet1URI",
      "eq_class1->add_facet(kExampleWebFacet2URI",
      "eq_class1->add_facet(kExampleAndroidFacetURI",
      "eq_class2->add_facet(kExampleWebFacet2URI",
      "eq_class2->add_facet(kExampleAndroidFacetURI",
      "eq_class2->add_facet(kExampleWebFacet1URI",
      "eq_class1->add_facet(kExampleWebFacet1URI",
      "eq_class1->add_facet(kExampleWebFacet1URI",
      "eq_class1->add_facet(kExampleWebFacet2URI",
      "eq_class1->add_facet(kExampleAndroidFacetURI",
      "eq_class1->add_facet(\"new-platform://app-id-on-new-platform\"",
      "eq_class2->add_facet(\"new-platform2://app2-id-on-new-platform2\"",
      "eq_class1->add_facet(kExampleWebFacet1URI",
      "eq_class1->add_facet(kExampleWebFacet2URI",
      "eq_class2->add_facet(kExampleWebFacet1URI",
      "eq_class2->add_facet(kExampleAndroidFacetURI"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3397,
    "id": "CVE-2013-6623",
    "commit_id": "9fd9d629fcf836bb0d6210015d33a299cf6bca34",
    "added_lines": [
      "void set_open_about_blank_on_browser_launch(bool value)",
      "open_about_blank_on_browser_launch_ = value",
      "bool open_about_blank_on_browser_launch_"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "implementation in blink"
    ]
  },
  {
    "index": 3401,
    "id": "CVE-2013-6627",
    "commit_id": "d6805d0d1d21976cf16d0237d9091f7eebea4ea5",
    "added_lines": [
      "#include \"content/shell/browser/layout_test/layout_test_android.h\""
    ],
    "removed_lines": [
      "#include \"content/shell/browser/shell_layout_tests_android.h\""
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "status code",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3414,
    "id": "CVE-2013-2907",
    "commit_id": "e72e4401cd9c6683816e5f452bb4514b18b21655",
    "added_lines": [
      "$('pod-row').focusPod();  // No focused pods.",
      "$('inner-container').classList.add('disabled'"
    ],
    "removed_lines": [
      "} else",
      "$('pod-row').focusPod();  // No focused pods.",
      "$('inner-container').classList.add('disabled'"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3425,
    "id": "CVE-2013-2917",
    "commit_id": "6bdf46c517fd12674ffc61d827dc8987e67f0334",
    "added_lines": [
      "ASSERT(!stageOffset",
      "ASSERT(stageLength <= fftSize / 2",
      "m_directKernel->copyToRange(impulseResponse, 0, stageLength"
    ],
    "removed_lines": [
      "m_directKernel->copyToRange(impulseResponse + stageOffset, 0, fftSize / 2"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "implementation in blink"
    ]
  },
  {
    "index": 3427,
    "id": "CVE-2013-2920",
    "commit_id": "3ca8e38ff57e83fcce76f9b54cd8f8bfa09c34ad",
    "added_lines": [
      "url_parse::ParseAfterScheme(relative_url, relative_component.end(),",
      "relative_component.begin, &relative_parsed"
    ],
    "removed_lines": [
      "url_parse::ParseAfterScheme(&relative_url[relative_component.begin],",
      "relative_component.len, relative_component.begin,",
      "&relative_parsed"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3448,
    "id": "CVE-2013-2869",
    "commit_id": "2d308fc6c8c0fd86510a6f4415d8b247ceb454e6",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3456,
    "id": "CVE-2013-2875",
    "commit_id": "a620e0ac86bfaa6ebfd1e55aea33a2e1d2f56989",
    "added_lines": [
      "RenderSVGContainer {g} at (50,94) size 383x137",
      "RenderSVGText {text} at (50,140) size 158x75 contains 1 chunk(s",
      "RenderSVGInlineText {#text} at (-50,-140) size 0x0",
      "RenderSVGInlineText {#text} at (0,0) size 113x76",
      "chunk 1 text run 1 at (50.00,200.00) startOffset 0 endOffset 3 width 112.50: \"a\\x{729C}\\x{923}\"",
      "RenderSVGTSpan {tspan} at (0,0) size 46x30",
      "RenderSVGInlineText {#text} at (112,36) size 45x30",
      "chunk 1 text run 1 at (162.50,200.00) startOffset 0 endOffset 3 width 45.00: \"a\\x{729C}\\x{923}\""
    ],
    "removed_lines": [
      "RenderSVGContainer {g} at (50,79) size 383x152",
      "RenderSVGText {text} at (50,79) size 383x151 contains 1 chunk(s",
      "RenderSVGInlineText {#text} at (0,0) size 225x151",
      "chunk 1 text run 1 at (50.00,200.00) startOffset 0 endOffset 3 width 225.00: \"a\\x{729C}\\x{923}\"",
      "RenderSVGInlineText {#text} at (225,60) size 113x75",
      "chunk 1 text run 1 at (275.00,200.00) startOffset 0 endOffset 3 width 112.50: \"a\\x{729C}\\x{923}\"",
      "RenderSVGTSpan {tspan} at (0,0) size 46x31",
      "RenderSVGInlineText {#text} at (337,96) size 45x30",
      "chunk 1 text run 1 at (387.50,200.00) startOffset 0 endOffset 3 width 45.00: \"a\\x{729C}\\x{923}\""
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP",
      "ARITH_OP",
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors",
      "implementation in blink"
    ]
  },
  {
    "index": 3458,
    "id": "CVE-2013-2877",
    "commit_id": "d0947db40187f4708c58e64cbd6013faf9eddeed",
    "added_lines": [
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(-1",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(0",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(0",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlFree(buffer",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlFree(buf",
      "return(NULL",
      "while (((IS_CHAR(c)) && ((c != stop) ||",
      "(ctxt->input != input))) && (ctxt->instate != XML_PARSER_EOF))",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlFree(buf",
      "return(NULL",
      "if (orig != NULL",
      "while (((NXT(0) != limit) &&",
      "(IS_CHAR(c)) && (c != '<')) &&",
      "(ctxt->instate != XML_PARSER_EOF))",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto error",
      "error:",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlFree(buf",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlFree(buf",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlFree(buf",
      "return",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlFree(buf",
      "return",
      "if (ctxt->instate != XML_PARSER_EOF",
      "ctxt->instate = state",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlFree(buf",
      "return",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return",
      "while ((RAW != '>') && (ctxt->instate != XML_PARSER_EOF))",
      "while ((RAW == '|') && (ctxt->instate != XML_PARSER_EOF))",
      "while ((RAW != ')') && (ctxt->instate != XML_PARSER_EOF))",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(-1",
      "while (((RAW != 0) && ((RAW != ']') || (NXT(1) != ']') ||",
      "(NXT(2) != '>'))) && (ctxt->instate != XML_PARSER_EOF))",
      "while (((depth >= 0) && (RAW != 0)) &&",
      "(ctxt->instate != XML_PARSER_EOF))",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlFree(name",
      "return(NULL",
      "entity = ctxt->sax->getParameterEntity(ctxt->userData, name",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlBufferFree(buf",
      "return(-1",
      "entity = ctxt->sax->getParameterEntity(ctxt->userData, name",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlFree(name",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return",
      "while ((RAW != ']') && (ctxt->instate != XML_PARSER_EOF))",
      "while (((RAW != '>') &&",
      "(IS_BYTE_CHAR(RAW))) && (ctxt->instate != XML_PARSER_EOF))",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(NULL",
      "while (((RAW != '>') &&",
      "(IS_BYTE_CHAR(RAW))) && (ctxt->instate != XML_PARSER_EOF))",
      "if (ctxt->instate == XML_PARSER_EOF",
      "break",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return",
      "if (ctxt->instate == XML_PARSER_EOF)",
      "xmlFree(buf",
      "return",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return",
      "while ((ctxt->instate != XML_PARSER_EOF) &&",
      "(((RAW == '<') && (NXT(1) == '?')) ||",
      "(CMP4(CUR_PTR, '<', '!', '-', '-')) ||",
      "IS_BLANK_CH(CUR)))",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(-1",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(-1",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(-1",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(-1",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(-1",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(-1",
      "while (ctxt->instate != XML_PARSER_EOF)",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "goto done",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(-1",
      "if (ctxt->instate == XML_PARSER_EOF",
      "return(ctxt->errNo",
      "ctxt->errNo = XML_ERR_USER_STOP"
    ],
    "removed_lines": [
      "while ((IS_CHAR(c)) && ((c != stop) ||",
      "(ctxt->input != input)))",
      "if (orig != NULL",
      "while ((NXT(0) != limit) &&",
      "(IS_CHAR(c)) && (c != '<'))",
      "ctxt->instate = state",
      "while (RAW != '>')",
      "while (RAW == '|')",
      "while (RAW != ')')",
      "while ((RAW != 0) && ((RAW != ']') || (NXT(1) != ']') ||",
      "(NXT(2) != '>')))",
      "while ((depth >= 0) && (RAW != 0))",
      "entity = ctxt->sax->getParameterEntity(ctxt->userData,",
      "name",
      "entity = ctxt->sax->getParameterEntity(ctxt->userData,",
      "name",
      "while (RAW != ']')",
      "while ((RAW != '>') &&",
      "(IS_BYTE_CHAR(RAW)))",
      "while ((RAW != '>') &&",
      "(IS_BYTE_CHAR(RAW)))",
      "while (((RAW == '<') && (NXT(1) == '?')) ||",
      "(CMP4(CUR_PTR, '<', '!', '-', '-')) ||",
      "IS_BLANK_CH(CUR))",
      "while (1)"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3460,
    "id": "CVE-2013-2878",
    "commit_id": "09fbb829eab7ee25e90bb4e9c2f4973c6c62d0f3",
    "added_lines": [
      "RELEASE_ASSERT(m_textCharacters + m_textLength <= text.characters() + static_cast<int>(text.length"
    ],
    "removed_lines": [
      "ASSERT(m_textCharacters + m_textLength <= text.characters() + static_cast<int>(text.length"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3466,
    "id": "CVE-2013-2855",
    "commit_id": "482ed745fb07a9642504fae676ab901ee79c73dc",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 5.0,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown vectors"
    ]
  },
  {
    "index": 3473,
    "id": "CVE-2013-2862",
    "commit_id": "a3b76c8c13ea6b228122440f48c61b66d20443dd",
    "added_lines": [
      "if (!host_ || shutting_down_",
      "return"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown vectors"
    ]
  },
  {
    "index": 3474,
    "id": "CVE-2013-2863",
    "commit_id": "be90ba35ee62e29d5440124dd11068a3e741ba5f",
    "added_lines": [
      "DISALLOW_COPY_AND_ASSIGN(SynchronousErrorStreamSocket",
      "class FakeBlockingStreamSocket : public WrappedStreamSocket",
      "public:",
      "explicit FakeBlockingStreamSocket(scoped_ptr<StreamSocket> transport",
      "virtual ~FakeBlockingStreamSocket()",
      "virtual int Read(net::IOBuffer* buf, int buf_len,",
      "const net::CompletionCallback& callback) OVERRIDE",
      "return read_state_.RunWrappedFunction(buf, buf_len, callback",
      "virtual int Write(net::IOBuffer* buf, int buf_len,",
      "const net::CompletionCallback& callback) OVERRIDE",
      "return write_state_.RunWrappedFunction(buf, buf_len, callback",
      "void SetNextReadShouldBlock() { read_state_.SetShouldBlock();",
      "void UnblockRead() { read_state_.Unblock();",
      "void SetNextWriteShouldBlock() { write_state_.SetShouldBlock();",
      "void UnblockWrite() { write_state_.Unblock();",
      "private:",
      "class BlockingState",
      "public:",
      "typedef base::Callback<",
      "int(net::IOBuffer*, int,",
      "const net::CompletionCallback&)> WrappedSocketFunction",
      "explicit BlockingState(const WrappedSocketFunction& function",
      "~BlockingState()",
      "void SetShouldBlock",
      "void Unblock",
      "int RunWrappedFunction(net::IOBuffer* buf, int len,",
      "const net::CompletionCallback& user_callback",
      "private:",
      "void OnCompleted(int result",
      "WrappedSocketFunction wrapped_function_",
      "bool should_block_",
      "bool have_result_",
      "int pending_result_",
      "net::CompletionCallback user_callback_",
      "BlockingState read_state_",
      "BlockingState write_state_",
      "DISALLOW_COPY_AND_ASSIGN(FakeBlockingStreamSocket",
      "FakeBlockingStreamSocket::FakeBlockingStreamSocket",
      "scoped_ptr<StreamSocket> transport",
      ": WrappedStreamSocket(transport.Pass()),",
      "read_state_(base::Bind(&Socket::Read,",
      "base::Unretained(transport_.get()))),",
      "write_state_(base::Bind(&Socket::Write,",
      "base::Unretained(transport_.get())))",
      "FakeBlockingStreamSocket::BlockingState::BlockingState",
      "const WrappedSocketFunction& function",
      ": wrapped_function_(function),",
      "should_block_(false),",
      "have_result_(false),",
      "pending_result_(net::OK)",
      "void FakeBlockingStreamSocket::BlockingState::SetShouldBlock()",
      "DCHECK(!should_block_",
      "should_block_ = true",
      "void FakeBlockingStreamSocket::BlockingState::Unblock()",
      "DCHECK(should_block_",
      "should_block_ = false",
      "if (!have_result_",
      "return",
      "have_result_ = false",
      "base::ResetAndReturn(&user_callback_).Run(pending_result_",
      "int FakeBlockingStreamSocket::BlockingState::RunWrappedFunction",
      "net::IOBuffer* buf,",
      "int len,",
      "const net::CompletionCallback& callback)",
      "net::CompletionCallback transport_callback =",
      "!should_block_ ? callback : base::Bind(&BlockingState::OnCompleted,",
      "base::Unretained(this",
      "int rv = wrapped_function_.Run(buf, len, transport_callback",
      "if (should_block_)",
      "user_callback_ = callback",
      "have_result_ = (rv != net::ERR_IO_PENDING",
      "pending_result_ = rv",
      "return net::ERR_IO_PENDING",
      "return rv",
      "void FakeBlockingStreamSocket::BlockingState::OnCompleted(int result)",
      "if (should_block_)",
      "have_result_ = true",
      "pending_result_ = result",
      "return",
      "base::ResetAndReturn(&user_callback_).Run(result",
      "class DeleteSocketCallback : public net::TestCompletionCallbackBase",
      "public:",
      "explicit DeleteSocketCallback(net::StreamSocket* socket",
      ": socket_(socket),",
      "callback_(base::Bind(&DeleteSocketCallback::OnComplete,",
      "base::Unretained(this)))",
      "virtual ~DeleteSocketCallback()",
      "const net::CompletionCallback& callback() const { return callback_;",
      "private:",
      "void OnComplete(int result)",
      "if (socket_)",
      "delete socket_",
      "socket_ = NULL",
      "} else",
      "ADD_FAILURE() << \"Deleting socket twice\"",
      "SetResult(result",
      "net::StreamSocket* socket_",
      "net::CompletionCallback callback_",
      "DISALLOW_COPY_AND_ASSIGN(DeleteSocketCallback",
      "net::SSLConfig ssl_config",
      "ssl_config.false_start_enabled = false",
      "ssl_config",
      "TEST_F(SSLClientSocketTest, Read_DeleteWhilePendingFullDuplex)",
      "net::SpawnedTestServer test_server(net::SpawnedTestServer::TYPE_HTTPS,",
      "net::SpawnedTestServer::kLocalhost,",
      "base::FilePath",
      "ASSERT_TRUE(test_server.Start",
      "net::AddressList addr",
      "ASSERT_TRUE(test_server.GetAddressList(&addr",
      "net::TestCompletionCallback callback",
      "scoped_ptr<net::StreamSocket> real_transport(new net::TCPClientSocket",
      "addr, NULL, net::NetLog::Source",
      "SynchronousErrorStreamSocket* error_socket = new SynchronousErrorStreamSocket",
      "real_transport.Pass",
      "FakeBlockingStreamSocket* transport = new FakeBlockingStreamSocket",
      "scoped_ptr<net::StreamSocket>(error_socket",
      "int rv = callback.GetResult(transport->Connect(callback.callback",
      "EXPECT_EQ(net::OK, rv",
      "net::SSLConfig ssl_config",
      "ssl_config.false_start_enabled = false",
      "net::SSLClientSocket* sock",
      "CreateSSLClientSocket(transport, test_server.host_port_pair(),",
      "ssl_config",
      "rv = callback.GetResult(sock->Connect(callback.callback",
      "EXPECT_EQ(net::OK, rv",
      "EXPECT_TRUE(sock->IsConnected",
      "std::string request_text = \"GET / HTTP/1.1\\r\\nUser-Agent: long browser name \"",
      "request_text.append(20 * 1024, '*'",
      "request_text.append(\"\\r\\n\\r\\n\"",
      "scoped_refptr<net::DrainableIOBuffer> request_buffer",
      "new net::DrainableIOBuffer(new net::StringIOBuffer(request_text),",
      "request_text.size",
      "error_socket->SetNextReadError(net::ERR_CONNECTION_RESET",
      "error_socket->SetNextWriteError(net::ERR_CONNECTION_RESET",
      "transport->SetNextReadShouldBlock",
      "transport->SetNextWriteShouldBlock",
      "DeleteSocketCallback read_callback(sock",
      "scoped_refptr<net::IOBuffer> read_buf(new net::IOBuffer(4096",
      "rv = sock->Read(read_buf, 4096, read_callback.callback",
      "ASSERT_EQ(net::ERR_IO_PENDING, rv",
      "ASSERT_FALSE(read_callback.have_result",
      "#if !defined(USE_OPENSSL",
      "rv = callback.GetResult(sock->Write(request_buffer,",
      "request_buffer->BytesRemaining(),",
      "callback.callback",
      "ASSERT_LT(0, rv",
      "request_buffer->DidConsume(rv",
      "ASSERT_LT(0, request_buffer->BytesRemaining",
      "#endif",
      "rv = sock->Write(request_buffer, request_buffer->BytesRemaining(),",
      "callback.callback",
      "ASSERT_EQ(net::ERR_IO_PENDING, rv",
      "ASSERT_FALSE(callback.have_result",
      "transport->UnblockWrite",
      "rv = read_callback.WaitForResult",
      "#if !defined(USE_OPENSSL",
      "EXPECT_EQ(net::ERR_CONNECTION_RESET, rv",
      "#else",
      "EXPECT_EQ(0, rv",
      "#endif",
      "EXPECT_FALSE(callback.have_result"
    ],
    "removed_lines": [
      "kDefaultSSLConfig"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 10.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "MEM_ALLOC",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3475,
    "id": "CVE-2013-2864",
    "commit_id": "c70071d1b25ef0100452c3ce305911276174ae71",
    "added_lines": [
      "@Override",
      "public boolean isOomProtectedOrWasWhenDied()",
      "return mInitialBindingBound || mStrongBindingCount > 0",
      "@Override",
      "public void stop()",
      "mInitialBindingBound = false",
      "mStrongBindingCount = 0",
      "assertNotNull(manager.getConnectionForPid(connection.getPid",
      "manager.clearConnection(connection.getPid",
      "assertNull(manager.getConnectionForPid(connection.getPid",
      "connection.stop",
      "assertFalse(message, connection.isInitialBindingBound",
      "assertFalse(message, connection.isStrongBindingBound"
    ],
    "removed_lines": [
      "@Override",
      "public void stop() { throw new UnsupportedOperationException();",
      "manager.bindAsHighPriority(connection.getPid",
      "assertTrue(message, manager.isOomProtected(connection.getPid",
      "manager.unbindAsHighPriority(connection.getPid",
      "getInstrumentation().waitForIdleSync",
      "manager.unbindAsHighPriority(connection.getPid",
      "getInstrumentation().waitForIdleSync",
      "assertFalse(message, manager.isOomProtected(connection.getPid"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 7"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP",
      "MEM_ALLOC"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "invalid free",
      "unknown vectors"
    ]
  },
  {
    "index": 3477,
    "id": "CVE-2013-0879",
    "commit_id": "0f05aa7e29cf814a204830c82ba2619f9c636894",
    "added_lines": [
      "chrome.test.sendMessage('ready', function(message)",
      "chrome.test.runTests([",
      "function testPermission()",
      "if (chrome.dial",
      "chrome.test.fail",
      "else",
      "chrome.test.succeed",
      "]"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown vectors"
    ]
  },
  {
    "index": 3480,
    "id": "CVE-2013-0882",
    "commit_id": "25f9415f43d607d3d01f542f067e3cc471983e6b",
    "added_lines": [
      "virtual bool supportsAutofocus() const OVERRIDE"
    ],
    "removed_lines": [],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "incorrect memory access"
    ]
  },
  {
    "index": 3488,
    "id": "CVE-2013-0890",
    "commit_id": "e9c887a80115ddc5c011380f132fe4b36359caf0",
    "added_lines": [
      "if (imageBitmap)",
      "resolver->resolve(imageBitmap",
      "} else",
      "v8::Isolate* isolate = ScriptState::current()->isolate",
      "resolver->reject(ScriptValue(v8::Null(isolate), isolate",
      "return fulfillImageBitmap(eventTarget.executionContext(), canvas->buffer() ? ImageBitmap::create(canvas, IntRect(sx, sy, sw, sh)) : nullptr"
    ],
    "removed_lines": [
      "resolver->resolve(imageBitmap",
      "return fulfillImageBitmap(eventTarget.executionContext(), ImageBitmap::create(canvas, IntRect(sx, sy, sw, sh"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "Multiple unspecified vulnerabilities",
      "unknown vectors"
    ]
  },
  {
    "index": 3489,
    "id": "CVE-2013-0890",
    "commit_id": "d443be6fdfe17ca4f3ff1843ded362ff0cd01096",
    "added_lines": [
      "size_t element_index = 0",
      "int result_int = 0",
      "&result_int",
      "if (result",
      "element_index = static_cast<size_t>(result_int",
      "if (element_index >= unsafe_resources_.size())"
    ],
    "removed_lines": [
      "int element_index = 0",
      "&element_index",
      "DCHECK(result",
      "if (element_index >= static_cast<int>(unsafe_resources_.size()))"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "Multiple unspecified vulnerabilities",
      "unknown vectors"
    ]
  },
  {
    "index": 3490,
    "id": "CVE-2013-0891",
    "commit_id": "58936737b65052775b67b1409b87edbbbc09f72b",
    "added_lines": [
      "bool AddItemLength(size_t index, int64 item_length"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3499,
    "id": "CVE-2013-0894",
    "commit_id": "6130e7b6da93abf7b3fabd12591e8d5ccb16b2c9",
    "added_lines": [
      "\"ffmpeg_revision\": \"176720\",",
      "\"ffmpeg_hash\": \"fe7d5497f1490914d7c3bb0236a1c722afccf4e4\","
    ],
    "removed_lines": [
      "\"ffmpeg_revision\": \"175176\",",
      "\"ffmpeg_hash\": \"0c981b3a572f9257e6178f5572e3f3cd47ac3025\","
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "divide-by-zero error",
      "buffer overflow"
    ]
  },
  {
    "index": 3501,
    "id": "CVE-2013-0896",
    "commit_id": "58c433b2426f8d23ad27f1976635506ee3643034",
    "added_lines": [
      ": guid_(0),",
      "framer_(QuicDecrypter::Create(kNULL), QuicEncrypter::Create(kNULL)),",
      "header_.guid = guid_",
      "header_.transmission_time = 0",
      "header_.retransmission_count = 0"
    ],
    "removed_lines": [
      ": framer_(QuicDecrypter::Create(kNULL), QuicEncrypter::Create(kNULL)),"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 5"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "does not properly manage memory",
      "unknown vectors"
    ]
  },
  {
    "index": 3504,
    "id": "CVE-2013-0899",
    "commit_id": "48bd56a2e1d715c94570c1c44ae1fd1e8778c837",
    "added_lines": [
      "Modifications:",
      "Import fix for padding in decoder http://git.xiph.org/?p=opus.git;a=commitdiff;h=9345aaa5ca1c2fb7d62981b2a538e0ce20612c38"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "integer overflow"
    ]
  },
  {
    "index": 3507,
    "id": "CVE-2013-0917",
    "commit_id": "02c8303512ebed345011f7b545e2f418799be2f0",
    "added_lines": [
      "FileSystemSyncCallbackHelper* helper = FileSystemSyncCallbackHelper::create",
      "EntrySyncCallbackHelper* resolveURLHelper = EntrySyncCallbackHelper::create"
    ],
    "removed_lines": [
      "RefPtr<FileSystemSyncCallbackHelper> helper = FileSystemSyncCallbackHelper::create",
      "RefPtr<EntrySyncCallbackHelper> resolveURLHelper = EntrySyncCallbackHelper::create"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3513,
    "id": "CVE-2013-0923",
    "commit_id": "14aeb712e033389cbb9d620754d7c59d625fc834",
    "added_lines": [
      "<!DOCTYPE html>",
      "<html>",
      "<head>",
      "<title>preserveAspectRatio test 1/2</title>",
      "<style>",
      "th",
      "background-color: #dd9",
      "font-family: sans-serif",
      "img, object",
      "border: 2px dashed maroon",
      "height: 50px",
      "left: 100px",
      "overflow: visible",
      "padding: 3px",
      "top: 20px",
      "width: 200px",
      "box-sizing: border-box",
      "object",
      "border-color: green",
      "border-width: 1px",
      "</style>",
      "</head>",
      "<body onload=\"runRepaintTest()\">",
      "<table>",
      "<tr>",
      "<th>",
      "viewBox?",
      "</th>",
      "<th>",
      "preserve&shy;Aspect&shy;Ratio",
      "</th>",
      "<th>",
      "&lt;img&gt",
      "</th>",
      "<th>",
      "&lt;object&gt",
      "</th>",
      "</tr>",
      "<tr>",
      "<th rowspan=4>",
      "No viewBox",
      "</th>",
      "<th>",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-default-default.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-default-default.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "none",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-default-none.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-default-none.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "meet",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-default-meet.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-default-meet.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "slice",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-default-slice.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-default-slice.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th rowspan=4>",
      "viewBox",
      "</th>",
      "<th>",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-viewbox-default.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-viewbox-default.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "none",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-viewbox-none.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-viewbox-none.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "meet",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-viewbox-meet.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-viewbox-meet.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "slice",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-viewbox-slice.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-viewbox-slice.svg\"></object>",
      "</td>",
      "</tr>",
      "</table>",
      "<script>var zoomCount = 2; window.shouldZoomOut = true;</script>",
      "<script src=\"../../../fast/repaint/resources/repaint.js\"></script>",
      "<script src=\"../resources/testPageZoom.js\"></script>",
      "</body>",
      "</html>"
    ],
    "removed_lines": [
      "<!DOCTYPE html>",
      "<html>",
      "<head>",
      "<title>preserveAspectRatio test 1/2</title>",
      "<style>",
      "th",
      "background-color: #dd9",
      "font-family: sans-serif",
      "img, object",
      "border: 2px dashed maroon",
      "height: 50px",
      "left: 100px",
      "overflow: visible",
      "padding: 3px",
      "top: 20px",
      "width: 200px",
      "box-sizing: border-box",
      "object",
      "border-color: green",
      "border-width: 1px",
      "</style>",
      "</head>",
      "<body onload=\"runRepaintTest()\">",
      "<table>",
      "<tr>",
      "<th>",
      "viewBox?",
      "</th>",
      "<th>",
      "preserve&shy;Aspect&shy;Ratio",
      "</th>",
      "<th>",
      "&lt;img&gt",
      "</th>",
      "<th>",
      "&lt;object&gt",
      "</th>",
      "</tr>",
      "<tr>",
      "<th rowspan=4>",
      "No viewBox",
      "</th>",
      "<th>",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-default-default.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-default-default.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "none",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-default-none.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-default-none.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "meet",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-default-meet.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-default-meet.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "slice",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-default-slice.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-default-slice.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th rowspan=4>",
      "viewBox",
      "</th>",
      "<th>",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-viewbox-default.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-viewbox-default.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "none",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-viewbox-none.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-viewbox-none.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "meet",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-viewbox-meet.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-viewbox-meet.svg\"></object>",
      "</td>",
      "</tr>",
      "<tr>",
      "<th>",
      "slice",
      "</th>",
      "<td>",
      "<img src=\"../../as-image/resources/circle-viewbox-slice.svg\" />",
      "</td>",
      "<td>",
      "<object data=\"../../as-image/resources/circle-viewbox-slice.svg\"></object>",
      "</td>",
      "</tr>",
      "</table>",
      "<script>var zoomCount = 2; window.shouldZoomOut = true;</script>",
      "<script src=\"../../../fast/repaint/resources/repaint.js\"></script>",
      "<script src=\"../resources/testPageZoom.js\"></script>",
      "</body>",
      "</html>"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3514,
    "id": "CVE-2013-0923",
    "commit_id": "a9ca2310c6e68ad8dc39d6b54ca9ea10867ed8a1",
    "added_lines": [
      "enum OrientationLockType",
      "\"any\",",
      "\"landscape\",",
      "\"portrait\",",
      "\"portrait-primary\",",
      "\"portrait-secondary\",",
      "\"landscape-primary\",",
      "\"landscape-secondary\"",
      "boolean lockOrientation(OrientationLockType orientation"
    ],
    "removed_lines": [
      "boolean lockOrientation(DOMString orientation"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3515,
    "id": "CVE-2013-0923",
    "commit_id": "fff23a24401ad0932f8c689c954b7f21478d30d0",
    "added_lines": [
      "\"credentials\": \"google\",",
      "},",
      "\"stress_memory\":",
      "\"action\": \"compound_interaction\",",
      "\"actions\": [",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"Home\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"Profile\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"Explore\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"Events\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"Photos\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"Circles\",",
      "\"wait_for_navigate\": true",
      "]",
      "\"credentials\": \"google\",",
      "},",
      "\"stress_memory\":",
      "\"action\": \"compound_interaction\",",
      "\"actions\": [",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"Browse\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"selector\": \"a[href=\\\"/recommended\\\"]\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"selector\": \"a[href=\\\"/trending\\\"]\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"selector\": \"a[href=\\\"/autos\\\"]\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"selector\": \"a[href=\\\"/entertainment\\\"]\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"selector\": \"a[href=\\\"/film\\\"]\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"selector\": \"a[href=\\\"/gaming\\\"]\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"selector\": \"a[href=\\\"/howto\\\"]\",",
      "\"wait_for_navigate\": true",
      "]",
      "},",
      "\"stress_memory\":",
      "\"action\": \"compound_interaction\",",
      "\"actions\": [",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"accessibility\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"scrolling_interaction\"",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"advanced\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"scrolling_interaction\"",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"beginner\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"scrolling_interaction\"",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"Home\",",
      "\"wait_for_navigate\": true",
      "]",
      "},",
      "\"stress_memory\":",
      "\"action\": \"compound_interaction\",",
      "\"actions\": [",
      "\"action\": \"scrolling_interaction\"",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"selector\": \"a[href=\\\"http://en.blog.wordpress.com/2012/08/30/new-themes-able-and-sight/\\\"]\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"scrolling_interaction\"",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"Features\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"scrolling_interaction\"",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"News\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"scrolling_interaction\"",
      "]",
      "\"text\": \"About\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"The Audacity of Hope\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"Back to Barack Obama's Timeline\",",
      "\"wait_for_navigate\": true",
      "},",
      "\"action\": \"click_element_interaction\",",
      "\"text\": \"About\",",
      "\"text\": \"Elected to U.S. Senate\",",
      "\"text\": \"Home\","
    ],
    "removed_lines": [
      "\"selector\": \"a[href=\\\"http://www.facebook.com/WomenforObama\\\"]\",",
      "\"selector\": \"a[href=\\\"http://www.facebook.com/WomenforObama/info\\\"]\",",
      "\"selector\": \"a[href=\\\"http://www.facebook.com/?ref=tn_tnmn\\\"]\","
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unspecified vectors"
    ]
  },
  {
    "index": 3522,
    "id": "CVE-2013-0904",
    "commit_id": "0d173104d584327b12c2d091f9e5350ad304127c",
    "added_lines": [],
    "removed_lines": [
      "#define WEBCRYPTO_HAS_ERROR_TYPE 1"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown vectors"
    ]
  },
  {
    "index": 3523,
    "id": "CVE-2013-0904",
    "commit_id": "b2b21468c1f7f08b30a7c1755316f6026c50eb2a",
    "added_lines": [
      "#include \"core/rendering/style/StyleDifference.h\""
    ],
    "removed_lines": [
      "#include \"core/rendering/style/RenderStyleConstants.h\""
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown vectors"
    ]
  },
  {
    "index": 3525,
    "id": "CVE-2013-0906",
    "commit_id": "060a95fbd69b1cffab6670165dd8edffec5109c0",
    "added_lines": [
      "\"webkit_revision\": \"174895\","
    ],
    "removed_lines": [
      "\"webkit_revision\": \"174877\","
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown vectors"
    ]
  },
  {
    "index": 3537,
    "id": "CVE-2013-0843",
    "commit_id": "f96f1f27d9bc16b1a045c4fb5c8a8a82f73ece59",
    "added_lines": [
      "if (sample_rate == 96000 || sample_rate == 48000)",
      "buffer_size = (sample_rate / 100"
    ],
    "removed_lines": [
      "if (sample_rate == 48000)",
      "buffer_size = 480"
    ],
    "cause": [
      "Uncategorized Cluster 9"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "INDEX_OP"
    ],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "does not use an appropriate buffer size"
    ]
  },
  {
    "index": 3542,
    "id": "CVE-2012-5149",
    "commit_id": "503bea2643350c6378de5f7a268b85cf2480e1ac",
    "added_lines": [
      "if (!r->IsValid",
      "return false"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown vectors",
      "integer overflow"
    ]
  },
  {
    "index": 3544,
    "id": "CVE-2012-5151",
    "commit_id": "0d4b90f87d7ee602d6cfebf85a62c9019a2f9494",
    "added_lines": [
      "\"webkit_revision\": \"165538\","
    ],
    "removed_lines": [
      "\"webkit_revision\": \"165526\","
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3545,
    "id": "CVE-2012-5152",
    "commit_id": "802ecdb9cee0d66fe546bdf24e98150f8f716ad8",
    "added_lines": [
      "static const size_t kRawDataSize = 2048",
      "static const int kSamplesPerSecond = 3000",
      "Initialize(kDefaultChannelLayout, kDefaultSampleBits, kSamplesPerSecond",
      "void Initialize(ChannelLayout channel_layout, int bits_per_channel,",
      "int samples_per_second)",
      "static const int kFrames = kRawDataSize / ((kDefaultSampleBits / 8) *",
      "ChannelLayoutToChannelCount(kDefaultChannelLayout",
      "samples_per_second, bits_per_channel, kFrames",
      "memset(audio_data.get(), 1, kRawDataSize",
      "void CheckFakeData(uint8* audio_data, int frames_written)",
      "int sum = 0",
      "for (int i = 0; i < frames_written * algorithm_.bytes_per_frame(); ++i",
      "sum |= audio_data[i]",
      "if (algorithm_.is_muted",
      "ASSERT_EQ(sum, 0",
      "else",
      "ASSERT_NE(sum, 0",
      "const int kDefaultBufferSize = algorithm_.samples_per_second() / 10",
      "const int kDefaultFramesRequested = 2 * algorithm_.samples_per_second",
      "ASSERT_GT(frames_written, 0",
      "CheckFakeData(buffer.get(), frames_written",
      "TEST_F(AudioRendererAlgorithmTest, FillBuffer_NearlyNormalFasterRate)",
      "Initialize",
      "TestPlaybackRate(1.0001",
      "TEST_F(AudioRendererAlgorithmTest, FillBuffer_NearlyNormalSlowerRate)",
      "Initialize",
      "TestPlaybackRate(0.9999",
      "TEST_F(AudioRendererAlgorithmTest, FillBuffer_LargeBufferSize)",
      "Initialize(kDefaultChannelLayout, kDefaultSampleBits, 44100",
      "TestPlaybackRate(1.0",
      "TestPlaybackRate(0.5",
      "TestPlaybackRate(1.5",
      "Initialize(kChannelLayout, kSampleBits, kSamplesPerSecond",
      "Initialize(kChannelLayout, kSampleBits, kSamplesPerSecond"
    ],
    "removed_lines": [
      "static const size_t kRawDataSize = 10 * 1024",
      "static const int kSamplesPerSecond = 44100",
      "Initialize(kDefaultChannelLayout, kDefaultSampleBits",
      "void Initialize(ChannelLayout channel_layout, int bits_per_channel)",
      "kSamplesPerSecond, bits_per_channel, kRawDataSize",
      "size_t length = kRawDataSize / algorithm_.bytes_per_channel",
      "switch (algorithm_.bytes_per_channel())",
      "case 4:",
      "WriteFakeData<int32>(audio_data.get(), length",
      "break",
      "case 2:",
      "WriteFakeData<int16>(audio_data.get(), length",
      "break",
      "case 1:",
      "WriteFakeData<uint8>(audio_data.get(), length",
      "break",
      "default:",
      "NOTREACHED() << \"Unsupported audio bit depth in crossfade.\"",
      "template <class Type>",
      "void WriteFakeData(uint8* audio_data, size_t length)",
      "Type* output = reinterpret_cast<Type*>(audio_data",
      "for (size_t i = 0; i < length; i++)",
      "output[i] = i % 5 + 10",
      "void CheckFakeData(uint8* audio_data, int frames_written,",
      "double playback_rate)",
      "size_t length =",
      "(frames_written * algorithm_.bytes_per_frame",
      "/ algorithm_.bytes_per_channel",
      "switch (algorithm_.bytes_per_channel())",
      "case 4:",
      "DoCheckFakeData<int32>(audio_data, length",
      "break",
      "case 2:",
      "DoCheckFakeData<int16>(audio_data, length",
      "break",
      "case 1:",
      "DoCheckFakeData<uint8>(audio_data, length",
      "break",
      "default:",
      "NOTREACHED() << \"Unsupported audio bit depth in crossfade.\"",
      "template <class Type>",
      "void DoCheckFakeData(uint8* audio_data, size_t length)",
      "Type* output = reinterpret_cast<Type*>(audio_data",
      "for (size_t i = 0; i < length; i++)",
      "EXPECT_TRUE(algorithm_.is_muted() || output[i] != 0",
      "static const int kDefaultBufferSize = kSamplesPerSecond / 10",
      "static const int kDefaultFramesRequested = 5 * kSamplesPerSecond",
      "CHECK_GT(frames_written, 0",
      "CheckFakeData(buffer.get(), frames_written, playback_rate",
      "Initialize(kChannelLayout, kSampleBits",
      "Initialize(kChannelLayout, kSampleBits"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "MEM_ZERO",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "INDEX_OP",
      "INDEX_OP",
      "POINTER_OP",
      "DEREF",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3546,
    "id": "CVE-2012-5153",
    "commit_id": "592ca89ecd826dac82b837e5e2085d8c3cfbe22e",
    "added_lines": [],
    "removed_lines": [
      "'engine/sync_session_job.cc',",
      "'engine/sync_session_job.h',",
      "'engine/sync_session_job_unittest.cc',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [],
    "unsafe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds access",
      "out-of-bounds"
    ]
  },
  {
    "index": 3547,
    "id": "CVE-2012-5154",
    "commit_id": "935cb0dee7696d70880f96a71bf5687411bb8cb9",
    "added_lines": [
      "if (rounded_size < options.size",
      "return false"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3550,
    "id": "CVE-2012-5157",
    "commit_id": "24950cb67304ad09ee05e32c3ffa5e07f52f0b8c",
    "added_lines": [
      "callFunction(verifyCorrectEndState"
    ],
    "removed_lines": [
      "function CallFunctionAction(fun)",
      "this._fun = fun",
      "CallFunctionAction.prototype =",
      "invoke: function()",
      "this._fun",
      "},",
      "describe: function()",
      "return \"calls the passed function\"",
      "new CallFunctionAction(verifyCorrectEndState"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "RETURN",
      "MEM_ALLOC"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3551,
    "id": "CVE-2012-5157",
    "commit_id": "7f0126ff011142c8619b10a6e64d04d1745c503a",
    "added_lines": [
      "PageSerializationStatus status) = 0",
      "}  // namespace blink"
    ],
    "removed_lines": [
      "PageSerializationStatus) = 0",
      "} // namespace blink"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3557,
    "id": "CVE-2013-0833",
    "commit_id": "dd1bb8f7923aef4307eac04e4839bde50f815a9e",
    "added_lines": [
      "\"webkit_revision\": \"154485\","
    ],
    "removed_lines": [
      "\"webkit_revision\": \"154375\","
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3558,
    "id": "CVE-2013-0834",
    "commit_id": "ba4bc023d7c3328cf8c6a6da6b5c4ba88f7bf5a7",
    "added_lines": [
      "this._addCSSURLforSASSURL(rawURL, url"
    ],
    "removed_lines": [
      "this._addCSSURLforSASSURL(rawURL, url"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3565,
    "id": "CVE-2014-7901",
    "commit_id": "7a6d81a8544c595331b50a17f8c0b11feca2f029",
    "added_lines": [
      "TestInterfaceNode* impl = V8TestInterfaceNode::toImpl(holder",
      "TestInterfaceNode* impl = V8TestInterfaceNode::toImpl(holder",
      "TestInterfaceNode* impl = V8TestInterfaceNode::toImpl(holder"
    ],
    "removed_lines": [
      "Element* impl = V8Element::toImpl(holder",
      "Element* impl = V8Element::toImpl(holder",
      "Element* impl = V8Element::toImpl(holder"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3567,
    "id": "CVE-2014-7903",
    "commit_id": "137458c8680c51fe9d3984ded2ef50a45a667b8b",
    "added_lines": [
      "frame_watcher->LastMetadata().root_scroll_offset.y() <",
      "distance.y())"
    ],
    "removed_lines": [
      "frame_watcher->LastMetadata().root_scroll_offset.y() <= 0)"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3568,
    "id": "CVE-2014-7904",
    "commit_id": "9965adea952e84c925de418e971b204dfda7d6e0",
    "added_lines": [
      "auth_request_info.extra_headers.SetHeader(\"Authorization\", \"Bar\""
    ],
    "removed_lines": [
      "auth_request_info.extra_headers.AddHeaderFromString(\"Authorization: Bar\""
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "unknown vectors",
      "buffer overflow"
    ]
  },
  {
    "index": 3573,
    "id": "CVE-2014-7908",
    "commit_id": "b2006ac87cec58363090e7d5e10d5d9e3bbda9f9",
    "added_lines": [
      "uint32 atomsize = Read32(buffer + offset",
      "if (atomsize == 0 || atomsize > static_cast<size_t>(buffer_size"
    ],
    "removed_lines": [
      "int atomsize = Read32(buffer + offset",
      "if (atomsize <= 0"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3577,
    "id": "CVE-2014-1744",
    "commit_id": "207da960337041d9eff123ad31d537e175288829",
    "added_lines": [
      "'official.desktop':",
      "'precise64': 'gn_official',",
      "},"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3579,
    "id": "CVE-2014-1746",
    "commit_id": "63d2b3e07e7487d8b2435d14c4148097fa1b13ca",
    "added_lines": [
      "#elif CPU(MIPS",
      "#define YIELD_PROCESSOR __asm__ __volatile__(\".word 0x00000140\"",
      "#elif CPU(MIPS64) && __mips_isa_rev >= 2"
    ],
    "removed_lines": [
      "#elif defined(__mips__) && __mips_isa_rev >= 2"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "CONDITIONAL"
    ],
    "unsafe_features": [
      "CONDITIONAL"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3592,
    "id": "CVE-2014-3198",
    "commit_id": "9b04ffd8e7a07e9b2947fe5b71acf85dff38a63f",
    "added_lines": [
      "if (page == -1",
      "return true",
      "if (page == -1",
      "return true"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3604,
    "id": "CVE-2014-3173",
    "commit_id": "ee7579229ff7e9e5ae28bf53aea069251499d7da",
    "added_lines": [
      "bool reset_draw_buffer = false",
      "if ((backbuffer_needs_clear_bits_ | GL_COLOR_BUFFER_BIT) != 0 &&",
      "group_->draw_buffer() == GL_NONE)",
      "reset_draw_buffer = true",
      "GLenum buf = GL_BACK",
      "if (GetBackbufferServiceId() != 0)  // emulated backbuffer",
      "buf = GL_COLOR_ATTACHMENT0",
      "glDrawBuffersARB(1, &buf",
      "if (reset_draw_buffer)",
      "GLenum buf = GL_NONE",
      "glDrawBuffersARB(1, &buf",
      "if (framebuffer->HasUnclearedColorAttachments())",
      "framebuffer->PrepareDrawBuffersForClear",
      "if ((clear_bits | GL_COLOR_BUFFER_BIT) != 0",
      "framebuffer->RestoreDrawBuffersAfterClear"
    ],
    "removed_lines": [
      "if (framebuffer->HasUnclearedAttachment(GL_COLOR_ATTACHMENT0))"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "uninitialized memory"
    ]
  },
  {
    "index": 3605,
    "id": "CVE-2014-3174",
    "commit_id": "c391f54a210dd792f140650b886e92480d8eaf9e",
    "added_lines": [
      "void updateCoefficientsIfNecessary",
      "void updateCoefficients(double frequency, double Q, double gain, double detune",
      "private:",
      "mutable Mutex m_processLock"
    ],
    "removed_lines": [
      "void updateCoefficientsIfNecessary(bool useSmoothing, bool forceUpdate"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 4",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "uninitialized memory",
      "implementation in blink",
      "does not properly consider"
    ]
  },
  {
    "index": 3614,
    "id": "CVE-2014-3156",
    "commit_id": "0b694217046d6b2bfa5814676e8615c18e6a45ff",
    "added_lines": [
      "CHECK(bitmap.getPixels"
    ],
    "removed_lines": [
      "if (!bitmap.getPixels",
      "return"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "RETURN"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3615,
    "id": "CVE-2014-3157",
    "commit_id": "96e8ffb4e805c7266a2fc1fbe0e470052019bad9",
    "added_lines": [
      "const int ret = av_image_check_size(size.width(), size.height(), 0, NULL",
      "if (ret < 0",
      "DCHECK_EQ(codec_context->lowres, 0",
      "gfx::Size coded_size(std::max(size.width(), codec_context->coded_width),",
      "std::max(size.height(), codec_context->coded_height",
      "if (!VideoFrame::IsValidConfig",
      "format, coded_size, gfx::Rect(size), natural_size",
      "scoped_refptr<VideoFrame> video_frame = frame_pool_.CreateFrame",
      "format, coded_size, gfx::Rect(size), natural_size, kNoTimestamp",
      "frame->width = coded_size.width",
      "frame->height = coded_size.height"
    ],
    "removed_lines": [
      "int ret",
      "if ((ret = av_image_check_size(size.width(), size.height(), 0, NULL)) < 0",
      "if (!VideoFrame::IsValidConfig(format, size, gfx::Rect(size), natural_size",
      "scoped_refptr<VideoFrame> video_frame =",
      "frame_pool_.CreateFrame(format, size, gfx::Rect(size),",
      "natural_size, kNoTimestamp",
      "frame->width = codec_context->width",
      "frame->height = codec_context->height"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "INDEX_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "INDEX_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3617,
    "id": "CVE-2014-1741",
    "commit_id": "7405a6243d55d229a2a6f13ad7396108a3f85ddd",
    "added_lines": [
      "if (sAccountIdProvider.canBeUsed(mContext, null))",
      "seedSystemAccounts",
      "return",
      "mSystemAccountsSeedingStatus = SystemAccountsSeedingStatus.SEEDING_NOT_STARTED",
      "notifyObserversOnForceRefreshed"
    ],
    "removed_lines": [
      "seedSystemAccounts"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3646,
    "id": "CVE-2014-1710",
    "commit_id": "b71fc042e1124cda2ab51dfdacc2362da62779a6",
    "added_lines": [
      "uint32 end = mem_params.shm_data_offset + mem_params.shm_data_size",
      "if (end > mem_params.shm_size || end < mem_params.shm_data_offset",
      "return false"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "INDEX_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "INDEX_OP",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown vectors"
    ]
  },
  {
    "index": 3706,
    "id": "CVE-2015-6771",
    "commit_id": "2fb181b5a614066d0cac76768e823686e3b03b4c",
    "added_lines": [
      "('third_party/WebKit/Tools/Scripts/webkitpy/style/checker.py',",
      "[('Source/', 'renderer/')]),"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds memory"
    ]
  },
  {
    "index": 3708,
    "id": "CVE-2015-6764",
    "commit_id": "f7b2214a08547e0d28b1a2fef3c19ee0f9febd19",
    "added_lines": [
      "tables_file = \"$output_gen_base/$pkg_name.fidl-tables.cc\"",
      "sources += [ \"sdk/fidl/${pkg_name}/${file}\" ]",
      "\"--tables\",",
      "rebase_path(tables_file, root_build_dir),",
      "tables_file,",
      "deps += [",
      "\":${invoker.target_name}_compile\",",
      "\":${invoker.target_name}_cpp_gen\",",
      "]",
      "tables_file,"
    ],
    "removed_lines": [
      "sources += [ \"sdk/pkg/${pkg_name}/${file}\" ]",
      "deps += [ \":${invoker.target_name}_cpp_gen\" ]"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds memory"
    ]
  },
  {
    "index": 3709,
    "id": "CVE-2015-6773",
    "commit_id": "33827275411b33371e7bb750cce20f11de85002d",
    "added_lines": [
      "selection.SetSelection",
      "SelectionInDOMTree::Builder",
      ".SetBaseAndExtent(range",
      ".SetAffinity(VP_DEFAULT_AFFINITY",
      ".SetIsDirectional(false",
      ".Build(),",
      "SetSelectionData::Builder().SetShouldShowHandle(show_handles).Build"
    ],
    "removed_lines": [
      "selection.SetSelection(SelectionInDOMTree::Builder",
      ".SetBaseAndExtent(range",
      ".SetAffinity(VP_DEFAULT_AFFINITY",
      ".SetIsHandleVisible(show_handles",
      ".SetIsDirectional(false",
      ".Build(),",
      "SetSelectionData"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds memory"
    ]
  },
  {
    "index": 3712,
    "id": "CVE-2015-6776",
    "commit_id": "e7df2d7d0c7a185834722cea42589caefd44da96",
    "added_lines": [
      "'pdfium_revision': '24c1eec13f277f27cb27edfb3d191e8bd2223e7c',"
    ],
    "removed_lines": [
      "'pdfium_revision': '3acb1ef909a22368507ed13817c4988c818e3aee',"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 3714,
    "id": "CVE-2015-6778",
    "commit_id": "1ef74c77625095af2d15ef993859b93157750447",
    "added_lines": [
      "'pdfium_revision': '3acb1ef909a22368507ed13817c4988c818e3aee',"
    ],
    "removed_lines": [
      "'pdfium_revision': 'a398ca611d1925182ff6a4e8b2b43c277c364dc0',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds memory"
    ]
  },
  {
    "index": 3717,
    "id": "CVE-2015-6781",
    "commit_id": "d02508f8c010b1415f5f1521a6f4cee260d1f8a9",
    "added_lines": [
      "# This is the equivalent to the following in sfntly.gyp.",
      "# 'msvs_disabled_warnings': [ 4267 ],",
      "configs -= [ \"//build/config/compiler:chromium_code\" ]",
      "configs += [ \"//build/config/compiler:no_chromium_code\" ]"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 3746,
    "id": "CVE-2015-1271",
    "commit_id": "74fce5949bdf05a92c2bc0bd98e6e3e977c55376",
    "added_lines": [
      "type == EventTypeNames::mouseout ||",
      "type == EventTypeNames::mousemove ||",
      "type == EventTypeNames::pointerover ||",
      "type == EventTypeNames::pointerout ||",
      "type == EventTypeNames::pointermove",
      "if (event->type() != EventTypeNames::input",
      "if (mediaElement().seekable()->contain(time",
      "mediaElement().setCurrentTime(time",
      "if (event->type() == EventTypeNames::input)",
      "double volume = value().toDouble",
      "mediaElement().setVolume(volume",
      "mediaElement().setMuted(false"
    ],
    "removed_lines": [
      "type == EventTypeNames::mouseout || type == EventTypeNames::mousemove",
      "if (event->type() == EventTypeNames::mouseover ||",
      "event->type() == EventTypeNames::mouseout ||",
      "event->type() == EventTypeNames::mousemove",
      "if (event->type() == EventTypeNames::input)",
      "if (mediaElement().seekable()->contain(time",
      "mediaElement().setCurrentTime(time",
      "if (event->isMouseEvent() &&",
      "toMouseEvent(event)->button() !=",
      "static_cast<short>(WebPointerProperties::Button::Left",
      "return",
      "if (event->type() == EventTypeNames::mouseover ||",
      "event->type() == EventTypeNames::mouseout ||",
      "event->type() == EventTypeNames::mousemove",
      "return",
      "double volume = value().toDouble",
      "mediaElement().setVolume(volume",
      "mediaElement().setMuted(false"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3747,
    "id": "CVE-2015-1273",
    "commit_id": "3d3dfcd34e38fcecaa1ff14bcd12cbc98259f36c",
    "added_lines": [
      "<rappor-metric name=\"Media.Video.Autoplay.Muted.DualSource.Frame\"",
      "type=\"ETLD_PLUS_ONE\">",
      "<owner>avayvod@chromium.org</owner>",
      "<owner>mlamouri@chromium.org</owner>",
      "<owner>zqzhang@chromium.org</owner>",
      "<summary>",
      "The eTLD+1 of the frame URL that has an autoplay muted video by both",
      "attribute and play() method.",
      "</summary>",
      "</rappor-metric>"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3751,
    "id": "CVE-2015-1279",
    "commit_id": "a90919df755b28d06305e1ecad9032322b054624",
    "added_lines": [
      "selectElementWithMatcher:grey_allOf(grey_text(@\"dismissModals\"),"
    ],
    "removed_lines": [
      "selectElementWithMatcher:grey_allOf(grey_text(@\"dismissContextMenu\"),"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 3752,
    "id": "CVE-2015-1280",
    "commit_id": "bc1f34b9be509f1404f0bb1ba1947614d5f0bcd1",
    "added_lines": [
      "\"name\": \"cdm\",",
      "\"display_name\": \"Content Decryption Module Service\",",
      "\"interface_provider_specs\":",
      "\"service_manager:connector\":",
      "\"provides\":",
      "\"media:cdm\": [ \"media::mojom::MediaService\" ]",
      "},",
      "\"requires\":",
      "\"*\": [ \"app\" ]"
    ],
    "removed_lines": [],
    "cause": [
      "Parsing or Interpretation Errors"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "access to a renderer process and providing crafted serialized data"
    ]
  },
  {
    "index": 3755,
    "id": "CVE-2015-1283",
    "commit_id": "d10065ae8b87f4eefe50d756f9c3464832c40bcf",
    "added_lines": [
      "keyboard::KeyboardController* controller =",
      "keyboard::KeyboardController::GetInstance",
      "if (!controller",
      "return",
      "controller->ShowKeyboardInDisplay(display_id"
    ],
    "removed_lines": [
      "keyboard::KeyboardController::GetInstance()->ShowKeyboardInDisplay",
      "display_id"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 3758,
    "id": "CVE-2015-1290",
    "commit_id": "deaa07bec5d105ffc546d37eba3da4cba341fc03",
    "added_lines": [
      ": LogoServiceImpl(DoodleDirectory(),",
      "template_url_service,",
      "image_fetcher::CreateIOSImageDecoder(),",
      "request_context_getter,"
    ],
    "removed_lines": [
      ": LogoService(DoodleDirectory(),",
      "template_url_service,",
      "image_fetcher::CreateIOSImageDecoder(),",
      "request_context_getter,"
    ],
    "cause": [
      "Uncategorized"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 9.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "unknown"
    ]
  },
  {
    "index": 3792,
    "id": "CVE-2015-1232",
    "commit_id": "5576cbc1d3e214dfbb5d3ffcdbe82aa8ba0088fc",
    "added_lines": [
      "TEST_F(MidiManagerUsbTest, SendFromCompromizedRenderer)",
      "scoped_ptr<FakeUsbMidiDevice> device(new FakeUsbMidiDevice(&logger_",
      "FakeMidiManagerClient client(&logger_",
      "uint8 descriptor[] =",
      "0x12, 0x01, 0x10, 0x01, 0x00, 0x00, 0x00, 0x08, 0x86, 0x1a,",
      "0x2d, 0x75, 0x54, 0x02, 0x00, 0x02, 0x00, 0x01, 0x09, 0x02,",
      "0x75, 0x00, 0x02, 0x01, 0x00, 0x80, 0x30, 0x09, 0x04, 0x00,",
      "0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x09, 0x24, 0x01, 0x00,",
      "0x01, 0x09, 0x00, 0x01, 0x01, 0x09, 0x04, 0x01, 0x00, 0x02,",
      "0x01, 0x03, 0x00, 0x00, 0x07, 0x24, 0x01, 0x00, 0x01, 0x51,",
      "0x00, 0x06, 0x24, 0x02, 0x01, 0x02, 0x00, 0x06, 0x24, 0x02,",
      "0x01, 0x03, 0x00, 0x06, 0x24, 0x02, 0x02, 0x06, 0x00, 0x09,",
      "0x24, 0x03, 0x01, 0x07, 0x01, 0x06, 0x01, 0x00, 0x09, 0x24,",
      "0x03, 0x02, 0x04, 0x01, 0x02, 0x01, 0x00, 0x09, 0x24, 0x03,",
      "0x02, 0x05, 0x01, 0x03, 0x01, 0x00, 0x09, 0x05, 0x02, 0x02,",
      "0x20, 0x00, 0x00, 0x00, 0x00, 0x06, 0x25, 0x01, 0x02, 0x02,",
      "0x03, 0x09, 0x05, 0x82, 0x02, 0x20, 0x00, 0x00, 0x00, 0x00,",
      "0x05, 0x25, 0x01, 0x01, 0x07,",
      "device->SetDescriptor(ToVector(descriptor",
      "uint8 data[] =",
      "0x90, 0x45, 0x7f,",
      "0xf0, 0x00, 0x01, 0xf7,",
      "Initialize",
      "ScopedVector<UsbMidiDevice> devices",
      "devices.push_back(device.release",
      "EXPECT_FALSE(IsInitializationCallbackInvoked",
      "RunCallbackUntilCallbackInvoked(true, &devices",
      "EXPECT_EQ(MIDI_OK, GetInitializationResult",
      "ASSERT_EQ(2u, manager_->output_streams().size",
      "EXPECT_EQ(\"UsbMidiDevice::GetDescriptor\\n\", logger_.TakeLog",
      "manager_->DispatchSendMidiData(&client, 99, ToVector(data), 0",
      "EXPECT_EQ(\"\", logger_.TakeLog",
      "manager_->DispatchSendMidiData(&client, 2, ToVector(data), 0",
      "EXPECT_EQ(\"\", logger_.TakeLog"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "MEM_ALLOC",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write",
      "array index error"
    ]
  },
  {
    "index": 3793,
    "id": "CVE-2015-1213",
    "commit_id": "faaa2fd0a05f1622d9a8806da118d4f3b602e707",
    "added_lines": [
      "return frameLoaderClient && frameLoaderClient->allowAutoplay(true"
    ],
    "removed_lines": [
      "return frameLoaderClient && frameLoaderClient->allowAutoplay(false"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "RETURN",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3794,
    "id": "CVE-2015-1214",
    "commit_id": "a81c185f34b34ef8410239506825b185b332c00b",
    "added_lines": [
      "<int value=\"32\" label=\"Captive Portal\"/>",
      "<int value=\"33\" label=\"Web Resource Service\"/>",
      "<int value=\"34\" label=\"Signin\"/>"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write",
      "integer overflow"
    ]
  },
  {
    "index": 3795,
    "id": "CVE-2015-1215",
    "commit_id": "2bceda4948deeaed0a5a99305d0d488eb952f64f",
    "added_lines": [
      "per-file *.typemap=set noparent",
      "per-file *.typemap=file://ipc/SECURITY_OWNERS"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3805,
    "id": "CVE-2015-1225",
    "commit_id": "a217c3919cd836eff52872b84c4e7e1605405748",
    "added_lines": [
      "\"name\": \"EnabledThree\",",
      "\"impression_limit\": \"3\""
    ],
    "removed_lines": [
      "\"name\": \"EnabledFive\",",
      "\"impression_limit\": \"5\""
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.0,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "unspecified vectors"
    ]
  },
  {
    "index": 3831,
    "id": "CVE-2016-5152",
    "commit_id": "47ae3dfdee9a0796a079cd4eadf2f75b34f257ae",
    "added_lines": [
      "content_settings::SettingInfo info",
      "GetWebsiteSetting(requesting_origin, embedding_origin, &info",
      "requesting_origin, embedding_origin, object_dict, info.source,"
    ],
    "removed_lines": [
      "auto* info = new content_settings::SettingInfo",
      "GetWebsiteSetting(requesting_origin, embedding_origin, info",
      "requesting_origin, embedding_origin, object_dict, info->source,"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "MEM_ALLOC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 3833,
    "id": "CVE-2016-5154",
    "commit_id": "aa065d9fed77b8cbdfe327b573e2f683c1ad6d6b",
    "added_lines": [
      "'pdfium_revision': 'a72ab5e0908ca29cfda91b3037da9b74cb06b93f',"
    ],
    "removed_lines": [
      "'pdfium_revision': 'ea3ff9eaaa508b9cbc7f52bc92d189eacbc7a935',"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3836,
    "id": "CVE-2016-5157",
    "commit_id": "66235aa45c0b0dcc0b875e4ade2747cf6b195ee4",
    "added_lines": [
      "'pdfium_revision': 'b6befb2ed2485a3805cddea86dc7574510178ea9',"
    ],
    "removed_lines": [
      "'pdfium_revision': '135b99861d0d898850754a845f607ec48f0bcccc',"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3837,
    "id": "CVE-2016-5158",
    "commit_id": "6a310d99a741f9ba5e4e537c5ec49d3adbe5876f",
    "added_lines": [
      "bool IsCollapsed(const AXNode* node)",
      "return node && node->data().HasState(ax::mojom::State::kCollapsed",
      "if (child->data().HasState(ax::mojom::State::kInvisible) &&",
      "!IsCollapsed(local_parent) && !IsCollapsed(local_parent->parent()))",
      "continue"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 3838,
    "id": "CVE-2016-5159",
    "commit_id": "2b7d329e0a69e97cd3dc2bf267fb96e40a7880a4",
    "added_lines": [
      "'pdfium_revision': '135b99861d0d898850754a845f607ec48f0bcccc',"
    ],
    "removed_lines": [
      "'pdfium_revision': '32e693fe13105fab5baf81b334e932fce62d89b5',"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow",
      "integer overflow"
    ]
  },
  {
    "index": 3848,
    "id": "CVE-2016-5182",
    "commit_id": "89f296b34f4f33e048848c06da08fc9271b30bc9",
    "added_lines": [
      "#include \"base/strings/string_util.h\"",
      "#include \"third_party/blink/public/web/web_element.h\"",
      "#include \"third_party/blink/public/web/web_input_element.h\"",
      "#include \"third_party/blink/public/web/web_node.h\"",
      "std::vector<blink::WebNode> nodesToLog",
      "for (unsigned i = 0; i < entry.nodes.size(); ++i)",
      "if (entry.nodes[i].IsElementNode())",
      "const blink::WebElement element =",
      "entry.nodes[i].ToConst<blink::WebElement>",
      "const blink::WebInputElement* webInputElement =",
      "blink::ToWebInputElement(&element",
      "const bool shouldObfuscate =",
      "webInputElement &&",
      "webInputElement->IsPasswordFieldForAutofill() &&",
      "!webInputElement->Value().IsEmpty",
      "if (!shouldObfuscate)",
      "text += \" %o\"",
      "nodesToLog.push_back(element",
      "message.nodes = std::move(nodesToLog);  // avoids copying node vectors."
    ],
    "removed_lines": [
      "for (unsigned i = 0; i < entry.nodes.size(); ++i",
      "text += \" %o\"",
      "message.nodes = std::move(entry.nodes);  // avoids copying node vectors."
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "exploit heap corruption"
    ]
  },
  {
    "index": 3887,
    "id": "CVE-2016-1646",
    "commit_id": "84fbaf8414b4911ef122557d1518b50f79c2eaef",
    "added_lines": [
      "true ,",
      "true"
    ],
    "removed_lines": [
      "false ,",
      "false"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 4"
    ],
    "effect": "DoS ",
    "score": 9.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "does not properly consider"
    ]
  },
  {
    "index": 3890,
    "id": "CVE-2016-1649",
    "commit_id": "6a5b73fc8615892260d6f47242d1d6a642e3dcfc",
    "added_lines": [
      "'angle_revision': '0c0d8006a9dd31552079b521a16db072526901db',"
    ],
    "removed_lines": [
      "'angle_revision': '00f394ec669faa3a778180991204caa474eb1dd2',"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 9.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3899,
    "id": "CVE-2015-8126",
    "commit_id": "7f3d85b096f66870a15b37c2f40b219b2e292693",
    "added_lines": [
      "(comp->max_output_ptr * png_sizeof(png_charp",
      "png_uint_32 max_palette_length, i",
      "max_palette_length = (png_ptr->color_type == PNG_COLOR_TYPE_PALETTE) ?",
      "(1 << png_ptr->bit_depth) : PNG_MAX_PALETTE_LENGTH",
      "num_pal == 0) || num_pal > max_palette_length",
      "#ifndef PNG_USE_GLOBAL_ARRAYS",
      "#endif",
      "#ifndef PNG_USE_GLOBAL_ARRAYS",
      "#endif",
      "#ifndef PNG_USE_GLOBAL_ARRAYS",
      "#endif"
    ],
    "removed_lines": [
      "(comp->max_output_ptr * png_sizeof(png_charpp",
      "png_uint_32 i",
      "num_pal == 0) || num_pal > 256",
      "#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "int num_p_filters = (int)png_ptr->num_prev_filters",
      "#endif",
      "#ifndef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "if (png_ptr->row_number == 0 && filter_to_do == PNG_ALL_FILTERS",
      "filter_to_do &= ~(PNG_FILTER_UP | PNG_FILTER_PAETH",
      "#endif",
      "#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED",
      "png_uint_32 sumhi, sumlo",
      "int j",
      "sumlo = sum & PNG_LOMASK",
      "sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK;",
      "for (j = 0; j < num_p_filters; j++",
      "if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_NONE",
      "sumlo = (sumlo * png_ptr->filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "sumhi = (sumhi * png_ptr->filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_NONE]) >>",
      "PNG_COST_SHIFT",
      "sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_NONE]) >>",
      "PNG_COST_SHIFT",
      "if (sumhi > PNG_HIMASK",
      "sum = PNG_MAXSUM",
      "else",
      "sum = (sumhi << PNG_HISHIFT) + sumlo",
      "#endif",
      "#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED",
      "int j",
      "png_uint_32 lmhi, lmlo",
      "lmlo = lmins & PNG_LOMASK",
      "lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK",
      "for (j = 0; j < num_p_filters; j++",
      "if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_SUB",
      "lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>",
      "PNG_COST_SHIFT",
      "lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>",
      "PNG_COST_SHIFT",
      "if (lmhi > PNG_HIMASK",
      "lmins = PNG_MAXSUM",
      "else",
      "lmins = (lmhi << PNG_HISHIFT) + lmlo",
      "#endif",
      "#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED",
      "int j",
      "png_uint_32 sumhi, sumlo",
      "sumlo = sum & PNG_LOMASK",
      "sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK",
      "for (j = 0; j < num_p_filters; j++",
      "if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_SUB",
      "sumlo = (sumlo * png_ptr->inv_filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "sumhi = (sumhi * png_ptr->inv_filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "sumlo = (sumlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>",
      "PNG_COST_SHIFT",
      "sumhi = (sumhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_SUB]) >>",
      "PNG_COST_SHIFT",
      "if (sumhi > PNG_HIMASK",
      "sum = PNG_MAXSUM",
      "else",
      "sum = (sumhi << PNG_HISHIFT) + sumlo",
      "#endif",
      "#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED",
      "int j",
      "png_uint_32 lmhi, lmlo",
      "lmlo = lmins & PNG_LOMASK",
      "lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK",
      "for (j = 0; j < num_p_filters; j++",
      "if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_UP",
      "lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_UP]) >>",
      "PNG_COST_SHIFT",
      "lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_UP]) >>",
      "PNG_COST_SHIFT",
      "if (lmhi > PNG_HIMASK",
      "lmins = PNG_MAXSUM",
      "else",
      "lmins = (lmhi << PNG_HISHIFT) + lmlo",
      "#endif",
      "#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED",
      "int j",
      "png_uint_32 sumhi, sumlo",
      "sumlo = sum & PNG_LOMASK",
      "sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK",
      "for (j = 0; j < num_p_filters; j++",
      "if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_UP",
      "sumlo = (sumlo * png_ptr->filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "sumhi = (sumhi * png_ptr->filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_UP]) >>",
      "PNG_COST_SHIFT",
      "sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_UP]) >>",
      "PNG_COST_SHIFT",
      "if (sumhi > PNG_HIMASK",
      "sum = PNG_MAXSUM",
      "else",
      "sum = (sumhi << PNG_HISHIFT) + sumlo",
      "#endif",
      "#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED",
      "int j",
      "png_uint_32 lmhi, lmlo",
      "lmlo = lmins & PNG_LOMASK",
      "lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK",
      "for (j = 0; j < num_p_filters; j++",
      "if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_AVG",
      "lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_AVG]) >>",
      "PNG_COST_SHIFT",
      "lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_AVG]) >>",
      "PNG_COST_SHIFT",
      "if (lmhi > PNG_HIMASK",
      "lmins = PNG_MAXSUM",
      "else",
      "lmins = (lmhi << PNG_HISHIFT) + lmlo",
      "#endif",
      "#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED",
      "int j",
      "png_uint_32 sumhi, sumlo",
      "sumlo = sum & PNG_LOMASK",
      "sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK",
      "for (j = 0; j < num_p_filters; j++",
      "if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_NONE",
      "sumlo = (sumlo * png_ptr->filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "sumhi = (sumhi * png_ptr->filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_AVG]) >>",
      "PNG_COST_SHIFT",
      "sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_AVG]) >>",
      "PNG_COST_SHIFT",
      "if (sumhi > PNG_HIMASK",
      "sum = PNG_MAXSUM",
      "else",
      "sum = (sumhi << PNG_HISHIFT) + sumlo",
      "#endif",
      "#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED",
      "int j",
      "png_uint_32 lmhi, lmlo",
      "lmlo = lmins & PNG_LOMASK",
      "lmhi = (lmins >> PNG_HISHIFT) & PNG_HIMASK",
      "for (j = 0; j < num_p_filters; j++",
      "if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_PAETH",
      "lmlo = (lmlo * png_ptr->inv_filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "lmhi = (lmhi * png_ptr->inv_filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "lmlo = (lmlo * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_PAETH]) >>",
      "PNG_COST_SHIFT",
      "lmhi = (lmhi * png_ptr->inv_filter_costs[PNG_FILTER_VALUE_PAETH]) >>",
      "PNG_COST_SHIFT",
      "if (lmhi > PNG_HIMASK",
      "lmins = PNG_MAXSUM",
      "else",
      "lmins = (lmhi << PNG_HISHIFT) + lmlo",
      "#endif",
      "#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "if (png_ptr->heuristic_method == PNG_FILTER_HEURISTIC_WEIGHTED",
      "int j",
      "png_uint_32 sumhi, sumlo",
      "sumlo = sum & PNG_LOMASK",
      "sumhi = (sum >> PNG_HISHIFT) & PNG_HIMASK",
      "for (j = 0; j < num_p_filters; j++",
      "if (png_ptr->prev_filters[j] == PNG_FILTER_VALUE_PAETH",
      "sumlo = (sumlo * png_ptr->filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "sumhi = (sumhi * png_ptr->filter_weights[j]) >>",
      "PNG_WEIGHT_SHIFT",
      "sumlo = (sumlo * png_ptr->filter_costs[PNG_FILTER_VALUE_PAETH]) >>",
      "PNG_COST_SHIFT",
      "sumhi = (sumhi * png_ptr->filter_costs[PNG_FILTER_VALUE_PAETH]) >>",
      "PNG_COST_SHIFT",
      "if (sumhi > PNG_HIMASK",
      "sum = PNG_MAXSUM",
      "else",
      "sum = (sumhi << PNG_HISHIFT) + sumlo",
      "#endif",
      "#ifdef PNG_WRITE_FILTER_SUPPORTED",
      "#ifdef PNG_WRITE_WEIGHTED_FILTER_SUPPORTED",
      "if (png_ptr->num_prev_filters > 0",
      "int j",
      "for (j = 1; j < num_p_filters; j++",
      "png_ptr->prev_filters[j] = png_ptr->prev_filters[j - 1]",
      "png_ptr->prev_filters[j] = best_row[0]",
      "#endif",
      "#endif"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 7.5,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "INDEX_OP",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "INDEX_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3913,
    "id": "CVE-2016-1619",
    "commit_id": "9f11faaa13c0238b5d29cfe312149987119bca92",
    "added_lines": [
      "#include \"chrome/browser/chromeos/smb_client/smb_url.h\"",
      "#include <string>",
      "#include \"chrome/browser/chromeos/smb_client/smb_constants.h\"",
      "#include \"testing/gtest/include/gtest/gtest.h\"",
      "#include \"url/gurl.h\"",
      "#include \"url/url_util.h\"",
      "namespace chromeos",
      "namespace smb_client",
      "class SmbUrlTest : public testing::Test",
      "public:",
      "SmbUrlTest()",
      "url::AddStandardScheme(kSmbScheme, url::SCHEME_WITH_HOST",
      "~SmbUrlTest() override = default",
      "private:",
      "DISALLOW_COPY_AND_ASSIGN(SmbUrlTest",
      "TEST_F(SmbUrlTest, NotValidWhenInitialized)",
      "SmbUrl smb_url",
      "EXPECT_FALSE(smb_url.IsValid",
      "TEST_F(SmbUrlTest, EmptyUrlIsInvalid)",
      "const std::string empty_url = \"\"",
      "SmbUrl smb_url",
      "EXPECT_FALSE(smb_url.InitializeWithUrl(empty_url",
      "EXPECT_FALSE(smb_url.IsValid",
      "TEST_F(SmbUrlTest, InvalidUrls)",
      "SmbUrl smb_url",
      "EXPECT_FALSE(smb_url.InitializeWithUrl(\"smb\"",
      "SmbUrl smb_url",
      "EXPECT_FALSE(smb_url.InitializeWithUrl(\"smb://\"",
      "SmbUrl smb_url",
      "EXPECT_FALSE(smb_url.InitializeWithUrl(\"\\\\\"",
      "SmbUrl smb_url",
      "EXPECT_FALSE(smb_url.InitializeWithUrl(\"\\\\\\\\\"",
      "SmbUrl smb_url",
      "EXPECT_FALSE(smb_url.InitializeWithUrl(\"smb:///\"",
      "TEST_F(SmbUrlTest, ValidUrls)",
      "SmbUrl smb_url",
      "EXPECT_TRUE(smb_url.InitializeWithUrl(\"smb://x\"",
      "const std::string expected_url = \"smb://x/\"",
      "EXPECT_EQ(expected_url, smb_url.ToString",
      "const std::string expected_host = \"x\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "SmbUrl smb_url",
      "EXPECT_TRUE(smb_url.InitializeWithUrl(\"smb:///x\"",
      "const std::string expected_url = \"smb://x/\"",
      "EXPECT_EQ(expected_url, smb_url.ToString",
      "const std::string expected_host = \"x\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "SmbUrl smb_url",
      "EXPECT_TRUE(smb_url.InitializeWithUrl(\"smb://server/share/long/folder\"",
      "const std::string expected_url = \"smb://server/share/long/folder\"",
      "EXPECT_EQ(expected_url, smb_url.ToString",
      "const std::string expected_host = \"server\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "SmbUrl smb_url",
      "EXPECT_TRUE",
      "smb_url.InitializeWithUrl(\"smb://server/share/folder.with.dots\"",
      "const std::string expected_url = \"smb://server/share/folder.with.dots\"",
      "EXPECT_EQ(expected_url, smb_url.ToString",
      "const std::string expected_host = \"server\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "SmbUrl smb_url",
      "EXPECT_TRUE",
      "smb_url.InitializeWithUrl(\"smb://server\\\\share/mixed\\\\slashes\"",
      "const std::string expected_url = \"smb://server/share/mixed/slashes\"",
      "EXPECT_EQ(expected_url, smb_url.ToString",
      "const std::string expected_host = \"server\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "SmbUrl smb_url",
      "EXPECT_TRUE(smb_url.InitializeWithUrl(\"\\\\\\\\server/share\"",
      "const std::string expected_url = \"smb://server/share\"",
      "EXPECT_EQ(expected_url, smb_url.ToString",
      "const std::string expected_host = \"server\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "SmbUrl smb_url",
      "EXPECT_TRUE(smb_url.InitializeWithUrl(\"\\\\\\\\server\\\\share/mixed//slashes\"",
      "const std::string expected_url = \"smb://server/share/mixed//slashes\"",
      "EXPECT_EQ(expected_url, smb_url.ToString",
      "const std::string expected_host = \"server\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "SmbUrl smb_url",
      "EXPECT_TRUE(smb_url.InitializeWithUrl(\"smb://192.168.0.1/share\"",
      "const std::string expected_url = \"smb://192.168.0.1/share\"",
      "EXPECT_EQ(expected_url, smb_url.ToString",
      "const std::string expected_host = \"192.168.0.1\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "TEST_F(SmbUrlTest, NotValidIfStartsWithoutSchemeOrDoubleBackslash)",
      "const std::string url = \"192.168.0.1/share\"",
      "SmbUrl smb_url",
      "EXPECT_FALSE(smb_url.InitializeWithUrl(url",
      "EXPECT_FALSE(smb_url.IsValid",
      "TEST_F(SmbUrlTest, StartsWithBackslashRemovesBackslashAndAddsScheme)",
      "const std::string url = \"\\\\\\\\192.168.0.1\\\\share\"",
      "SmbUrl smb_url",
      "EXPECT_TRUE(smb_url.InitializeWithUrl(url",
      "const std::string expected_url = \"smb://192.168.0.1/share\"",
      "EXPECT_TRUE(smb_url.IsValid",
      "EXPECT_EQ(expected_url, smb_url.ToString",
      "TEST_F(SmbUrlTest, GetHostWithIp)",
      "const std::string url = \"smb://192.168.0.1/share\"",
      "SmbUrl smb_url",
      "EXPECT_TRUE(smb_url.InitializeWithUrl(url",
      "const std::string expected_host = \"192.168.0.1\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "TEST_F(SmbUrlTest, GetHostWithDomain)",
      "const std::string url = \"smb://server/share\"",
      "SmbUrl smb_url",
      "EXPECT_TRUE(smb_url.InitializeWithUrl(url",
      "const std::string expected_host = \"server\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "TEST_F(SmbUrlTest, HostBecomesLowerCase)",
      "const std::string url = \"smb://SERVER/share\"",
      "SmbUrl smb_url",
      "EXPECT_TRUE(smb_url.InitializeWithUrl(url",
      "const std::string expected_host = \"server\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "const std::string expected_url = \"smb://server/share\"",
      "EXPECT_EQ(expected_url, smb_url.ToString",
      "TEST_F(SmbUrlTest, ReplacesHost)",
      "const std::string url = \"smb://server/share\"",
      "const std::string new_host = \"192.168.0.1\"",
      "SmbUrl smb_url",
      "EXPECT_TRUE(smb_url.InitializeWithUrl(url",
      "const std::string expected_host = \"server\"",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "const std::string expected_url = \"smb://192.168.0.1/share\"",
      "EXPECT_EQ(expected_url, smb_url.ReplaceHost(new_host",
      "EXPECT_EQ(expected_host, smb_url.GetHost",
      "}  // namespace smb_client",
      "}  // namespace chromeos"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read",
      "integer overflow"
    ]
  },
  {
    "index": 3921,
    "id": "CVE-2016-1702",
    "commit_id": "974c5e4a6adbbeb76fef281a17dd59efefa83ce5",
    "added_lines": [
      "49956c0413aa694c4270c946372ec69454365b0e"
    ],
    "removed_lines": [
      "f7e302e7d120961ef0cda7faeb1f53bcdad01a33"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3924,
    "id": "CVE-2016-1669",
    "commit_id": "3847be90de19869704f4865331e5f9baff7ae5f0",
    "added_lines": [
      "!self.webView ||"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 9.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3937,
    "id": "CVE-2016-1645",
    "commit_id": "7045ee0a8b4b19d298c67556ee0b92cd575e1303",
    "added_lines": [
      "'pdfium_revision': '28de044e5d6ab3cb0335ad4e5dd64fdf3376b2eb',"
    ],
    "removed_lines": [
      "'pdfium_revision': 'e4ac3369dc7bb1d0ae913404f008aea1fcd92480',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 9.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer signedness error",
      "out-of-bounds",
      "out-of-bounds write"
    ]
  },
  {
    "index": 3940,
    "id": "CVE-2016-1624",
    "commit_id": "7716418a27d561ee295a99f11fd3865580748de2",
    "added_lines": [
      "if (PREDICT_FALSE(s->ringbuffer_end < (const uint8_t*)0 + i))",
      "ringbuffer_end_minus_copy_length = 0"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INDEX_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer underflow",
      "buffer overflow",
      "integer underflow"
    ]
  },
  {
    "index": 3942,
    "id": "CVE-2016-1626",
    "commit_id": "d034f8b939b3f53e47dfb3e2675acb223748e02b",
    "added_lines": [
      "'pdfium_revision': '4a2aa1a90d89b88036b0bff432ffefa183ea80d0',"
    ],
    "removed_lines": [
      "'pdfium_revision': '32b639de35f905a5e5559f305d9032cde5ae5c77',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3943,
    "id": "CVE-2016-1628",
    "commit_id": "1ff50baacf794ebc38bde4da1f08da1c0a5b1818",
    "added_lines": [
      "'pdfium_revision': '32b639de35f905a5e5559f305d9032cde5ae5c77',"
    ],
    "removed_lines": [
      "'pdfium_revision': 'bd292ae8c0ca1793e8824add13bc8231cec3bc75',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Exec Code Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 3945,
    "id": "CVE-2017-5122",
    "commit_id": "f8675cbb337440a11bf9afb10ea11bae42bb92cb",
    "added_lines": [
      "-AppListPresenterDelegateTest.AppListViewDragHandler",
      "-AppListPresenterDelegateTest.AppListViewDragHandlerTabletModeFromSearch",
      "-AppListPresenterDelegateTest.BottomShelfAlignmentTextStateTransitions",
      "-AppListPresenterDelegateTest.HalfToFullscreenWhenTabletModeIsActive",
      "-AppListPresenterDelegateTest.HalfToPeekingByClickOrTap/0",
      "-AppListPresenterDelegateTest.HalfToPeekingByClickOrTap/1",
      "-AppListPresenterDelegateTest.KeyPressEnablesSearchBox",
      "-AppListPresenterDelegateTest.LongUpwardDragInFullscreenShouldNotClose/1",
      "-AppListPresenterDelegateTest.PeekingToFullscreenWhenTabletModeIsActive",
      "-AppListPresenterDelegateTest.SideShelfAlignmentTextStateTransitions",
      "-AppListPresenterDelegateTest.StateTransitionsByTapAndClickingAppListBodyFromHalf/0",
      "-AppListPresenterDelegateTest.StateTransitionsByTapAndClickingAppListBodyFromHalf/1",
      "-AppListPresenterDelegateTest.StateTransitionsByTappingAppListBodyFromFullscreen/0",
      "-AppListPresenterDelegateTest.StateTransitionsByTappingAppListBodyFromFullscreen/1",
      "-AppListPresenterDelegateTest.TabletModeTextStateTransitions",
      "-AppListPresenterDelegateTest.TapAndClickOutsideClosesHalfAppList/0",
      "-AppListPresenterDelegateTest.TapAndClickOutsideClosesHalfAppList/1",
      "-AppListPresenterDelegateTest.WhitespaceQuery",
      "# TODO: Top-of-screen mouse reveal doesn't work, maybe problem with",
      "# EventGenerator. http://crbug.com/698085",
      "-ImmersiveFullscreenControllerTest.Bubbles",
      "-ImmersiveFullscreenControllerTest.Delegate",
      "-ImmersiveFullscreenControllerTest.DifferentModalityEnterExit",
      "-ImmersiveFullscreenControllerTest.EndRevealViaGesture",
      "-ImmersiveFullscreenControllerTest.EventsDoNotLeakToWindowUnderneath",
      "-ImmersiveFullscreenControllerTest.Focus",
      "-ImmersiveFullscreenControllerTest.Inactive",
      "# TODO: Needs SetLayoutForCurrentDisplays() http://crbug.com/698043",
      "-ImmersiveFullscreenControllerTest.MouseEventsVerticalDisplayLayout",
      "-ImmersiveFullscreenControllerTest.MouseHoveredWithoutMoving",
      "-ImmersiveFullscreenControllerTest.OnMouseEvent",
      "-ImmersiveFullscreenControllerTest.RevealViaGestureChildConsumesEvents",
      "-ImmersiveFullscreenControllerTest.Transient",
      "# TODO: Maybe due to dragging across displays. http://crbug.com/698888",
      "-NormalPanelPopup/PanelWindowResizerTransientTest.PanelWithTransientChild/0",
      "# TODO: Maybe due to dragging across displays. http://crbug.com/698888",
      "-PanelWindowResizerTest.AttachToSecondDisplay",
      "-PanelWindowResizerTest.AttachToSecondFullscreenDisplay",
      "-PanelWindowResizerTest.DetachAcrossDisplays",
      "-PanelWindowResizerTest.DetachThenAttachToSecondDisplay",
      "-PanelWindowResizerTest.DetachThenDragAcrossDisplays",
      "# TODO: Needs virtual keyboard. http://crbug.com/698892",
      "-SystemModalContainerLayoutManagerTest.SystemModalDialogGetPushedButNotCroppedFromKeyboard",
      "-SystemModalContainerLayoutManagerTest.SystemModalDialogGetPushedButNotCroppedFromKeyboardIfNotCentered",
      "-SystemModalContainerLayoutManagerTest.SystemModalDialogGetPushedFromKeyboard",
      "# TODO: ShellPortMash::CreateTabletModeEventHandler. http://crbug.com/698093",
      "-TabletModeWindowManagerTest.ExitFullScreenWithEdgeSwipeFromBottom",
      "-TabletModeWindowManagerTest.ExitFullScreenWithEdgeSwipeFromTop",
      "-TabletModeWindowManagerTest.ExitFullScreenWithEdgeTouchAtBottom",
      "-TabletModeWindowManagerTest.ExitFullScreenWithEdgeTouchAtTop",
      "# TODO: Needs SetLayoutForCurrentDisplays(). http://crbug.com/698043",
      "-ToplevelWindowEventHandlerTest.DragSnappedWindowToExternalDisplay",
      "# TODO: http://crbug.com/698894",
      "-WindowCycleControllerTest.MouseEventsCaptured",
      "-WindowCycleControllerTest.TabKeyNotLeaked",
      "# TODO: Crashes in bounds_animator.cc. http://crbug.com/730759",
      "-WindowSelectorTest.MultipleDisplays",
      "-WindowSelectorTest.RemoveDisplay",
      "-WindowSelectorTest.RemoveDisplayWithAnimation"
    ],
    "removed_lines": [
      "-AppListPresenterDelegateTest.AppListViewDragHandler",
      "-AppListPresenterDelegateTest.AppListViewDragHandlerTabletModeFromSearch",
      "-AppListPresenterDelegateTest.BottomShelfAlignmentTextStateTransitions",
      "-AppListPresenterDelegateTest.HalfToFullscreenWhenTabletModeIsActive",
      "-AppListPresenterDelegateTest.HalfToPeekingByClickOrTap/0",
      "-AppListPresenterDelegateTest.HalfToPeekingByClickOrTap/1",
      "-AppListPresenterDelegateTest.KeyPressEnablesSearchBox",
      "-AppListPresenterDelegateTest.LongUpwardDragInFullscreenShouldNotClose/1",
      "-AppListPresenterDelegateTest.PeekingToFullscreenWhenTabletModeIsActive",
      "-AppListPresenterDelegateTest.SideShelfAlignmentTextStateTransitions",
      "-AppListPresenterDelegateTest.StateTransitionsByTapAndClickingAppListBodyFromHalf/0",
      "-AppListPresenterDelegateTest.StateTransitionsByTapAndClickingAppListBodyFromHalf/1",
      "-AppListPresenterDelegateTest.StateTransitionsByTappingAppListBodyFromFullscreen/0",
      "-AppListPresenterDelegateTest.StateTransitionsByTappingAppListBodyFromFullscreen/1",
      "-AppListPresenterDelegateTest.TabletModeTextStateTransitions",
      "-AppListPresenterDelegateTest.TapAndClickOutsideClosesHalfAppList/0",
      "-AppListPresenterDelegateTest.TapAndClickOutsideClosesHalfAppList/1",
      "-AppListPresenterDelegateTest.WhitespaceQuery"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 9"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds access",
      "out-of-bounds",
      "table size handling"
    ]
  },
  {
    "index": 3946,
    "id": "CVE-2017-5112",
    "commit_id": "f6ac1dba5e36f338a490752a2cbef3339096d9fe",
    "added_lines": [
      "switch (target)",
      "case GL_PIXEL_UNPACK_BUFFER:",
      "state_.pixel_unpack_buffer_binding = buffer",
      "break",
      "case GL_PIXEL_PACK_BUFFER:",
      "state_.pixel_pack_buffer_binding = buffer",
      "break",
      "default:",
      "break",
      "void DrawingBufferClientRestorePixelPackParameters() override",
      "void DrawingBufferClientRestorePixelPackBufferBinding() override",
      "state_.pixel_pack_buffer_binding = saved_state_.pixel_pack_buffer_binding",
      "EXPECT_EQ(state_.pixel_pack_buffer_binding,",
      "saved_state_.pixel_pack_buffer_binding",
      "GLuint pixel_pack_buffer_binding = 0"
    ],
    "removed_lines": [
      "if (target == GL_PIXEL_UNPACK_BUFFER",
      "state_.pixel_unpack_buffer_binding = buffer",
      "void DrawingBufferClientRestorePixelPackAlignment() override"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 3947,
    "id": "CVE-2017-5113",
    "commit_id": "3627803d756424daa364c12ecee224b0362d564d",
    "added_lines": [
      "'skia_revision': '6229b1240aae8961a4bf34493b964d944a0a06ee',"
    ],
    "removed_lines": [
      "'skia_revision': '71f867c2294655ccf8981500ad5a3beefb71295e',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "exploit heap corruption"
    ]
  },
  {
    "index": 3955,
    "id": "CVE-2017-5095",
    "commit_id": "45576f3a4a01bf8095a8934f8851983a93e31825",
    "added_lines": [
      "'pdfium_revision': 'f0f2a2a528e154b8ceeded297abc3a64007850f8',"
    ],
    "removed_lines": [
      "'pdfium_revision': '957480c17682008ae2a14723868fcdcab89b6577',"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "stack overflow"
    ]
  },
  {
    "index": 3962,
    "id": "CVE-2017-6991",
    "commit_id": "3bfe67c9c4b45eb713326aae7a67c8f7390dae08",
    "added_lines": [
      "SELECT b FROM t600, carray(inttoptr($PTR1),5) WHERE a=value",
      "SELECT b FROM t600 WHERE a IN carray(inttoptr($PTR1),5,'int32'",
      "SELECT b FROM t600 WHERE a IN carray(inttoptr($PTR1),4,'int32'",
      "SELECT b FROM t600 WHERE a IN carray(inttoptr($PTR1),5,'int33'",
      "SELECT b FROM t600, carray(inttoptr($PTR2),5,'int64') WHERE a=value",
      "SELECT value FROM carray(inttoptr($PTR2),5,'int64'",
      "SELECT remember(987,inttoptr($PTR3",
      "SELECT value FROM carray(inttoptr($PTR2),5,'int64'",
      "SELECT b FROM t600, carray(inttoptr($PTR4),5,'double') WHERE a=value",
      "SELECT b FROM t600, carray(inttoptr($PTR5),5,'char*'",
      "WHERE a=trim(value,'x'",
      "FROM carray(inttoptr($PTR4),5,'double') AS aa",
      "JOIN carray(inttoptr($PTR5),5,'char*') AS bb ON aa.rowid=bb.rowid"
    ],
    "removed_lines": [
      "SELECT b FROM t600, carray($PTR1,5) WHERE a=value",
      "SELECT b FROM t600 WHERE a IN carray($PTR1,5,'int32'",
      "SELECT b FROM t600 WHERE a IN carray($PTR1,4,'int32'",
      "SELECT b FROM t600 WHERE a IN carray($PTR1,5,'int33'",
      "SELECT b FROM t600, carray($PTR2,5,'int64') WHERE a=value",
      "SELECT value FROM carray($PTR2,5,'int64'",
      "SELECT remember(987,$PTR3",
      "SELECT value FROM carray($PTR2,5,'int64'",
      "SELECT b FROM t600, carray($PTR4,5,'double') WHERE a=value",
      "SELECT b FROM t600, carray($PTR5,5,'char*') WHERE a=trim(value,'x'",
      "FROM carray($PTR4,5,'double') AS aa",
      "JOIN carray($PTR5,5,'char*') AS bb ON aa.rowid=bb.rowid"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ExecCode  Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "vuln": "DoS Exec Code Overflow Mem. Corr. ",
    "summary": [
      "*SQLite* component"
    ]
  },
  {
    "index": 3992,
    "id": "CVE-2017-5063",
    "commit_id": "a30eb8104246637502cad02cdc8bbd2cc8566abe",
    "added_lines": [
      "'skia_revision': 'e0a34e7dcddf68f0972805894f26c54869c3faba',"
    ],
    "removed_lines": [
      "'skia_revision': 'a392dbaa998e9f137103f7a7e86f89cb7224552f',"
    ],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "out of bounds memory read"
    ]
  },
  {
    "index": 4000,
    "id": "CVE-2017-5054",
    "commit_id": "de35a0973ddba93070fa647b5c664077cef128be",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 4001,
    "id": "CVE-2017-5052",
    "commit_id": "e72c8c06b956706b54648589f807086d17340831",
    "added_lines": [
      "bool walkChildrenOnly = !currBlock->childrenInline",
      "if (walkChildrenOnly",
      "continue",
      "for (LayoutObject* walker = curr; walker",
      "walker = walker->nextInPreOrder(curr))",
      "if (walker != endContinuation",
      "continue"
    ],
    "removed_lines": [
      "if (curr == endContinuation)"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": " Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "CONDITIONAL",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "An incorrect assumption about block structure in Blink"
    ]
  },
  {
    "index": 4004,
    "id": "CVE-2017-5030",
    "commit_id": "c0873d7969789b0a77911430ed4f337b8764d182",
    "added_lines": [
      "#include <atomic>",
      "std::atomic_bool paused_"
    ],
    "removed_lines": [
      "bool paused_"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "incorrect handling of complex species"
    ]
  },
  {
    "index": 4007,
    "id": "CVE-2017-5029",
    "commit_id": "7db51ac349f66b3cf716c1338c3b401380f45b4b",
    "added_lines": [
      "package org.chromium.components.module_installer",
      "import org.junit.rules.ExternalResource",
      "public class ModuleInstallerRule extends ExternalResource",
      "private ModuleInstaller mOldModuleInstaller",
      "private final ModuleInstaller mMockModuleInstaller",
      "public ModuleInstallerRule(ModuleInstaller mockModuleInstaller)",
      "mMockModuleInstaller = mockModuleInstaller",
      "@Override",
      "protected void before()",
      "mOldModuleInstaller = ModuleInstaller.getInstance",
      "ModuleInstaller.setInstanceForTesting(mMockModuleInstaller",
      "@Override",
      "protected void after()",
      "ModuleInstaller.setInstanceForTesting(mOldModuleInstaller"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow",
      "out of bounds memory write"
    ]
  },
  {
    "index": 4019,
    "id": "CVE-2017-5044",
    "commit_id": "62154472bd2c43e1790dd1bd8a527c1db9118d88",
    "added_lines": [
      "method getAvailability"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "out of bounds memory read"
    ]
  },
  {
    "index": 4027,
    "id": "CVE-2017-5009",
    "commit_id": "1c40f9042ae2d6ee7483d72998aabb5e73b2ff60",
    "added_lines": [
      "redirect_response, resource_->GetType(),",
      "options.initiator_info"
    ],
    "removed_lines": [
      "redirect_response, options.initiator_info"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 8"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "bounds check",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4028,
    "id": "CVE-2017-5012",
    "commit_id": "5b51043c7c8e7e6b86e68e6d93d95ad24e11cf0e",
    "added_lines": [
      "bool IsBrowserWindowActive() const override"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "buffer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4031,
    "id": "CVE-2017-5014",
    "commit_id": "35eb28748d45b87695a69eceffaff73a0be476af",
    "added_lines": [
      "<obsolete>",
      "Removed as of 7/2019. No longer needed.",
      "</obsolete>",
      "<obsolete>",
      "Removed as of 7/2019. No longer needed.",
      "</obsolete>",
      "<obsolete>",
      "Removed as of 7/2019. No longer needed.",
      "</obsolete>",
      "<obsolete>",
      "Removed as of 7/2019. No longer needed.",
      "</obsolete>"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "out of bounds memory read"
    ]
  },
  {
    "index": 4041,
    "id": "CVE-2017-5024",
    "commit_id": "18995b57d57d54ca64ad66a2ff6d89501ea557a6",
    "added_lines": [
      "Var('chromium_git') + '/chromium/third_party/ffmpeg.git' + '@' + 'a77cdbfeb7b629eb3a5012d7c6c94ef11e0488be',"
    ],
    "removed_lines": [
      "Var('chromium_git') + '/chromium/third_party/ffmpeg.git' + '@' + '239c9f9e275486c051f3313efb6725968bb9a004',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 8"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "bounds check",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4042,
    "id": "CVE-2017-5025",
    "commit_id": "18995b57d57d54ca64ad66a2ff6d89501ea557a6",
    "added_lines": [
      "Var('chromium_git') + '/chromium/third_party/ffmpeg.git' + '@' + 'a77cdbfeb7b629eb3a5012d7c6c94ef11e0488be',"
    ],
    "removed_lines": [
      "Var('chromium_git') + '/chromium/third_party/ffmpeg.git' + '@' + '239c9f9e275486c051f3313efb6725968bb9a004',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 8"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "bounds check",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4053,
    "id": "CVE-2016-5210",
    "commit_id": "cc98ddf15b449a1446c5d0918ed470731da74e38",
    "added_lines": [
      "rgba(var(--google-grey-600-rgb), .48"
    ],
    "removed_lines": [
      "rgba(var(--google-grey-800-rgb), .4",
      "--cr-slider-disabled-color: var(--google-grey-800"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "INC_DEC"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "buffer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4067,
    "id": "CVE-2016-5223",
    "commit_id": "7db20340321792730c532a8ff9723f1c3ff1e6df",
    "added_lines": [
      "'pdfium_revision': '52ef14e8911f0502b251d1f2ea205f17565a2440',"
    ],
    "removed_lines": [
      "'pdfium_revision': '8779fa8578cf3336ddd4473f833900aba2e595fb',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "integer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4071,
    "id": "CVE-2016-5199",
    "commit_id": "c995d4fe5e96f4d6d4a88b7867279b08e72d2579",
    "added_lines": [],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "off by one",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4072,
    "id": "CVE-2016-5200",
    "commit_id": "2f19869af13bbfdcfd682a55c0d2c61c6e102475",
    "added_lines": [
      "return url_formatter::ElideHost(rp_id_url, gfx::FontList(), kDialogWidth"
    ],
    "removed_lines": [
      "auto max_static_string_length = gfx::GetStringWidthF",
      "l10n_util::GetStringUTF16(IDS_WEBAUTHN_GENERIC_TITLE), gfx::FontList(),",
      "gfx::Typesetter::DEFAULT",
      "return url_formatter::ElideHost(rp_id_url, gfx::FontList(),",
      "kDialogWidth - max_static_string_length"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "RETURN"
    ],
    "unsafe_features": [
      "INDEX_OP",
      "RETURN",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4086,
    "id": "CVE-2018-18335",
    "commit_id": "222d3f43510ca241ec3d781c87c0e974ea846d39",
    "added_lines": [
      "'skia_revision': '1cb0e3a86df8e127ce810fccb319cc166bd7eaff',"
    ],
    "removed_lines": [
      "'skia_revision': '0c583af06d50cf3a11a39f5804eccdeefd74fc02',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "buffer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4089,
    "id": "CVE-2018-18338",
    "commit_id": "78d89fe556cb5dabbc47b4967cdf55e607e29580",
    "added_lines": [
      "#include \"base/single_thread_task_runner.h\"",
      "#include \"base/threading/thread_checker.h\"",
      "#include \"third_party/blink/renderer/platform/scheduler/public/thread.h\"",
      "void Transfer() final",
      "THREAD_CHECKER(thread_checker_",
      "sk_sp<SkImage> original_skia_image_",
      "scoped_refptr<base::SingleThreadTaskRunner> original_skia_image_task_runner_"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4090,
    "id": "CVE-2018-18339",
    "commit_id": "e34e01b1b0987e418bc22e3ef1cf2e4ecaead264",
    "added_lines": [
      "break",
      "break"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4091,
    "id": "CVE-2018-18340",
    "commit_id": "f5ef337d8fffd10ab327069467ccaedb843cf9db",
    "added_lines": [
      "if (context->IsContextDestroyed())",
      "exception_state.ThrowDOMException(DOMExceptionCode::kNotAllowedError,",
      "\"Execution context is detached.\"",
      "return",
      "DCHECK(stream_->getTracks().size"
    ],
    "removed_lines": [
      "DCHECK(stream_->getTracks().size"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "INDEX_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4092,
    "id": "CVE-2018-18341",
    "commit_id": "dae5b388b44dae4dc11668dba210bbb92d72d969",
    "added_lines": [
      "#include <limits>",
      "TEST(TextCodecUTF8, DecodeOverflow)",
      "TextEncoding encoding(\"UTF-8\"",
      "std::unique_ptr<TextCodec> codec(NewTextCodec(encoding",
      "bool saw_error = false",
      "codec->Decode(\"\\x80\", 1, FlushBehavior::kDoNotFlush, false, saw_error",
      "EXPECT_FALSE(saw_error",
      "EXPECT_DEATH(codec->Decode(nullptr, std::numeric_limits<wtf_size_t>::max(),",
      "FlushBehavior::kDataEOF, false, saw_error),",
      "\"\""
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "buffer overflow",
      "integer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4107,
    "id": "CVE-2018-18356",
    "commit_id": "19dbaec1a04af630ae6b5fb909a37d56d4c8d4ed",
    "added_lines": [
      "'skia_revision': '63bc5891e49e64e632e95719c43fcacfaa64f6ea',"
    ],
    "removed_lines": [
      "'skia_revision': '198b87e5be2083d15901a91c82caad1912e8209a',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 7"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "use after free",
      "integer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4124,
    "id": "CVE-2018-17470",
    "commit_id": "385508dc888ef15d272cdd2705b17996abc519d6",
    "added_lines": [],
    "removed_lines": [
      "use_shadowed_tex_level_params"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 4137,
    "id": "CVE-2018-6038",
    "commit_id": "9b99a43fc119a2533a87e2357cad8f603779a7b9",
    "added_lines": [
      "const PixelStoreParams& unpack_params,"
    ],
    "removed_lines": [
      "unsigned unpack_alignment,"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "out of bounds memory read"
    ]
  },
  {
    "index": 4158,
    "id": "CVE-2018-6094",
    "commit_id": "0749ec24fae74ec32d0567eef0e5ec43c84dbcb9",
    "added_lines": [
      "HeapObjectHeader::fromPayload(t)->checkHeader",
      "header->checkHeader",
      "header->checkHeader",
      "header->checkHeader"
    ],
    "removed_lines": [
      "DCHECK(HeapObjectHeader::fromPayload(t)->checkHeader",
      "ASSERT(header->checkHeader",
      "ASSERT(header->checkHeader",
      "ASSERT(header->checkHeader"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4191,
    "id": "CVE-2018-6072",
    "commit_id": "574b1c70e4a094b8257994a1c21a7d86ec037f9a",
    "added_lines": [
      "'pdfium_revision': 'c45271e053c8c458cefa4ccf847c85b7d1df3f09',"
    ],
    "removed_lines": [
      "'pdfium_revision': '12ec6760afd92b63d185854008a55762fe39f866',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 7"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "use after free",
      "integer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4192,
    "id": "CVE-2018-6073",
    "commit_id": "d5fd79c66c041e669cb7cc0d0a41dbcdac886649",
    "added_lines": [
      "Current webgl revision 7c0541da63f571512c49758cbc0767117997a270"
    ],
    "removed_lines": [
      "Current webgl revision aef0b3a79983db6f553f35f6ccd7b9303a72d2fa"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "buffer overflow",
      "out of bounds memory write"
    ]
  },
  {
    "index": 4204,
    "id": "CVE-2017-15408",
    "commit_id": "55dc1f8189d76c7ed7d9d3878c22c08e300669e3",
    "added_lines": [
      "'pdfium_revision': '56ec0818c3ed195c8de2daba951ddbcb4dc7d7bc',"
    ],
    "removed_lines": [
      "'pdfium_revision': '131c0eb2e34ece6ede6288842cb3004ec3c600d4',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "buffer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4205,
    "id": "CVE-2017-15409",
    "commit_id": "514364c76cf143604cb3184c13cee4dc404ebfa3",
    "added_lines": [
      "'skia_revision': 'a83b903b601a28c5e545ba307d6d6c776f1b5660',"
    ],
    "removed_lines": [
      "'skia_revision': 'cfbbcbe5262488bcb6110a27d401d05a04385da1',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "buffer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4208,
    "id": "CVE-2017-15415",
    "commit_id": "dc5edc9c05901feeac616c075d0337e634f3a02a",
    "added_lines": [
      "bool ReadTimeStruct(base::PickleIterator* iter,",
      "struct tm* output,",
      "char* timezone_out,",
      "size_t timezone_out_len)",
      "int result",
      "if (!iter->ReadInt(&result",
      "return false",
      "output->tm_sec = result",
      "if (!iter->ReadInt(&result",
      "return false",
      "output->tm_min = result",
      "if (!iter->ReadInt(&result",
      "return false",
      "output->tm_hour = result",
      "if (!iter->ReadInt(&result",
      "return false",
      "output->tm_mday = result",
      "if (!iter->ReadInt(&result",
      "return false",
      "output->tm_mon = result",
      "if (!iter->ReadInt(&result",
      "return false",
      "output->tm_year = result",
      "if (!iter->ReadInt(&result",
      "return false",
      "output->tm_wday = result",
      "if (!iter->ReadInt(&result",
      "return false",
      "output->tm_yday = result",
      "if (!iter->ReadInt(&result",
      "return false",
      "output->tm_isdst = result",
      "if (!iter->ReadInt(&result",
      "return false",
      "output->tm_gmtoff = result",
      "std::string timezone",
      "if (!iter->ReadString(&timezone",
      "return false",
      "if (timezone_out_len)",
      "const size_t copy_len = std::min(timezone_out_len - 1, timezone.size",
      "memcpy(timezone_out, timezone.data(), copy_len",
      "timezone_out[copy_len] = 0",
      "output->tm_zone = timezone_out",
      "} else",
      "base::AutoLock lock(g_timezones_lock.Get",
      "auto ret_pair = g_timezones.Get().insert(timezone",
      "output->tm_zone = ret_pair.first->c_str",
      "return true",
      "memset(output, 0, sizeof(struct tm",
      "if (!ReadTimeStruct(&iter, output, timezone_out, timezone_out_len))"
    ],
    "removed_lines": [
      "memset(output, 0, sizeof(struct tm",
      "std::string result",
      "std::string timezone",
      "if (!iter.ReadString(&result) ||",
      "!iter.ReadString(&timezone) ||",
      "result.size() != sizeof(struct tm))",
      "return",
      "memcpy(output, result.data(), sizeof(struct tm",
      "if (timezone_out_len)",
      "const size_t copy_len = std::min(timezone_out_len - 1, timezone.size",
      "memcpy(timezone_out, timezone.data(), copy_len",
      "timezone_out[copy_len] = 0",
      "output->tm_zone = timezone_out",
      "} else",
      "base::AutoLock lock(g_timezones_lock.Get",
      "auto ret_pair = g_timezones.Get().insert(timezone",
      "output->tm_zone = ret_pair.first->c_str"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "CONTROL_FLOW",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "MEM_ZERO",
      "SIZE_CHECK",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "MEM_ZERO",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "SIZE_CHECK",
      "INDEX_OP",
      "RETURN",
      "MEM_COPY",
      "SIZE_CHECK",
      "CONTROL_FLOW",
      "INDEX_OP",
      "ARITH_OP",
      "MEM_COPY",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "Incorrect serialization in IPC"
    ]
  },
  {
    "index": 4209,
    "id": "CVE-2017-15416",
    "commit_id": "11bd4bc92f3fe704631e3e6ad1dd1a4351641f7c",
    "added_lines": [
      "TEST_F(BlobStorageContextTest, NegativeSlice)",
      "const std::string kId1(\"id1\"",
      "const std::string kId2(\"id2\"",
      "std::unique_ptr<BlobDataHandle> handle = SetupBasicBlob(kId1",
      "EXPECT_EQ(1lu, context_->memory_controller().memory_usage",
      "BlobDataBuilder builder(kId2",
      "builder.AppendBlob(kId1, static_cast<uint64_t>(-10), 11",
      "std::unique_ptr<BlobDataHandle> handle2 = context_->BuildBlob",
      "builder, BlobStorageContext::TransportAllowedCallback",
      "EXPECT_TRUE(handle2->IsBroken",
      "EXPECT_EQ(BlobStatus::ERR_INVALID_CONSTRUCTION_ARGUMENTS,",
      "handle2->GetBlobStatus"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "out-of-bounds",
      "buffer overflow",
      "out-of-bounds read",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4210,
    "id": "CVE-2017-15417",
    "commit_id": "46018723e07497bd7b2e1c913840f8dbfb73512c",
    "added_lines": [
      "#   ignore_manifest: Whether to ignore creating manifest.",
      "_ignore_manifest =",
      "defined(invoker.ignore_manifest) && invoker.ignore_manifest",
      "outputs = []",
      "if (!_ignore_manifest)",
      "outputs += [ \"${_output_path}/AndroidManifest.xml\" ]",
      "if (_has_unignored_resources ||",
      "(!_scanned_files.is_manifest_empty && !_ignore_manifest))",
      "if (!_ignore_manifest)",
      "android_manifest = \"${_output_path}/AndroidManifest.xml\""
    ],
    "removed_lines": [
      "outputs = [",
      "\"${_output_path}/AndroidManifest.xml\",",
      "]",
      "if (_has_unignored_resources || !_scanned_files.is_manifest_empty)",
      "android_manifest = \"${_output_path}/AndroidManifest.xml\""
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 2.6,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "inappropriate implementation in skia canvas composite operations"
    ]
  },
  {
    "index": 4211,
    "id": "CVE-2017-15418",
    "commit_id": "328102d194aaaa8b8ad2bf0b93aaa8e5126d863a",
    "added_lines": [
      "'skia_revision': 'f40ae1a4b5365620463bd63b5140bd3fc78894a1',"
    ],
    "removed_lines": [
      "'skia_revision': '94fddf83816ab846a25134dfc845746187b7733b',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": " +Info",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow +Info ",
    "summary": [
      "Use of uninitialized memory in Skia",
      "uninitialized memory"
    ]
  },
  {
    "index": 4220,
    "id": "CVE-2017-15396",
    "commit_id": "99d3c8f639b6ea5fb4e7931547c95cfc79b33d48",
    "added_lines": [
      "Var('chromium_git') + '/chromium/deps/icu.git' + '@' + '7f873c45c23fa1baf1a1d90f449c5c4c34bd8ba6',"
    ],
    "removed_lines": [
      "Var('chromium_git') + '/chromium/deps/icu.git' + '@' + '08cb956852a5ccdba7f9c941728bb833529ba3c6',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "buffer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4221,
    "id": "CVE-2017-15398",
    "commit_id": "7a6484fa7b7f86ea06749bfc9d10bb67b145140b",
    "added_lines": [
      "TEST_F(QuicClientPromisedInfoTest, PushPromiseMissingMethod)",
      "push_promise_.erase(\":method\"",
      "EXPECT_CALL(*connection_,",
      "SendRstStream(promise_id_, QUIC_INVALID_PROMISE_METHOD, 0",
      "ReceivePromise(promise_id_",
      "EXPECT_EQ(session_.GetPromisedById(promise_id_), nullptr",
      "EXPECT_EQ(session_.GetPromisedByUrl(promise_url_), nullptr"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 7.5,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "buffer overflow",
      "code execution"
    ]
  },
  {
    "index": 4223,
    "id": "CVE-2017-5125",
    "commit_id": "1a90b2996bfd341a04073f0054047073865b485d",
    "added_lines": [],
    "removed_lines": [
      "#ifndef CHROME_BROWSER_PUSH_MESSAGING_PUSH_MESSAGING_SERVICE_OBSERVER_ANDROID_H_",
      "#define CHROME_BROWSER_PUSH_MESSAGING_PUSH_MESSAGING_SERVICE_OBSERVER_ANDROID_H_",
      "#include \"chrome/browser/push_messaging/push_messaging_service_observer.h\"",
      "#include <jni.h>",
      "#include \"base/macros.h\"",
      "class PushMessagingServiceObserverAndroid",
      ": public PushMessagingServiceObserver",
      "public:",
      "PushMessagingServiceObserverAndroid() = default",
      "void OnMessageHandled() override",
      "private:",
      "DISALLOW_COPY_AND_ASSIGN(PushMessagingServiceObserverAndroid",
      "#endif  // CHROME_BROWSER_PUSH_MESSAGING_PUSH_MESSAGING_SERVICE_OBSERVER_ANDROID_H_"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "buffer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4225,
    "id": "CVE-2017-5128",
    "commit_id": "09a81d3609c63f62d4775e087cbefdd7468da170",
    "added_lines": [
      "Current webgl revision 12192b948daa2d83269ab46cbf03d65e9f2a48a3"
    ],
    "removed_lines": [
      "Current webgl revision 34842fa3c36988840c89f5bc6a68503175acf7d9"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "buffer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4227,
    "id": "CVE-2017-5132",
    "commit_id": "baac8ed132e87c88164423e921b6b4a4352aae62",
    "added_lines": [
      "b039e95b069e710150fc8d14ae205f581004eda4"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4228,
    "id": "CVE-2017-5130",
    "commit_id": "ce1446c00f0fd8f5a3b00727421be2124cb7370f",
    "added_lines": [
      "#ifndef __XML_VERSION_H__",
      "#define __XML_VERSION_H__",
      "#include <libxml/xmlexports.h>",
      "#ifdef __cplusplus",
      "extern \"C\"",
      "#endif",
      "#ifndef LIBXML2_COMPILING_MSCCDEF",
      "XMLPUBFUN void XMLCALL xmlCheckVersion(int version",
      "#endif",
      "#define LIBXML_DOTTED_VERSION \"2.9.4\"",
      "#define LIBXML_VERSION 20904",
      "#define LIBXML_VERSION_STRING \"20904\"",
      "#define LIBXML_VERSION_EXTRA \"\"",
      "#define LIBXML_TEST_VERSION xmlCheckVersion(20904",
      "#ifndef VMS",
      "#if 0",
      "#define WITH_TRIO",
      "#else",
      "#define WITHOUT_TRIO",
      "#endif",
      "#else",
      "#define WITH_TRIO 1",
      "#endif",
      "#if 1",
      "#if defined(_REENTRANT) || defined(__MT__) || \\",
      "(defined(_POSIX_C_SOURCE) && (_POSIX_C_SOURCE - 0 >= 199506L",
      "#define LIBXML_THREAD_ENABLED",
      "#endif",
      "#endif",
      "#if 0",
      "#define LIBXML_THREAD_ALLOC_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_TREE_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_OUTPUT_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_PUSH_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_READER_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_PATTERN_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_WRITER_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_SAX1_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_FTP_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_HTTP_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_VALID_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_HTML_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_LEGACY_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_C14N_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_CATALOG_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_DOCB_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_XPATH_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_XPTR_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_XINCLUDE_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_ICONV_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_ICU_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_ISO8859X_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_DEBUG_ENABLED",
      "#endif",
      "#if 0",
      "#define DEBUG_MEMORY_LOCATION",
      "#endif",
      "#if 0",
      "#define LIBXML_DEBUG_RUNTIME",
      "#endif",
      "#if 0",
      "#define LIBXML_UNICODE_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_REGEXP_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_AUTOMATA_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_EXPR_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_SCHEMAS_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_SCHEMATRON_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_MODULES_ENABLED",
      "#define LIBXML_MODULE_EXTENSION \".dll\"",
      "#endif",
      "#if 0",
      "#define LIBXML_ZLIB_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_LZMA_ENABLED",
      "#endif",
      "#ifdef __GNUC__",
      "#ifdef HAVE_ANSIDECL_H",
      "#include <ansidecl.h>",
      "#endif",
      "#ifndef ATTRIBUTE_UNUSED",
      "# if ((__GNUC__ > 2) || ((__GNUC__ == 2) && (__GNUC_MINOR__ >= 7",
      "#  define ATTRIBUTE_UNUSED __attribute__((unused",
      "# else",
      "#  define ATTRIBUTE_UNUSED",
      "# endif",
      "#endif",
      "#ifndef LIBXML_ATTR_ALLOC_SIZE",
      "# if (!defined(__clang__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 3",
      "#  define LIBXML_ATTR_ALLOC_SIZE(x) __attribute__((alloc_size(x",
      "# else",
      "#  define LIBXML_ATTR_ALLOC_SIZE(x",
      "# endif",
      "#else",
      "# define LIBXML_ATTR_ALLOC_SIZE(x",
      "#endif",
      "#ifndef LIBXML_ATTR_FORMAT",
      "# if ((__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3",
      "#  define LIBXML_ATTR_FORMAT(fmt,args) __attribute__((__format__(__printf__,fmt,args",
      "# else",
      "#  define LIBXML_ATTR_FORMAT(fmt,args",
      "# endif",
      "#else",
      "# define LIBXML_ATTR_FORMAT(fmt,args",
      "#endif",
      "#else",
      "#define ATTRIBUTE_UNUSED",
      "#define LIBXML_ATTR_ALLOC_SIZE(x",
      "#define LIBXML_ATTR_FORMAT(fmt,args",
      "#endif",
      "#ifdef __cplusplus",
      "#endif",
      "#endif"
    ],
    "removed_lines": [
      "#ifndef __XML_VERSION_H__",
      "#define __XML_VERSION_H__",
      "#include <libxml/xmlexports.h>",
      "#ifdef __cplusplus",
      "extern \"C\"",
      "#endif",
      "#ifndef LIBXML2_COMPILING_MSCCDEF",
      "XMLPUBFUN void XMLCALL xmlCheckVersion(int version",
      "#endif",
      "#define LIBXML_DOTTED_VERSION \"2.9.4\"",
      "#define LIBXML_VERSION 20904",
      "#define LIBXML_VERSION_STRING \"20904\"",
      "#define LIBXML_VERSION_EXTRA \"\"",
      "#define LIBXML_TEST_VERSION xmlCheckVersion(20904",
      "#ifndef VMS",
      "#if 0",
      "#define WITH_TRIO",
      "#else",
      "#define WITHOUT_TRIO",
      "#endif",
      "#else",
      "#define WITH_TRIO 1",
      "#endif",
      "#if 1",
      "#if defined(_REENTRANT) || defined(__MT__) || \\",
      "(defined(_POSIX_C_SOURCE) && (_POSIX_C_SOURCE - 0 >= 199506L",
      "#define LIBXML_THREAD_ENABLED",
      "#endif",
      "#endif",
      "#if 0",
      "#define LIBXML_THREAD_ALLOC_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_TREE_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_OUTPUT_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_PUSH_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_READER_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_PATTERN_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_WRITER_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_SAX1_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_FTP_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_HTTP_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_VALID_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_HTML_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_LEGACY_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_C14N_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_CATALOG_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_DOCB_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_XPATH_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_XPTR_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_XINCLUDE_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_ICONV_ENABLED",
      "#endif",
      "#if 1",
      "#define LIBXML_ICU_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_ISO8859X_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_DEBUG_ENABLED",
      "#endif",
      "#if 0",
      "#define DEBUG_MEMORY_LOCATION",
      "#endif",
      "#if 0",
      "#define LIBXML_DEBUG_RUNTIME",
      "#endif",
      "#if 0",
      "#define LIBXML_UNICODE_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_REGEXP_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_AUTOMATA_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_EXPR_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_SCHEMAS_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_SCHEMATRON_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_MODULES_ENABLED",
      "#define LIBXML_MODULE_EXTENSION \".dll\"",
      "#endif",
      "#if 0",
      "#define LIBXML_ZLIB_ENABLED",
      "#endif",
      "#if 0",
      "#define LIBXML_LZMA_ENABLED",
      "#endif",
      "#ifdef __GNUC__",
      "#ifdef HAVE_ANSIDECL_H",
      "#include <ansidecl.h>",
      "#endif",
      "#ifndef ATTRIBUTE_UNUSED",
      "# if ((__GNUC__ > 2) || ((__GNUC__ == 2) && (__GNUC_MINOR__ >= 7",
      "#  define ATTRIBUTE_UNUSED __attribute__((unused",
      "# else",
      "#  define ATTRIBUTE_UNUSED",
      "# endif",
      "#endif",
      "#ifndef LIBXML_ATTR_ALLOC_SIZE",
      "# if (!defined(__clang__) && ((__GNUC__ > 4) || ((__GNUC__ == 4) && (__GNUC_MINOR__ >= 3",
      "#  define LIBXML_ATTR_ALLOC_SIZE(x) __attribute__((alloc_size(x",
      "# else",
      "#  define LIBXML_ATTR_ALLOC_SIZE(x",
      "# endif",
      "#else",
      "# define LIBXML_ATTR_ALLOC_SIZE(x",
      "#endif",
      "#ifndef LIBXML_ATTR_FORMAT",
      "# if ((__GNUC__ > 3) || ((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3",
      "#  define LIBXML_ATTR_FORMAT(fmt,args) __attribute__((__format__(__printf__,fmt,args",
      "# else",
      "#  define LIBXML_ATTR_FORMAT(fmt,args",
      "# endif",
      "#else",
      "# define LIBXML_ATTR_FORMAT(fmt,args",
      "#endif",
      "#else",
      "#define ATTRIBUTE_UNUSED",
      "#define LIBXML_ATTR_ALLOC_SIZE(x",
      "#define LIBXML_ATTR_FORMAT(fmt,args",
      "#endif",
      "#ifdef __cplusplus",
      "#endif",
      "#endif"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": " Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONDITIONAL",
      "INDEX_OP",
      "CONDITIONAL"
    ],
    "unsafe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONDITIONAL",
      "INDEX_OP",
      "CONDITIONAL"
    ],
    "vuln": "Overflow Mem. Corr. ",
    "summary": [
      "heap corruption",
      "integer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4229,
    "id": "CVE-2017-5131",
    "commit_id": "e2b929d9e09c8701f0c07d740f41356a56d75d17",
    "added_lines": [
      "'skia_revision': '25954b64c066b143819bc720b20a9b4287042ecc',"
    ],
    "removed_lines": [
      "'skia_revision': '15bb26ec70c9df6dbfc259918d9d9b0d8b2fcccc',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "out-of-bounds",
      "out-of-bounds write",
      "integer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4243,
    "id": "CVE-2019-5829",
    "commit_id": "17368442aec0f48859a3561ae5e441175c7041ba",
    "added_lines": [
      "if (base::ContainsKey(downloads_, id",
      "return nullptr",
      "if (download)",
      "for (auto& observer : observers_",
      "observer.OnDownloadCreated(this, download",
      "OnNewDownloadCreated(download"
    ],
    "removed_lines": [
      "DCHECK(!base::ContainsKey(downloads_, id",
      "for (auto& observer : observers_",
      "observer.OnDownloadCreated(this, download",
      "OnNewDownloadCreated(download"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "unsafe_features": [
      "NO_OP",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow",
      "out of bounds memory access"
    ]
  },
  {
    "index": 4248,
    "id": "CVE-2019-5836",
    "commit_id": "33ab1fd4e5582e8c046b9c9559fcb25dd75298be",
    "added_lines": [
      "mTextLine1.layout(0, t, mTextRight, b",
      "mAnswerImage.layout(mTextRight - imageWidth, t, mTextRight, b",
      "mTextLine2.layout(0, t, mTextRight - (imageWidth + imageSpacing), b"
    ],
    "removed_lines": [
      "mTextLine1.layout(0, t, mTextRight - mSuggestionViewStartOffset, b",
      "mAnswerImage.layout",
      "mTextRight - imageWidth, t, mTextRight - mSuggestionViewStartOffset, b",
      "mTextLine2.layout(0, t,",
      "mTextRight - (imageWidth + imageSpacing) - mSuggestionViewStartOffset, b"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "buffer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4254,
    "id": "CVE-2019-5827",
    "commit_id": "517ac71c9ee27f856f9becde8abea7d1604af9d4",
    "added_lines": [
      "From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001",
      "From: Darwin Huang <huangdarwin@chromium.org>",
      "Date: Mon, 15 Apr 2019 14:10:58 -0700",
      "Subject: [PATCH 15/15] Use 64-bit memory allocator in extensions",
      "This backports https://www.sqlite.org/src/ci/07ee06fd390bfebe",
      "Bug: 952406",
      "---",
      ".../sqlite/patched/ext/fts3/fts3_snippet.c    |  7 ++++---",
      ".../sqlite/patched/ext/fts3/fts3_test.c       |  6 +++---",
      ".../patched/ext/fts3/fts3_tokenize_vtab.c     |  2 +-",
      ".../sqlite/patched/ext/fts3/fts3_tokenizer.c  |  4 ++--",
      ".../sqlite/patched/ext/fts3/fts3_write.c      | 19 +++++++++---------",
      ".../sqlite/patched/ext/fts5/fts5_tokenize.c   |  2 +-",
      ".../sqlite/patched/ext/rtree/geopoly.c        | 20 +++++++++----------",
      "7 files changed, 31 insertions(+), 29 deletions(-",
      "diff --git a/third_party/sqlite/patched/ext/fts3/fts3_snippet.c b/third_party/sqlite/patched/ext/fts3/fts3_snippet.c",
      "index 953dd1954da1..80ee237ce5fc 100644",
      "--- a/third_party/sqlite/patched/ext/fts3/fts3_snippet.c",
      "@@ -130,10 +130,11 @@ struct StrBuffer",
      "static MatchinfoBuffer *fts3MIBufferNew(int nElem, const char *zMatchinfo",
      "MatchinfoBuffer *pRet",
      "-  int nByte = sizeof(u32) * (2*nElem + 1) + sizeof(MatchinfoBuffer",
      "-  int nStr = (int)strlen(zMatchinfo",
      "+  sqlite3_int64 nByte = sizeof(u32) * (2*(sqlite3_int64)nElem + 1",
      "+                           + sizeof(MatchinfoBuffer",
      "+  sqlite3_int64 nStr = strlen(zMatchinfo",
      "-  pRet = sqlite3_malloc(nByte + nStr+1",
      "+  pRet = sqlite3_malloc64(nByte + nStr+1",
      "if( pRet",
      "memset(pRet, 0, nByte",
      "pRet->aMatchinfo[0] = (u8*)(&pRet->aMatchinfo[1]) - (u8*)pRet",
      "diff --git a/third_party/sqlite/patched/ext/fts3/fts3_test.c b/third_party/sqlite/patched/ext/fts3/fts3_test.c",
      "index 01aa8e96fd46..6d1be6a1193b 100644",
      "--- a/third_party/sqlite/patched/ext/fts3/fts3_test.c",
      "@@ -448,14 +448,14 @@ static int testTokenizerNext",
      "}else",
      "const char *pToken = p",
      "-    int nToken",
      "+    sqlite3_int64 nToken",
      "while( p<pEnd && testIsTokenChar(*p) ) p++",
      "-    nToken = (int)(p-pToken",
      "+    nToken = (sqlite3_int64)(p-pToken",
      "if( nToken>pCsr->nBuffer",
      "sqlite3_free(pCsr->aBuffer",
      "-      pCsr->aBuffer = sqlite3_malloc(nToken",
      "+      pCsr->aBuffer = sqlite3_malloc64(nToken",
      "if( pCsr->aBuffer==0",
      "rc = SQLITE_NOMEM",
      "diff --git a/third_party/sqlite/patched/ext/fts3/fts3_tokenize_vtab.c b/third_party/sqlite/patched/ext/fts3/fts3_tokenize_vtab.c",
      "index 6dfde7b91b66..73412ff3b4bb 100644",
      "--- a/third_party/sqlite/patched/ext/fts3/fts3_tokenize_vtab.c",
      "@@ -346,7 +346,7 @@ static int fts3tokFilterMethod",
      "if( idxNum==1",
      "const char *zByte = (const char *)sqlite3_value_text(apVal[0]",
      "int nByte = sqlite3_value_bytes(apVal[0]",
      "-    pCsr->zInput = sqlite3_malloc(nByte+1",
      "+    pCsr->zInput = sqlite3_malloc64(nByte+1",
      "if( pCsr->zInput==0",
      "rc = SQLITE_NOMEM",
      "}else",
      "diff --git a/third_party/sqlite/patched/ext/fts3/fts3_tokenizer.c b/third_party/sqlite/patched/ext/fts3/fts3_tokenizer.c",
      "index c8900fb3c331..30441dfcc7cf 100644",
      "--- a/third_party/sqlite/patched/ext/fts3/fts3_tokenizer.c",
      "@@ -194,8 +194,8 @@ int sqlite3Fts3InitTokenizer",
      "int iArg = 0",
      "z = &z[n+1]",
      "while( z<zEnd && (NULL!=(z = (char *)sqlite3Fts3NextToken(z, &n)))",
      "-      int nNew = sizeof(char *)*(iArg+1",
      "-      char const **aNew = (const char **)sqlite3_realloc((void *)aArg, nNew",
      "+      sqlite3_int64 nNew = sizeof(char *)*(iArg+1",
      "+      char const **aNew = (const char **)sqlite3_realloc64((void *)aArg, nNew",
      "if( !aNew",
      "sqlite3_free(zCopy",
      "sqlite3_free((void *)aArg",
      "diff --git a/third_party/sqlite/patched/ext/fts3/fts3_write.c b/third_party/sqlite/patched/ext/fts3/fts3_write.c",
      "index e368c09247d6..2de4b2cc0612 100644",
      "--- a/third_party/sqlite/patched/ext/fts3/fts3_write.c",
      "@@ -1750,8 +1750,9 @@ int sqlite3Fts3SegReaderPending",
      "if( nElem>0",
      "-    int nByte = sizeof(Fts3SegReader) + (nElem+1)*sizeof(Fts3HashElem *",
      "-    pReader = (Fts3SegReader *)sqlite3_malloc(nByte",
      "+    sqlite3_int64 nByte",
      "+    nByte = sizeof(Fts3SegReader) + (nElem+1)*sizeof(Fts3HashElem *",
      "+    pReader = (Fts3SegReader *)sqlite3_malloc64(nByte",
      "if( !pReader",
      "rc = SQLITE_NOMEM",
      "}else",
      "@@ -3363,7 +3364,7 @@ static void fts3InsertDocsize",
      "int rc;",
      "if( *pRC ) return",
      "-  pBlob = sqlite3_malloc( 10*p->nColumn",
      "+  pBlob = sqlite3_malloc64( 10*(sqlite3_int64)p->nColumn",
      "if( pBlob==0",
      "return",
      "@@ -3413,7 +3414,7 @@ static void fts3UpdateDocTotals",
      "const int nStat = p->nColumn+2",
      "if( *pRC ) return",
      "-  a = sqlite3_malloc( (sizeof(u32)+10)*nStat",
      "+  a = sqlite3_malloc64( (sizeof(u32)+10)*(sqlite3_int64)nStat",
      "if( a==0",
      "return",
      "@@ -3534,8 +3535,8 @@ static int fts3DoRebuild(Fts3Table *p",
      "if( rc==SQLITE_OK",
      "-      int nByte = sizeof(u32) * (p->nColumn+1)*3",
      "-      aSz = (u32 *)sqlite3_malloc(nByte",
      "+      sqlite3_int64 nByte = sizeof(u32) * ((sqlite3_int64)p->nColumn+1)*3",
      "+      aSz = (u32 *)sqlite3_malloc64(nByte",
      "if( aSz==0",
      "rc = SQLITE_NOMEM",
      "}else",
      "@@ -3601,12 +3602,12 @@ static int fts3IncrmergeCsr",
      "int rc;",
      "sqlite3_stmt *pStmt = 0;",
      "-  int nByte;",
      "+  sqlite3_int64 nByte;",
      "memset(pCsr, 0, sizeof(*pCsr",
      "nByte = sizeof(Fts3SegReader *) * nSeg",
      "-  pCsr->apSegment = (Fts3SegReader **)sqlite3_malloc(nByte",
      "+  pCsr->apSegment = (Fts3SegReader **)sqlite3_malloc64(nByte",
      "if( pCsr->apSegment==0",
      "rc = SQLITE_NOMEM",
      "@@ -5586,7 +5587,7 @@ int sqlite3Fts3UpdateMethod",
      "-  aSzDel = sqlite3_malloc( sizeof(aSzDel[0])*(p->nColumn+1)*2",
      "+  aSzDel = sqlite3_malloc64(sizeof(aSzDel[0])*((sqlite3_int64)p->nColumn+1)*2",
      "if( aSzDel==0",
      "rc = SQLITE_NOMEM",
      "goto update_out",
      "diff --git a/third_party/sqlite/patched/ext/fts5/fts5_tokenize.c b/third_party/sqlite/patched/ext/fts5/fts5_tokenize.c",
      "index b39221bc2533..42b1e0447d8b 100644",
      "--- a/third_party/sqlite/patched/ext/fts5/fts5_tokenize.c",
      "@@ -369,7 +369,7 @@ static int fts5UnicodeCreate",
      "p->eRemoveDiacritic = FTS5_REMOVE_DIACRITICS_SIMPLE",
      "p->nFold = 64",
      "-      p->aFold = sqlite3_malloc(p->nFold * sizeof(char",
      "+      p->aFold = sqlite3_malloc64(p->nFold * sizeof(char",
      "if( p->aFold==0",
      "rc = SQLITE_NOMEM",
      "diff --git a/third_party/sqlite/patched/ext/rtree/geopoly.c b/third_party/sqlite/patched/ext/rtree/geopoly.c",
      "index 3652d14a1f37..e4bb5798972b 100644",
      "--- a/third_party/sqlite/patched/ext/rtree/geopoly.c",
      "@@ -269,7 +269,7 @@ static GeoPoly *geopolyParseJson(const unsigned char *z, int *pRc",
      "GeoPoly *pOut",
      "int x = 1",
      "s.nVertex--;",
      "-      pOut = sqlite3_malloc64( GEOPOLY_SZ(s.nVertex)",
      "+      pOut = sqlite3_malloc64( GEOPOLY_SZ((sqlite3_int64)s.nVertex)",
      "x = 1",
      "if( pOut==0 ) goto parse_json_err",
      "pOut->nVertex = s.nVertex",
      "@@ -655,7 +655,7 @@ static GeoPoly *geopolyBBox",
      "if( pRc ) *pRc = SQLITE_OK",
      "if( aCoord==0",
      "geopolyBboxFill:",
      "-      pOut = sqlite3_realloc(p, GEOPOLY_SZ(4",
      "+      pOut = sqlite3_realloc64(p, GEOPOLY_SZ(4",
      "if( pOut==0",
      "sqlite3_free(p",
      "if( context ) sqlite3_result_error_nomem(context",
      "@@ -1051,9 +1051,9 @@ static GeoSegment *geopolySortSegmentsByYAndC(GeoSegment *pList",
      "static int geopolyOverlap(GeoPoly *p1, GeoPoly *p2",
      "-  int nVertex = p1->nVertex + p2->nVertex + 2",
      "+  sqlite3_int64 nVertex = p1->nVertex + p2->nVertex + 2",
      "GeoOverlap *p",
      "-  int nByte",
      "+  sqlite3_int64 nByte",
      "GeoEvent *pThisEvent",
      "double rX",
      "int rc = 0",
      "@@ -1065,7 +1065,7 @@ static int geopolyOverlap(GeoPoly *p1, GeoPoly *p2",
      "nByte = sizeof(GeoEvent)*nVertex*2",
      "+ sizeof(GeoSegment)*nVertex",
      "+ sizeof(GeoOverlap",
      "-  p = sqlite3_malloc( nByte",
      "+  p = sqlite3_malloc64( nByte",
      "if( p==0 ) return -1",
      "p->aEvent = (GeoEvent*)&p[1]",
      "p->aSegment = (GeoSegment*)&p->aEvent[nVertex*2]",
      "@@ -1224,8 +1224,8 @@ static int geopolyInit",
      "int rc = SQLITE_OK",
      "Rtree *pRtree",
      "-  int nDb;",
      "-  int nName;",
      "+  sqlite3_int64 nDb;",
      "+  sqlite3_int64 nName;",
      "sqlite3_str *pSql",
      "char *zSql",
      "int ii",
      "@@ -1233,9 +1233,9 @@ static int geopolyInit",
      "sqlite3_vtab_config(db, SQLITE_VTAB_CONSTRAINT_SUPPORT, 1",
      "-  nDb = (int)strlen(argv[1]",
      "-  nName = (int)strlen(argv[2]",
      "-  pRtree = (Rtree *)sqlite3_malloc(sizeof(Rtree)+nDb+nName+2",
      "+  nDb = strlen(argv[1]",
      "+  nName = strlen(argv[2]",
      "+  pRtree = (Rtree *)sqlite3_malloc64(sizeof(Rtree)+nDb+nName+2",
      "if( !pRtree",
      "return SQLITE_NOMEM",
      "--",
      "2.21.0.392.gf8f6787159e-goog"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "MEM_ZERO",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "INDEX_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "MEM_ZERO",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "INDEX_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "SIZE_CHECK",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "SIZE_CHECK",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "integer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4255,
    "id": "CVE-2019-5824",
    "commit_id": "cfb022640b5eec337b06f88a485487dc92ca1ac1",
    "added_lines": [
      "render_process_id_, render_frame_id_, requester_id_, page_request_id,"
    ],
    "removed_lines": [
      "render_process_id_, render_frame_id_, page_request_id, requester_id_,"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4258,
    "id": "CVE-2019-5806",
    "commit_id": "77bc309e4333f7b8523d4b3fd100cd9027942f80",
    "added_lines": [
      "'angle_revision': '3e8a8d5b8567d08855d500c85bcf7cdcc4653f9a',"
    ],
    "removed_lines": [
      "'angle_revision': 'f2bf49e20849a2b95e0e962a3779e3258307e857',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "integer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4267,
    "id": "CVE-2019-5817",
    "commit_id": "d8cb3a5cfade5fd81d42b1507a4a73c0c3ea033a",
    "added_lines": [
      "'angle_revision': '896e7ded5f25c36f802ed7dd839f8790d16aed23',"
    ],
    "removed_lines": [
      "'angle_revision': '12b25347dc68d4666b41d0fc116f7a6e0ae9ab85',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "buffer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4270,
    "id": "CVE-2019-5820",
    "commit_id": "dfa3bea5f1a205d33a822a935ee2a57d22607ada",
    "added_lines": [
      "'pdfium_revision': '1ec1b5c170014512318c8ae00039ef7754993cd0',"
    ],
    "removed_lines": [
      "'pdfium_revision': '762247be1246942790637504f6a726f522a3b399',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "integer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4271,
    "id": "CVE-2019-5821",
    "commit_id": "dfa3bea5f1a205d33a822a935ee2a57d22607ada",
    "added_lines": [
      "'pdfium_revision': '1ec1b5c170014512318c8ae00039ef7754993cd0',"
    ],
    "removed_lines": [
      "'pdfium_revision': '762247be1246942790637504f6a726f522a3b399',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "integer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4275,
    "id": "CVE-2019-5788",
    "commit_id": "b38064dbb21aaf32151073dcb7d594b240c68f73",
    "added_lines": [
      "using OperationID = uint64_t"
    ],
    "removed_lines": [
      "using OperationID = int"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 9.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "use-after-free",
      "integer overflow"
    ]
  },
  {
    "index": 4276,
    "id": "CVE-2019-5789",
    "commit_id": "c3fe3dc27d10a53a54bb5231b6fce07318af952f",
    "added_lines": [
      "#include <memory>",
      "#include <vector>",
      "#include \"base/compiler_specific.h\"",
      "#include \"base/thread_annotations.h\"",
      "using InstanceId = int64_t",
      "bool BindInstance() WARN_UNUSED_RESULT",
      "bool UnbindInstance() WARN_UNUSED_RESULT",
      "void OverflowInstanceIdForTesting",
      "static constexpr TaskService::InstanceId kInvalidInstanceId = -1",
      "InstanceId next_instance_id_ = kInvalidInstanceId",
      "scoped_refptr<base::SingleThreadTaskRunner> default_task_runner_",
      "GUARDED_BY(lock_",
      "std::vector<std::unique_ptr<base::Thread>> threads_ GUARDED_BY(lock_",
      "InstanceId bound_instance_id_ GUARDED_BY(lock_) = kInvalidInstanceId",
      "base::Lock lock_",
      "base::ConditionVariable no_tasks_in_flight_cv_",
      "GUARDED_BY(tasks_in_flight_lock_",
      "int tasks_in_flight_ GUARDED_BY(tasks_in_flight_lock_) = 0",
      "base::Lock tasks_in_flight_lock_"
    ],
    "removed_lines": [
      "using InstanceId = int",
      "bool BindInstance",
      "bool UnbindInstance",
      "scoped_refptr<base::SingleThreadTaskRunner> default_task_runner_",
      "std::vector<std::unique_ptr<base::Thread>> threads_",
      "base::Lock tasks_in_flight_lock_",
      "base::ConditionVariable no_tasks_in_flight_cv_",
      "int tasks_in_flight_",
      "InstanceId next_instance_id_",
      "InstanceId bound_instance_id_",
      "base::Lock lock_"
    ],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 9.3,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "use-after-free",
      "integer overflow"
    ]
  },
  {
    "index": 4277,
    "id": "CVE-2019-5790",
    "commit_id": "88fcb3a6899d77b64195423333ad81a00803f997",
    "added_lines": [
      "resource_request.SetHasUserGesture(Frame::HasTransientUserActivation",
      "document_under_mouse_ ? document_under_mouse_->GetFrame() : nullptr"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 4278,
    "id": "CVE-2019-5792",
    "commit_id": "227851d714bdc081de4c7e81669420380fa6c000",
    "added_lines": [
      "#include \"chrome/browser/ui/browser.h\"",
      "#include \"chrome/test/base/test_browser_window.h\"",
      "#include \"chrome/test/base/test_browser_window_aura.h\"",
      "#include \"ui/compositor/layer.h\"",
      "#include \"ui/compositor/layer_tree_owner.h\"",
      "std::unique_ptr<TestBrowserWindow> CreateTestBrowserWindow",
      "aura::Window* parent)",
      "auto window =",
      "std::make_unique<aura::Window>(nullptr, aura::client::WINDOW_TYPE_NORMAL",
      "window->Init(ui::LAYER_TEXTURED",
      "window->SetBounds(gfx::Rect(0, 0, 200, 200",
      "parent->AddChild(window.get",
      "return std::make_unique<TestBrowserWindowAura>(std::move(window",
      "ui::Layer* FindLayer(ui::Layer* root, ui::Layer* target)",
      "if (root == target",
      "return target",
      "for (auto* child : root->children())",
      "auto* result = FindLayer(child, target",
      "if (result",
      "return result",
      "return nullptr",
      "TestingProfile* profile() const { return profile_.get();",
      "base::ScopedTempDir temp_dir_",
      "TEST_F(ArcVoiceInteractionFrameworkServiceTest,",
      "CapturingScreenshotBlocksIncognitoWindows)",
      "auto browser_window =",
      "CreateTestBrowserWindow(ash::Shell::GetPrimaryRootWindow",
      "Browser::CreateParams params(profile(), true",
      "params.type = Browser::TYPE_TABBED",
      "params.window = browser_window.get",
      "Browser browser(params",
      "browser_window->GetNativeWindow()->Show",
      "profile()->ForceIncognito(true",
      "auto* old_layer = browser_window->GetNativeWindow()->layer",
      "auto layer_owner = framework_service()->CreateLayerTreeForSnapshotForTesting",
      "ash::Shell::GetPrimaryRootWindow",
      "EXPECT_FALSE(FindLayer(layer_owner->root(), old_layer",
      "profile()->ForceIncognito(false",
      "old_layer = browser_window->GetNativeWindow()->layer",
      "layer_owner = framework_service()->CreateLayerTreeForSnapshotForTesting",
      "ash::Shell::GetPrimaryRootWindow",
      "EXPECT_TRUE(FindLayer(layer_owner->root(), old_layer",
      "ash::Shell::GetPrimaryRootWindow()->RemoveChild",
      "browser_window->GetNativeWindow"
    ],
    "removed_lines": [
      "base::ScopedTempDir temp_dir_"
    ],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow",
      "out of bounds memory access"
    ]
  },
  {
    "index": 4281,
    "id": "CVE-2019-5795",
    "commit_id": "2c8502d301e410b09c8b5859268fc297814fbdbb",
    "added_lines": [
      "<structure name=\"IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_SCROLL_MANAGER_EXTRACTED_JS\"",
      "file=\"../../../third_party/polymer/v1_0/components-chromium/iron-overlay-behavior/iron-scroll-manager-extracted.js\"",
      "type=\"chrome_html\"",
      "compress=\"gzip\" />",
      "<structure name=\"IDR_POLYMER_1_0_IRON_OVERLAY_BEHAVIOR_IRON_SCROLL_MANAGER_HTML\"",
      "file=\"../../../third_party/polymer/v1_0/components-chromium/iron-overlay-behavior/iron-scroll-manager.html\"",
      "type=\"chrome_html\"",
      "compress=\"gzip\" />"
    ],
    "removed_lines": [],
    "cause": [
      "Uncategorized Cluster 3",
      "Uncategorized Cluster 5"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "integer overflow",
      "out of bounds memory access"
    ]
  },
  {
    "index": 4298,
    "id": "CVE-2019-5762",
    "commit_id": "02cff454e822c3abb7b04566f7ab9e08d264b3fa",
    "added_lines": [
      "'pdfium_revision': 'a69842065243d364c902875377dc00c4793df686',"
    ],
    "removed_lines": [
      "'pdfium_revision': 'ab688385cfbda27700ebf44263b52866ee95ae26',"
    ],
    "cause": [
      "Uncategorized Cluster 5"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "inappropriate memory management"
    ]
  },
  {
    "index": 4310,
    "id": "CVE-2019-5771",
    "commit_id": "dfe266e269441ae61b64272e5550d44a2c3f7faf",
    "added_lines": [
      "'swiftshader_revision': 'a972758d6e10df761631daf1f33a2ef2a17cb699',"
    ],
    "removed_lines": [
      "'swiftshader_revision': '8f20452b0219dece19a9875bd11c04437a7e3cd4',"
    ],
    "cause": [
      "Logical Flaws"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "An incorrect JIT of GLSL shaders in SwiftShader"
    ]
  },
  {
    "index": 4323,
    "id": "CVE-2018-6154",
    "commit_id": "98095c718d7580b5d6715e5bfd8698234ecb4470",
    "added_lines": [
      "if (!buffer || isContextLost() || !buffer->Validate(ContextGroup(), this",
      "if (!framebuffer || isContextLost() ||",
      "!framebuffer->Validate(ContextGroup(), this",
      "if (!program || isContextLost() || !program->Validate(ContextGroup(), this",
      "if (!renderbuffer || isContextLost() ||",
      "!renderbuffer->Validate(ContextGroup(), this",
      "if (!shader || isContextLost() || !shader->Validate(ContextGroup(), this",
      "if (!texture || isContextLost() || !texture->Validate(ContextGroup(), this"
    ],
    "removed_lines": [
      "if (!buffer || isContextLost",
      "if (!framebuffer || isContextLost",
      "if (!program || isContextLost",
      "if (!renderbuffer || isContextLost",
      "if (!shader || isContextLost",
      "if (!texture || isContextLost"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 2"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP"
    ],
    "unsafe_features": [
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "insufficient data validation",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4325,
    "id": "CVE-2018-6156",
    "commit_id": "77e995d28edc6fb303ceb1d596fdf17b046c3ef6",
    "added_lines": [
      "testcase.showPasteInGearMenu = function()",
      "const entrySet = [ENTRIES.hello, ENTRIES.world]",
      "var appId",
      "StepsRunner.run([",
      "function()",
      "addEntries(['local'], entrySet, this.next",
      "},",
      "function(result)",
      "chrome.test.assertTrue(result",
      "openNewWindow(null, RootPath.DOWNLOADS).then(this.next",
      "},",
      "function(inAppId)",
      "appId = inAppId",
      "remoteCall.waitForElement(appId, '#detail-table').then(this.next",
      "},",
      "function()",
      "remoteCall.waitForFiles(appId, TestEntryInfo.getExpectedRows(entrySet",
      ".then(this.next",
      "},",
      "function()",
      "remoteCall.waitForElement(appId, '#gear-button').then(this.next",
      "},",
      "function()",
      "remoteCall.callRemoteTestUtil",
      "'fakeMouseClick', appId, ['#gear-button'], this.next",
      "},",
      "function(result)",
      "chrome.test.assertTrue(result",
      "remoteCall.waitForElement(appId, '#gear-menu:not([hidden])'",
      ".then(this.next",
      "},",
      "function(result)",
      "remoteCall",
      ".waitForElement",
      "appId,",
      "'#gear-menu cr-menu-item' +",
      "'[command=\\'#paste-into-current-folder\\']' +",
      "'[disabled]:not([hidden])'",
      ".then(this.next",
      "},",
      "function()",
      "remoteCall.callRemoteTestUtil",
      "'fakeMouseClick', appId, ['#file-list'], this.next",
      "},",
      "function()",
      "remoteCall.waitForElement(appId, '#gear-menu[hidden]').then(this.next",
      "},",
      "function(result)",
      "remoteCall.callRemoteTestUtil",
      "'selectFile', appId, [ENTRIES.hello.nameText], this.next",
      "},",
      "function(result)",
      "chrome.test.assertTrue(result",
      "remoteCall.callRemoteTestUtil",
      "'fakeMouseClick', appId, ['#gear-button'], this.next",
      "},",
      "function()",
      "remoteCall",
      ".waitForElement",
      "appId,",
      "'#gear-menu:not([hidden]) cr-menu-item' +",
      "'[command=\\'#paste-into-current-folder\\']' +",
      "'[disabled]:not([hidden])'",
      ".then(this.next",
      "},",
      "function()",
      "remoteCall.callRemoteTestUtil",
      "'fakeMouseClick', appId, ['#file-list'], this.next",
      "},",
      "function()",
      "remoteCall.waitForElement(appId, '#gear-menu[hidden]').then(this.next",
      "},",
      "function(result)",
      "remoteCall.callRemoteTestUtil",
      "'selectFile', appId, [ENTRIES.hello.nameText], this.next",
      "},",
      "function()",
      "remoteCall",
      ".fakeKeyDown(appId, '#file-list', 'c', 'U+0043', true, false, false",
      ".then(this.next",
      "},",
      "function()",
      "remoteCall.callRemoteTestUtil",
      "'fakeMouseClick', appId, ['#gear-button'], this.next",
      "},",
      "function()",
      "remoteCall",
      ".waitForElement",
      "appId,",
      "'#gear-menu:not([hidden])' +",
      "' cr-menu-item[command=\\'#paste-into-current-folder\\']' +",
      "':not([disabled]):not([hidden])'",
      ".then(this.next",
      "},",
      "function()",
      "remoteCall.callRemoteTestUtil",
      "'fakeMouseClick', appId, ['#file-list'], this.next",
      "},",
      "function()",
      "remoteCall.waitForElement(appId, '#gear-menu[hidden]').then(this.next",
      "},",
      "function()",
      "checkIfNoErrorsOccured(this.next",
      "},",
      "]"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4343,
    "id": "CVE-2018-6174",
    "commit_id": "997bfdbc7f496a31e1675680d6b8ca098cd3884c",
    "added_lines": [
      "'swiftshader_revision': 'cbb80f5f0078a9941f3ec43e83e52c3d15a43bea',"
    ],
    "removed_lines": [
      "'swiftshader_revision': 'c8403ec14aaf86e8e62b4284aaec3e1e2f5fa5fc',"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 4360,
    "id": "CVE-2018-16070",
    "commit_id": "67f3f0ce955fd170a3d471dc1458e8ca8d5984c5",
    "added_lines": [
      "'skia_revision': '9f752aada37c9e1e10328721ea0b480553da50d5',"
    ],
    "removed_lines": [
      "'skia_revision': 'faef51451a81dccffcba50b58d9a323bdd9f150c',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Overflow ",
    "summary": [
      "heap corruption",
      "integer overflow",
      "exploit heap corruption"
    ]
  },
  {
    "index": 4403,
    "id": "CVE-2018-6120",
    "commit_id": "1b7273d7a120c7e558287ce6878e8d96d40e3de7",
    "added_lines": [
      "'pdfium_revision': 'e06880f8eb984a48921f0560bd7ab4e055da432d',"
    ],
    "removed_lines": [
      "'pdfium_revision': 'fbecb9a5150d2c5391581933c8089e7249292171',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "ExecCode ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "Exec Code Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds write",
      "integer overflow"
    ]
  },
  {
    "index": 4413,
    "id": "CVE-2016-1678",
    "commit_id": "1f5ad409dbf5334523931df37598ea49e9849c87",
    "added_lines": [],
    "removed_lines": [
      "static scoped_refptr<SiteInstanceImpl> CreateSiteInstance",
      "BrowserContext* browser_context,",
      "const GURL& url)",
      "return SiteInstanceImpl::CreateForURL(browser_context, url",
      "TEST_F(SiteInstanceTest, ProcessSharingByType)",
      "if (AreAllSitesIsolatedForTesting",
      "return",
      "ChildProcessSecurityPolicyImpl* policy =",
      "ChildProcessSecurityPolicyImpl::GetInstance",
      "std::unique_ptr<TestBrowserContext> browser_context(new TestBrowserContext",
      "std::vector<std::unique_ptr<MockRenderProcessHost>> hosts",
      "for (size_t i = 0; i < kMaxRendererProcessCount; ++i)",
      "hosts.push_back",
      "std::make_unique<MockRenderProcessHost>(browser_context.get",
      "hosts[i]->SetIsUsed",
      "RenderProcessHost::SetMaxRendererProcessCount(kMaxRendererProcessCount",
      "scoped_refptr<SiteInstanceImpl> extension1_instance",
      "CreateSiteInstance(browser_context.get(),",
      "GURL(kPrivilegedScheme + std::string(\"://foo/bar\"",
      "set_privileged_process_id(extension1_instance->GetProcess()->GetID",
      "scoped_refptr<SiteInstanceImpl> extension2_instance",
      "CreateSiteInstance(browser_context.get(),",
      "GURL(kPrivilegedScheme + std::string(\"://baz/bar\"",
      "std::unique_ptr<RenderProcessHost> extension_host",
      "extension1_instance->GetProcess",
      "EXPECT_EQ(extension1_instance->GetProcess(),",
      "extension2_instance->GetProcess",
      "scoped_refptr<SiteInstanceImpl> webui1_instance",
      "CreateSiteInstance(browser_context.get(), GetWebUIURL(kChromeUIGpuHost",
      "policy->GrantWebUIBindings(webui1_instance->GetProcess()->GetID(),",
      "BINDINGS_POLICY_WEB_UI",
      "scoped_refptr<SiteInstanceImpl> webui2_instance(CreateSiteInstance",
      "browser_context.get(), GetWebUIURL(kChromeUIMediaInternalsHost",
      "std::unique_ptr<RenderProcessHost> dom_host(webui1_instance->GetProcess",
      "EXPECT_EQ(webui1_instance->GetProcess(), webui2_instance->GetProcess",
      "EXPECT_NE(extension1_instance->GetProcess(), webui1_instance->GetProcess",
      "for (size_t i = 0; i < kMaxRendererProcessCount; ++i)",
      "EXPECT_NE(extension1_instance->GetProcess(), hosts[i].get",
      "EXPECT_NE(webui1_instance->GetProcess(), hosts[i].get",
      "DrainMessageLoop",
      "RenderProcessHost::SetMaxRendererProcessCount(0u"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [],
    "unsafe_features": [
      "NO_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "MEM_ALLOC",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 4415,
    "id": "CVE-2016-1680",
    "commit_id": "81d73a47253db336c6fb2cbfe853e7e85f67afeb",
    "added_lines": [
      "package org.chromium.chrome.browser.preferences",
      "import android.app.Fragment",
      "import android.os.Build",
      "import android.preference.Preference",
      "import android.preference.PreferenceFragment",
      "import android.support.test.InstrumentationRegistry",
      "import android.support.test.filters.SmallTest",
      "import junit.framework.Assert",
      "import org.junit.Before",
      "import org.junit.Rule",
      "import org.junit.Test",
      "import org.junit.runner.RunWith",
      "import org.chromium.base.ApplicationStatus",
      "import org.chromium.base.ThreadUtils",
      "import org.chromium.base.test.util.CommandLineFlags",
      "import org.chromium.base.test.util.DisableIf",
      "import org.chromium.base.test.util.Feature",
      "import org.chromium.base.test.util.ScreenShooter",
      "import org.chromium.chrome.browser.ContentSettingsType",
      "import org.chromium.chrome.browser.ntp.snippets.SnippetsBridge",
      "import org.chromium.chrome.browser.preferences.website.ContentSettingsResources",
      "import org.chromium.chrome.browser.preferences.website.SingleCategoryPreferences",
      "import org.chromium.chrome.browser.test.ChromeBrowserTestRule",
      "import org.chromium.chrome.test.ChromeJUnit4ClassRunner",
      "import org.chromium.content.browser.test.util.Criteria",
      "import org.chromium.content.browser.test.util.CriteriaHelper",
      "@RunWith(ChromeJUnit4ClassRunner.class",
      "public class NotificationsPreferencesTest",
      "@Rule",
      "public final ChromeBrowserTestRule mBrowserTestRule = new ChromeBrowserTestRule",
      "private Preferences mActivity",
      "@Before",
      "public void setUp()",
      "mActivity = PreferencesTest.startPreferences(InstrumentationRegistry.getInstrumentation(),",
      "NotificationsPreferences.class.getName",
      "@Test",
      "@SmallTest",
      "@Feature({\"Preferences\"",
      "@ScreenShooter.Directory(\"Notifications Preferences\"",
      "@DisableIf.Build(sdk_is_greater_than = Build.VERSION_CODES.N",
      "@CommandLineFlags.Add(\"enable-features=ContentSuggestionsNotifications\"",
      "public void testContentSuggestionsToggle()",
      "final PreferenceFragment fragment = (PreferenceFragment) mActivity.getFragmentForTest",
      "final ChromeSwitchPreference toggle = (ChromeSwitchPreference) fragment.findPreference",
      "NotificationsPreferences.PREF_SUGGESTIONS",
      "ThreadUtils.runOnUiThreadBlocking(new Runnable()",
      "@Override",
      "public void run()",
      "boolean initiallyChecked = toggle.isChecked",
      "Assert.assertEquals(toggle.isChecked(),",
      "SnippetsBridge.areContentSuggestionsNotificationsEnabled",
      "PreferencesTest.clickPreference(fragment, toggle",
      "Assert.assertEquals(toggle.isChecked(), !initiallyChecked",
      "Assert.assertEquals(toggle.isChecked(),",
      "SnippetsBridge.areContentSuggestionsNotificationsEnabled",
      "PreferencesTest.clickPreference(fragment, toggle",
      "Assert.assertEquals(toggle.isChecked(), initiallyChecked",
      "Assert.assertEquals(toggle.isChecked(),",
      "SnippetsBridge.areContentSuggestionsNotificationsEnabled",
      "PreferencesTest.clickPreference(fragment, toggle",
      "@Test",
      "@SmallTest",
      "@Feature({\"Preferences\"",
      "@DisableIf.Build(sdk_is_greater_than = Build.VERSION_CODES.N",
      "public void testLinkToWebsiteNotifications()",
      "ThreadUtils.runOnUiThreadBlocking(new Runnable()",
      "@Override",
      "public void run()",
      "PreferenceFragment fragment = (PreferenceFragment) mActivity.getFragmentForTest",
      "Preference fromWebsites =",
      "fragment.findPreference(NotificationsPreferences.PREF_FROM_WEBSITES",
      "PreferencesTest.clickPreference(fragment, fromWebsites",
      "CriteriaHelper.pollUiThread(new Criteria()",
      "@Override",
      "public boolean isSatisfied()",
      "return getTopFragment() instanceof SingleCategoryPreferences",
      "SingleCategoryPreferences fragment = (SingleCategoryPreferences) getTopFragment",
      "Assert.assertTrue(fragment.getCategoryForTest().showNotificationsSites",
      "private static Fragment getTopFragment()",
      "Preferences preferences = (Preferences) ApplicationStatus.getLastTrackedFocusedActivity",
      "return preferences.getFragmentForTest",
      "@Test",
      "@SmallTest",
      "@Feature({\"Preferences\"",
      "@ScreenShooter.Directory(\"Notifications Preferences\"",
      "@DisableIf.Build(sdk_is_greater_than = Build.VERSION_CODES.N",
      "public void testWebsiteNotificationsSummary()",
      "final PreferenceFragment fragment = (PreferenceFragment) mActivity.getFragmentForTest",
      "final Preference fromWebsites =",
      "fragment.findPreference(NotificationsPreferences.PREF_FROM_WEBSITES",
      "ThreadUtils.runOnUiThreadBlocking(new Runnable()",
      "@Override",
      "public void run()",
      "PrefServiceBridge.getInstance().setNotificationsEnabled(false",
      "fragment.onResume",
      "Assert.assertEquals(fromWebsites.getSummary(), getNotificationsSummary(false",
      "PrefServiceBridge.getInstance().setNotificationsEnabled(true",
      "fragment.onResume",
      "Assert.assertEquals(fromWebsites.getSummary(), getNotificationsSummary(true",
      "private String getNotificationsSummary(boolean enabled)",
      "return mActivity.getResources().getString(ContentSettingsResources.getCategorySummary",
      "ContentSettingsType.CONTENT_SETTINGS_TYPE_NOTIFICATIONS, enabled"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS  Mem. Corr.",
    "score": 6.8,
    "safe_features": [
      "NO_OP",
      "MEM_ALLOC",
      "ARITH_OP",
      "MEM_ALLOC",
      "MEM_ALLOC",
      "MEM_ALLOC",
      "RETURN",
      "RETURN",
      "MEM_ALLOC",
      "RETURN"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow Mem. Corr. ",
    "summary": [
      "unknown vectors",
      "use-after-free"
    ]
  },
  {
    "index": 4416,
    "id": "CVE-2016-1681",
    "commit_id": "3a89e0aab29cebcfe1f559387215c4b10be86b76",
    "added_lines": [
      "'pdfium_revision': '3cbb6fbcc7077d94161ec95b7bc1421671317c65',"
    ],
    "removed_lines": [
      "'pdfium_revision': '8b45eb1443e5a31f6f172fa16169b9b56177b639',"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 6.8,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 4418,
    "id": "CVE-2016-1683",
    "commit_id": "96dbafe288dbe2f0cc45fa3c39daf6d0c37acbab",
    "added_lines": [],
    "removed_lines": [
      "#include \"libxslt/libxslt.h\"",
      "#include \"libexslt/exslt.h\"",
      "#include <stdio.h>",
      "#ifdef HAVE_STRING_H",
      "#include <string.h>",
      "#endif",
      "#ifdef HAVE_SYS_TIME_H",
      "#include <sys/time.h>",
      "#endif",
      "#ifdef HAVE_TIME_H",
      "#include <time.h>",
      "#endif",
      "#ifdef HAVE_SYS_STAT_H",
      "#include <sys/stat.h>",
      "#endif",
      "#ifdef HAVE_UNISTD_H",
      "#include <unistd.h>",
      "#endif",
      "#ifdef HAVE_STDLIB_H",
      "#include <stdlib.h>",
      "#endif",
      "#ifdef HAVE_STDARG_H",
      "#include <stdarg.h>",
      "#endif",
      "#include <libxml/xmlmemory.h>",
      "#include <libxml/debugXML.h>",
      "#include <libxml/HTMLtree.h>",
      "#include <libxml/xmlIO.h>",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "#include <libxml/xinclude.h>",
      "#endif",
      "#ifdef LIBXML_CATALOG_ENABLED",
      "#include <libxml/catalog.h>",
      "#endif",
      "#include <libxml/parser.h>",
      "#include <libxml/parserInternals.h>",
      "#include <libxml/uri.h>",
      "#include <libxslt/xslt.h>",
      "#include <libxslt/xsltInternals.h>",
      "#include <libxslt/transform.h>",
      "#include <libxslt/xsltutils.h>",
      "#include <libxslt/extensions.h>",
      "#include <libxslt/security.h>",
      "#include <libexslt/exsltconfig.h>",
      "#if defined(WIN32) && !defined (__CYGWIN__",
      "#if defined(_MSC_VER) || defined(__MINGW32__",
      "#include <winsock2.h>",
      "#define gettimeofday(p1,p2",
      "#define snprintf _snprintf",
      "#endif",
      "#else",
      "#if defined(HAVE_SYS_TIME_H",
      "#include <sys/time.h>",
      "#elif defined(HAVE_TIME_H",
      "#include <time.h>",
      "#endif",
      "#endif",
      "#ifdef HAVE_SYS_TIMEB_H",
      "#include <sys/timeb.h>",
      "#endif",
      "static int debug = 0",
      "static int repeat = 0",
      "static int timing = 0",
      "static int dumpextensions = 0",
      "static int novalid = 0",
      "static int nodtdattr = 0",
      "static int noout = 0",
      "static int nodict = 0",
      "#ifdef LIBXML_HTML_ENABLED",
      "static int html = 0",
      "#endif",
      "static char *encoding = NULL",
      "static int load_trace = 0",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "static int xinclude = 0",
      "static int xincludestyle = 0",
      "#endif",
      "static int profile = 0",
      "#define MAX_PARAMETERS 64",
      "#define MAX_PATHS 64",
      "static int options = XSLT_PARSE_OPTIONS",
      "static const char *params[MAX_PARAMETERS + 1]",
      "static int nbparams = 0",
      "static xmlChar *strparams[MAX_PARAMETERS + 1]",
      "static int nbstrparams = 0",
      "static xmlChar *paths[MAX_PATHS + 1]",
      "static int nbpaths = 0",
      "static char *output = NULL",
      "static int errorno = 0",
      "static const char *writesubtree = NULL",
      "static",
      "void parsePath(const xmlChar *path)",
      "const xmlChar *cur",
      "if (path == NULL",
      "return",
      "while (*path != 0)",
      "if (nbpaths >= MAX_PATHS)",
      "fprintf(stderr, \"MAX_PATHS reached: too many paths\\n\"",
      "return",
      "cur = path",
      "while ((*cur == ' ') || (*cur == ':'",
      "cur++",
      "path = cur",
      "while ((*cur != 0) && (*cur != ' ') && (*cur != ':'",
      "cur++",
      "if (cur != path)",
      "paths[nbpaths] = xmlStrndup(path, cur - path",
      "if (paths[nbpaths] != NULL",
      "nbpaths++",
      "path = cur",
      "xmlExternalEntityLoader defaultEntityLoader = NULL",
      "static xmlParserInputPtr",
      "xsltprocExternalEntityLoader(const char *URL, const char *ID,",
      "xmlParserCtxtPtr ctxt)",
      "xmlParserInputPtr ret",
      "warningSAXFunc warning = NULL",
      "int i",
      "const char *lastsegment = URL",
      "const char *iter = URL",
      "if (nbpaths > 0)",
      "while (*iter != 0)",
      "if (*iter == '/'",
      "lastsegment = iter + 1",
      "iter++",
      "if ((ctxt != NULL) && (ctxt->sax != NULL))",
      "warning = ctxt->sax->warning",
      "ctxt->sax->warning = NULL",
      "if (defaultEntityLoader != NULL)",
      "ret = defaultEntityLoader(URL, ID, ctxt",
      "if (ret != NULL)",
      "if (warning != NULL",
      "ctxt->sax->warning = warning",
      "if (load_trace)",
      "fprintf \\",
      "(stderr,",
      "\"Loaded URL=\\\"%s\\\" ID=\\\"%s\\\"\\n\",",
      "URL ? URL : \"(null)\",",
      "ID ? ID : \"(null)\"",
      "return(ret",
      "for (i = 0;i < nbpaths;i++)",
      "xmlChar *newURL",
      "newURL = xmlStrdup((const xmlChar *) paths[i]",
      "newURL = xmlStrcat(newURL, (const xmlChar *) \"/\"",
      "newURL = xmlStrcat(newURL, (const xmlChar *) lastsegment",
      "if (newURL != NULL)",
      "ret = defaultEntityLoader((const char *)newURL, ID, ctxt",
      "if (ret != NULL)",
      "if (warning != NULL",
      "ctxt->sax->warning = warning",
      "if (load_trace)",
      "fprintf \\",
      "(stderr,",
      "\"Loaded URL=\\\"%s\\\" ID=\\\"%s\\\"\\n\",",
      "newURL,",
      "ID ? ID : \"(null)\"",
      "xmlFree(newURL",
      "return(ret",
      "xmlFree(newURL",
      "if (warning != NULL)",
      "ctxt->sax->warning = warning",
      "if (URL != NULL",
      "warning(ctxt, \"failed to load external entity \\\"%s\\\"\\n\", URL",
      "else if (ID != NULL",
      "warning(ctxt, \"failed to load external entity \\\"%s\\\"\\n\", ID",
      "return(NULL",
      "#ifndef HAVE_GETTIMEOFDAY",
      "#ifdef HAVE_SYS_TIMEB_H",
      "#ifdef HAVE_SYS_TIME_H",
      "#ifdef HAVE_FTIME",
      "int",
      "my_gettimeofday(struct timeval *tvp, void *tzp",
      "struct timeb timebuffer",
      "ftime(&timebuffer",
      "if (tvp)",
      "tvp->tv_sec = timebuffer.time",
      "tvp->tv_usec = timebuffer.millitm * 1000L",
      "return (0",
      "#define HAVE_GETTIMEOFDAY 1",
      "#define gettimeofday my_gettimeofday",
      "#endif",
      "#endif",
      "#endif",
      "#endif",
      "#if defined(HAVE_GETTIMEOFDAY",
      "static struct timeval begin, endtime",
      "static void startTimer(void",
      "gettimeofday(&begin,NULL",
      "static void endTimer(const char *format, ...",
      "long msec",
      "va_list ap",
      "gettimeofday(&endtime, NULL",
      "msec = endtime.tv_sec - begin.tv_sec",
      "msec *= 1000",
      "msec += (endtime.tv_usec - begin.tv_usec) / 1000",
      "#ifndef HAVE_STDARG_H",
      "#error \"endTimer required stdarg functions\"",
      "#endif",
      "va_start(ap, format",
      "vfprintf(stderr,format,ap",
      "va_end(ap",
      "fprintf(stderr, \" took %ld ms\\n\", msec",
      "#elif defined(HAVE_TIME_H",
      "#ifndef CLOCKS_PER_SEC",
      "#define CLOCKS_PER_SEC 100",
      "#endif",
      "clock_t begin, endtime",
      "static void startTimer(void",
      "begin=clock",
      "static void endTimer(char *format, ...",
      "long msec",
      "va_list ap",
      "endtime=clock",
      "msec = ((endtime-begin) * 1000) / CLOCKS_PER_SEC",
      "#ifndef HAVE_STDARG_H",
      "#error \"endTimer required stdarg functions\"",
      "#endif",
      "va_start(ap, format",
      "vfprintf(stderr,format,ap",
      "va_end(ap",
      "fprintf(stderr, \" took %ld ms\\n\", msec",
      "#else",
      "static void startTimer(void",
      "static void endTimer(char *format, ...",
      "#ifdef HAVE_STDARG_H",
      "va_start(ap, format",
      "vfprintf(stderr,format,ap",
      "va_end(ap",
      "fprintf(stderr, \" was not timed\\n\", msec",
      "#else",
      "#endif",
      "#endif",
      "static int",
      "xsltSubtreeCheck(xsltSecurityPrefsPtr sec ATTRIBUTE_UNUSED,",
      "xsltTransformContextPtr ctxt ATTRIBUTE_UNUSED,",
      "const char *value ATTRIBUTE_UNUSED)",
      "int len, ret",
      "if (writesubtree == NULL",
      "return(0",
      "if (value == NULL",
      "return(-1",
      "len = xmlStrlen(BAD_CAST writesubtree",
      "ret = xmlStrncmp(BAD_CAST writesubtree, BAD_CAST value, len",
      "if (ret == 0",
      "return(1",
      "return(0",
      "static void",
      "xsltProcess(xmlDocPtr doc, xsltStylesheetPtr cur, const char *filename)",
      "xmlDocPtr res",
      "xsltTransformContextPtr ctxt",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "if (xinclude)",
      "int ret",
      "if (timing",
      "startTimer",
      "#if LIBXML_VERSION >= 20603",
      "ret = xmlXIncludeProcessFlags(doc, XSLT_PARSE_OPTIONS",
      "#else",
      "ret = xmlXIncludeProcess(doc",
      "#endif",
      "if (timing)",
      "endTimer(\"XInclude processing %s\", filename",
      "if (ret < 0)",
      "errorno = 6",
      "return",
      "#endif",
      "if (timing",
      "startTimer",
      "if (output == NULL)",
      "if (repeat)",
      "int j",
      "for (j = 1; j < repeat; j++)",
      "res = xsltApplyStylesheet(cur, doc, params",
      "xmlFreeDoc(res",
      "xmlFreeDoc(doc",
      "#ifdef LIBXML_HTML_ENABLED",
      "if (html",
      "doc = htmlReadFile(filename, encoding, options",
      "else",
      "#endif",
      "doc = xmlReadFile(filename, encoding, options",
      "ctxt = xsltNewTransformContext(cur, doc",
      "if (ctxt == NULL",
      "return",
      "xsltSetCtxtParseOptions(ctxt, options",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "if (xinclude",
      "ctxt->xinclude = 1",
      "#endif",
      "if (profile)",
      "res = xsltApplyStylesheetUser(cur, doc, params, NULL,",
      "stderr, ctxt",
      "} else",
      "res = xsltApplyStylesheetUser(cur, doc, params, NULL,",
      "NULL, ctxt",
      "if (ctxt->state == XSLT_STATE_ERROR",
      "errorno = 9",
      "else if (ctxt->state == XSLT_STATE_STOPPED",
      "errorno = 10",
      "xsltFreeTransformContext(ctxt",
      "if (timing)",
      "if (repeat",
      "endTimer(\"Applying stylesheet %d times\", repeat",
      "else",
      "endTimer(\"Applying stylesheet\"",
      "xmlFreeDoc(doc",
      "if (res == NULL)",
      "fprintf(stderr, \"no result for %s\\n\", filename",
      "return",
      "if (noout)",
      "xmlFreeDoc(res",
      "return",
      "#ifdef LIBXML_DEBUG_ENABLED",
      "if (debug",
      "xmlDebugDumpDocument(stdout, res",
      "else",
      "#endif",
      "if (cur->methodURI == NULL)",
      "if (timing",
      "startTimer",
      "xsltSaveResultToFile(stdout, res, cur",
      "if (timing",
      "endTimer(\"Saving result\"",
      "} else",
      "if (xmlStrEqual",
      "(cur->method, (const xmlChar *) \"xhtml\"))",
      "fprintf(stderr, \"non standard output xhtml\\n\"",
      "if (timing",
      "startTimer",
      "xsltSaveResultToFile(stdout, res, cur",
      "if (timing",
      "endTimer(\"Saving result\"",
      "} else",
      "fprintf(stderr,",
      "\"Unsupported non standard output %s\\n\",",
      "cur->method",
      "errorno = 7",
      "#ifdef LIBXML_DEBUG_ENABLED",
      "#endif",
      "xmlFreeDoc(res",
      "} else",
      "int ret",
      "ctxt = xsltNewTransformContext(cur, doc",
      "if (ctxt == NULL",
      "return",
      "xsltSetCtxtParseOptions(ctxt, options",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "if (xinclude",
      "ctxt->xinclude = 1",
      "#endif",
      "ctxt->maxTemplateDepth = xsltMaxDepth",
      "ctxt->maxTemplateVars = xsltMaxVars",
      "if (profile)",
      "ret = xsltRunStylesheetUser(cur, doc, params, output,",
      "NULL, NULL, stderr, ctxt",
      "} else",
      "ret = xsltRunStylesheetUser(cur, doc, params, output,",
      "NULL, NULL, NULL, ctxt",
      "if (ret == -1",
      "errorno = 11",
      "else if (ctxt->state == XSLT_STATE_ERROR",
      "errorno = 9",
      "else if (ctxt->state == XSLT_STATE_STOPPED",
      "errorno = 10",
      "xsltFreeTransformContext(ctxt",
      "if (timing",
      "endTimer(\"Running stylesheet and saving result\"",
      "xmlFreeDoc(doc",
      "static void usage(const char *name)",
      "printf(\"Usage: %s [options] stylesheet file [file ...]\\n\", name",
      "printf(\"   Options:\\n\"",
      "printf(\"\\t--version or -V: show the version of libxml and libxslt used\\n\"",
      "printf(\"\\t--verbose or -v: show logs of what's happening\\n\"",
      "printf(\"\\t--output file or -o file: save to a given file\\n\"",
      "printf(\"\\t--timing: display the time used\\n\"",
      "printf(\"\\t--repeat: run the transformation 20 times\\n\"",
      "#ifdef LIBXML_DEBUG_ENABLED",
      "printf(\"\\t--debug: dump the tree of the result instead\\n\"",
      "#endif",
      "printf(\"\\t--dumpextensions: dump the registered extension elements and functions to stdout\\n\"",
      "printf(\"\\t--novalid skip the DTD loading phase\\n\"",
      "printf(\"\\t--nodtdattr do not default attributes from the DTD\\n\"",
      "printf(\"\\t--noout: do not dump the result\\n\"",
      "printf(\"\\t--maxdepth val : increase the maximum depth (default %d)\\n\", xsltMaxDepth",
      "printf(\"\\t--maxvars val : increase the maximum variables (default %d)\\n\", xsltMaxVars",
      "printf(\"\\t--maxparserdepth val : increase the maximum parser depth\\n\"",
      "#ifdef LIBXML_HTML_ENABLED",
      "printf(\"\\t--html: the input document is(are) an HTML file(s)\\n\"",
      "#endif",
      "printf(\"\\t--encoding: the input document character encoding\\n\"",
      "printf(\"\\t--param name value : pass a (parameter,value) pair\\n\"",
      "printf(\"\\t       value is an UTF8 XPath expression.\\n\"",
      "printf(\"\\t       string values must be quoted like \\\"'string'\\\"\\n or\"",
      "printf(\"\\t       use stringparam to avoid it\\n\"",
      "printf(\"\\t--stringparam name value : pass a (parameter, UTF8 string value) pair\\n\"",
      "printf(\"\\t--path 'paths': provide a set of paths for resources\\n\"",
      "printf(\"\\t--nonet : refuse to fetch DTDs or entities over network\\n\"",
      "printf(\"\\t--nowrite : refuse to write to any file or resource\\n\"",
      "printf(\"\\t--nomkdir : refuse to create directories\\n\"",
      "printf(\"\\t--writesubtree path : allow file write only with the path subtree\\n\"",
      "#ifdef LIBXML_CATALOG_ENABLED",
      "printf(\"\\t--catalogs : use SGML catalogs from $SGML_CATALOG_FILES\\n\"",
      "printf(\"\\t             otherwise XML Catalogs starting from \\n\"",
      "printf(\"\\t         file:///etc/xml/catalog are activated by default\\n\"",
      "#endif",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "printf(\"\\t--xinclude : do XInclude processing on document input\\n\"",
      "printf(\"\\t--xincludestyle : do XInclude processing on stylesheets\\n\"",
      "#endif",
      "printf(\"\\t--load-trace : print trace of all external entites loaded\\n\"",
      "printf(\"\\t--profile or --norman : dump profiling informations \\n\"",
      "printf(\"\\nProject libxslt home page: http://xmlsoft.org/XSLT/\\n\"",
      "printf(\"To report bugs and get help: http://xmlsoft.org/XSLT/bugs.html\\n\"",
      "int",
      "main(int argc, char **argv",
      "int i",
      "xsltStylesheetPtr cur = NULL",
      "xmlDocPtr doc, style",
      "xsltSecurityPrefsPtr sec = NULL",
      "if (argc <= 1)",
      "usage(argv[0]",
      "return (1",
      "xmlInitMemory",
      "LIBXML_TEST_VERSION",
      "sec = xsltNewSecurityPrefs",
      "xsltSetDefaultSecurityPrefs(sec",
      "defaultEntityLoader = xmlGetExternalEntityLoader",
      "xmlSetExternalEntityLoader(xsltprocExternalEntityLoader",
      "for (i = 1; i < argc; i++)",
      "if (!strcmp(argv[i], \"-\"",
      "break",
      "if (argv[i][0] != '-'",
      "continue",
      "#ifdef LIBXML_DEBUG_ENABLED",
      "if ((!strcmp(argv[i], \"-debug\")) || (!strcmp(argv[i], \"--debug\")))",
      "debug++",
      "} else",
      "#endif",
      "if ((!strcmp(argv[i], \"-v\")) ||",
      "(!strcmp(argv[i], \"-verbose\")) ||",
      "(!strcmp(argv[i], \"--verbose\")))",
      "xsltSetGenericDebugFunc(stderr, NULL",
      "} else if ((!strcmp(argv[i], \"-o\")) ||",
      "(!strcmp(argv[i], \"-output\")) ||",
      "(!strcmp(argv[i], \"--output\")))",
      "i++",
      "#if defined(WIN32) || defined (__CYGWIN__",
      "output = xmlCanonicPath(argv[i]",
      "if (output == NULL",
      "#endif",
      "output = (char *) xmlStrdup((xmlChar *) argv[i]",
      "} else if ((!strcmp(argv[i], \"-V\")) ||",
      "(!strcmp(argv[i], \"-version\")) ||",
      "(!strcmp(argv[i], \"--version\")))",
      "printf(\"Using libxml %s, libxslt %s and libexslt %s\\n\",",
      "xmlParserVersion, xsltEngineVersion, exsltLibraryVersion",
      "printf",
      "(\"xsltproc was compiled against libxml %d, libxslt %d and libexslt %d\\n\",",
      "LIBXML_VERSION, LIBXSLT_VERSION, LIBEXSLT_VERSION",
      "printf(\"libxslt %d was compiled against libxml %d\\n\",",
      "xsltLibxsltVersion, xsltLibxmlVersion",
      "printf(\"libexslt %d was compiled against libxml %d\\n\",",
      "exsltLibexsltVersion, exsltLibxmlVersion",
      "} else if ((!strcmp(argv[i], \"-repeat\"",
      "|| (!strcmp(argv[i], \"--repeat\")))",
      "if (repeat == 0",
      "repeat = 20",
      "else",
      "repeat = 100",
      "} else if ((!strcmp(argv[i], \"-novalid\")) ||",
      "(!strcmp(argv[i], \"--novalid\")))",
      "novalid++",
      "} else if ((!strcmp(argv[i], \"-nodtdattr\")) ||",
      "(!strcmp(argv[i], \"--nodtdattr\")))",
      "nodtdattr++",
      "} else if ((!strcmp(argv[i], \"-noout\")) ||",
      "(!strcmp(argv[i], \"--noout\")))",
      "noout++",
      "#ifdef LIBXML_HTML_ENABLED",
      "} else if ((!strcmp(argv[i], \"-html\")) ||",
      "(!strcmp(argv[i], \"--html\")))",
      "html++",
      "#endif",
      "} else if ((!strcmp(argv[i], \"-encoding\")) ||",
      "(!strcmp(argv[i], \"--encoding\")))",
      "encoding = argv[++i]",
      "} else if ((!strcmp(argv[i], \"-timing\")) ||",
      "(!strcmp(argv[i], \"--timing\")))",
      "timing++",
      "} else if ((!strcmp(argv[i], \"-profile\")) ||",
      "(!strcmp(argv[i], \"--profile\")))",
      "profile++",
      "} else if ((!strcmp(argv[i], \"-nodict\")) ||",
      "(!strcmp(argv[i], \"--nodict\")))",
      "nodict++",
      "} else if ((!strcmp(argv[i], \"-norman\")) ||",
      "(!strcmp(argv[i], \"--norman\")))",
      "profile++",
      "} else if ((!strcmp(argv[i], \"-nonet\")) ||",
      "(!strcmp(argv[i], \"--nonet\")))",
      "defaultEntityLoader = xmlNoNetExternalEntityLoader",
      "} else if ((!strcmp(argv[i], \"-nowrite\")) ||",
      "(!strcmp(argv[i], \"--nowrite\")))",
      "xsltSetSecurityPrefs(sec, XSLT_SECPREF_WRITE_FILE,",
      "xsltSecurityForbid",
      "xsltSetSecurityPrefs(sec, XSLT_SECPREF_CREATE_DIRECTORY,",
      "xsltSecurityForbid",
      "xsltSetSecurityPrefs(sec, XSLT_SECPREF_WRITE_NETWORK,",
      "xsltSecurityForbid",
      "} else if ((!strcmp(argv[i], \"-nomkdir\")) ||",
      "(!strcmp(argv[i], \"--nomkdir\")))",
      "xsltSetSecurityPrefs(sec, XSLT_SECPREF_CREATE_DIRECTORY,",
      "xsltSecurityForbid",
      "} else if ((!strcmp(argv[i], \"-writesubtree\")) ||",
      "(!strcmp(argv[i], \"--writesubtree\")))",
      "i++",
      "writesubtree = argv[i]",
      "xsltSetSecurityPrefs(sec, XSLT_SECPREF_WRITE_FILE,",
      "xsltSubtreeCheck",
      "} else if ((!strcmp(argv[i], \"-path\")) ||",
      "(!strcmp(argv[i], \"--path\")))",
      "i++",
      "parsePath(BAD_CAST argv[i]",
      "#ifdef LIBXML_CATALOG_ENABLED",
      "} else if ((!strcmp(argv[i], \"-catalogs\")) ||",
      "(!strcmp(argv[i], \"--catalogs\")))",
      "const char *catalogs",
      "catalogs = getenv(\"SGML_CATALOG_FILES\"",
      "if (catalogs == NULL)",
      "fprintf(stderr, \"Variable $SGML_CATALOG_FILES not set\\n\"",
      "} else",
      "xmlLoadCatalogs(catalogs",
      "#endif",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "} else if ((!strcmp(argv[i], \"-xinclude\")) ||",
      "(!strcmp(argv[i], \"--xinclude\")))",
      "xinclude++",
      "} else if ((!strcmp(argv[i], \"-xincludestyle\")) ||",
      "(!strcmp(argv[i], \"--xincludestyle\")))",
      "xincludestyle++",
      "xsltSetXIncludeDefault(1",
      "#endif",
      "} else if ((!strcmp(argv[i], \"-load-trace\")) ||",
      "(!strcmp(argv[i], \"--load-trace\")))",
      "load_trace++",
      "} else if ((!strcmp(argv[i], \"-param\")) ||",
      "(!strcmp(argv[i], \"--param\")))",
      "i++",
      "params[nbparams++] = argv[i++]",
      "params[nbparams++] = argv[i]",
      "if (nbparams >= MAX_PARAMETERS)",
      "fprintf(stderr, \"too many params increase MAX_PARAMETERS \\n\"",
      "return (2",
      "} else if ((!strcmp(argv[i], \"-stringparam\")) ||",
      "(!strcmp(argv[i], \"--stringparam\")))",
      "const xmlChar *string",
      "xmlChar *value",
      "i++",
      "params[nbparams++] = argv[i++]",
      "string = (const xmlChar *) argv[i]",
      "if (xmlStrchr(string, '\"'))",
      "if (xmlStrchr(string, '\\''))",
      "fprintf(stderr,",
      "\"stringparam contains both quote and double-quotes !\\n\"",
      "return(8",
      "value = xmlStrdup((const xmlChar *)\"'\"",
      "value = xmlStrcat(value, string",
      "value = xmlStrcat(value, (const xmlChar *)\"'\"",
      "} else",
      "value = xmlStrdup((const xmlChar *)\"\\\"\"",
      "value = xmlStrcat(value, string",
      "value = xmlStrcat(value, (const xmlChar *)\"\\\"\"",
      "params[nbparams++] = (const char *) value",
      "strparams[nbstrparams++] = value",
      "if (nbparams >= MAX_PARAMETERS)",
      "fprintf(stderr, \"too many params increase MAX_PARAMETERS \\n\"",
      "return (2",
      "} else if ((!strcmp(argv[i], \"-maxdepth\")) ||",
      "(!strcmp(argv[i], \"--maxdepth\")))",
      "int value",
      "i++",
      "if (sscanf(argv[i], \"%d\", &value) == 1)",
      "if (value > 0",
      "xsltMaxDepth = value",
      "} else if ((!strcmp(argv[i], \"-maxvars\")) ||",
      "(!strcmp(argv[i], \"--maxvars\")))",
      "int value",
      "i++",
      "if (sscanf(argv[i], \"%d\", &value) == 1)",
      "if (value > 0",
      "xsltMaxVars = value",
      "} else if ((!strcmp(argv[i], \"-maxparserdepth\")) ||",
      "(!strcmp(argv[i], \"--maxparserdepth\")))",
      "int value",
      "i++",
      "if (sscanf(argv[i], \"%d\", &value) == 1)",
      "if (value > 0",
      "xmlParserMaxDepth = value",
      "} else if ((!strcmp(argv[i],\"-dumpextensions\"))||",
      "(!strcmp(argv[i],\"--dumpextensions\")))",
      "dumpextensions++",
      "} else",
      "fprintf(stderr, \"Unknown option %s\\n\", argv[i]",
      "usage(argv[0]",
      "return (3",
      "params[nbparams] = NULL",
      "if (novalid != 0",
      "options = XML_PARSE_NOENT | XML_PARSE_NOCDATA",
      "else if (nodtdattr",
      "options = XML_PARSE_NOENT | XML_PARSE_DTDLOAD | XML_PARSE_NOCDATA",
      "if (nodict != 0",
      "options |= XML_PARSE_NODICT",
      "exsltRegisterAll",
      "xsltRegisterTestModule",
      "if (dumpextensions",
      "xsltDebugDumpExtensions(NULL",
      "for (i = 1; i < argc; i++)",
      "if ((!strcmp(argv[i], \"-maxdepth\")) ||",
      "(!strcmp(argv[i], \"--maxdepth\")))",
      "i++",
      "continue",
      "} else if ((!strcmp(argv[i], \"-maxparserdepth\")) ||",
      "(!strcmp(argv[i], \"--maxparserdepth\")))",
      "i++",
      "continue",
      "} else if ((!strcmp(argv[i], \"-o\")) ||",
      "(!strcmp(argv[i], \"-output\")) ||",
      "(!strcmp(argv[i], \"--output\")))",
      "i++",
      "continue",
      "} else if ((!strcmp(argv[i], \"-encoding\")) ||",
      "(!strcmp(argv[i], \"--encoding\")))",
      "i++",
      "continue",
      "} else if ((!strcmp(argv[i], \"-writesubtree\")) ||",
      "(!strcmp(argv[i], \"--writesubtree\")))",
      "i++",
      "continue",
      "} else if ((!strcmp(argv[i], \"-path\")) ||",
      "(!strcmp(argv[i], \"--path\")))",
      "i++",
      "continue",
      "if ((!strcmp(argv[i], \"-param\")) || (!strcmp(argv[i], \"--param\")))",
      "i += 2",
      "continue",
      "if ((!strcmp(argv[i], \"-stringparam\")) ||",
      "(!strcmp(argv[i], \"--stringparam\")))",
      "i += 2",
      "continue",
      "if ((argv[i][0] != '-') || (strcmp(argv[i], \"-\") == 0))",
      "if (timing",
      "startTimer",
      "style = xmlReadFile((const char *) argv[i], NULL, options",
      "if (timing",
      "endTimer(\"Parsing stylesheet %s\", argv[i]",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "if (xincludestyle)",
      "if (style != NULL)",
      "if (timing",
      "startTimer",
      "#if LIBXML_VERSION >= 20603",
      "xmlXIncludeProcessFlags(style, XSLT_PARSE_OPTIONS",
      "#else",
      "xmlXIncludeProcess(style",
      "#endif",
      "if (timing)",
      "endTimer(\"XInclude processing %s\", argv[i]",
      "#endif",
      "if (style == NULL)",
      "fprintf(stderr,  \"cannot parse %s\\n\", argv[i]",
      "cur = NULL",
      "errorno = 4",
      "} else",
      "cur = xsltLoadStylesheetPI(style",
      "if (cur != NULL)",
      "xsltProcess(style, cur, argv[i]",
      "xsltFreeStylesheet(cur",
      "cur = NULL",
      "goto done",
      "cur = xsltParseStylesheetDoc(style",
      "if (cur != NULL)",
      "if (cur->errors != 0)",
      "errorno = 5",
      "goto done",
      "i++",
      "} else",
      "xmlFreeDoc(style",
      "errorno = 5",
      "goto done",
      "break",
      "if ((cur != NULL) && (cur->errors == 0))",
      "for (; i < argc; i++)",
      "doc = NULL",
      "if (timing",
      "startTimer",
      "#ifdef LIBXML_HTML_ENABLED",
      "if (html",
      "doc = htmlReadFile(argv[i], encoding, options",
      "else",
      "#endif",
      "doc = xmlReadFile(argv[i], encoding, options",
      "if (doc == NULL)",
      "fprintf(stderr, \"unable to parse %s\\n\", argv[i]",
      "errorno = 6",
      "continue",
      "if (timing",
      "endTimer(\"Parsing document %s\", argv[i]",
      "xsltProcess(doc, cur, argv[i]",
      "done:",
      "if (cur != NULL",
      "xsltFreeStylesheet(cur",
      "for (i = 0;i < nbstrparams;i++",
      "xmlFree(strparams[i]",
      "if (output != NULL",
      "xmlFree(output",
      "xsltFreeSecurityPrefs(sec",
      "xsltCleanupGlobals",
      "xmlCleanupParser",
      "xmlMemoryDump",
      "return(errorno"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.1,
    "safe_features": [],
    "unsafe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "MEM_COPY",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "RETURN",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "RETURN",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds"
    ]
  },
  {
    "index": 4419,
    "id": "CVE-2016-1684",
    "commit_id": "96dbafe288dbe2f0cc45fa3c39daf6d0c37acbab",
    "added_lines": [],
    "removed_lines": [
      "#include \"libxslt/libxslt.h\"",
      "#include \"libexslt/exslt.h\"",
      "#include <stdio.h>",
      "#ifdef HAVE_STRING_H",
      "#include <string.h>",
      "#endif",
      "#ifdef HAVE_SYS_TIME_H",
      "#include <sys/time.h>",
      "#endif",
      "#ifdef HAVE_TIME_H",
      "#include <time.h>",
      "#endif",
      "#ifdef HAVE_SYS_STAT_H",
      "#include <sys/stat.h>",
      "#endif",
      "#ifdef HAVE_UNISTD_H",
      "#include <unistd.h>",
      "#endif",
      "#ifdef HAVE_STDLIB_H",
      "#include <stdlib.h>",
      "#endif",
      "#ifdef HAVE_STDARG_H",
      "#include <stdarg.h>",
      "#endif",
      "#include <libxml/xmlmemory.h>",
      "#include <libxml/debugXML.h>",
      "#include <libxml/HTMLtree.h>",
      "#include <libxml/xmlIO.h>",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "#include <libxml/xinclude.h>",
      "#endif",
      "#ifdef LIBXML_CATALOG_ENABLED",
      "#include <libxml/catalog.h>",
      "#endif",
      "#include <libxml/parser.h>",
      "#include <libxml/parserInternals.h>",
      "#include <libxml/uri.h>",
      "#include <libxslt/xslt.h>",
      "#include <libxslt/xsltInternals.h>",
      "#include <libxslt/transform.h>",
      "#include <libxslt/xsltutils.h>",
      "#include <libxslt/extensions.h>",
      "#include <libxslt/security.h>",
      "#include <libexslt/exsltconfig.h>",
      "#if defined(WIN32) && !defined (__CYGWIN__",
      "#if defined(_MSC_VER) || defined(__MINGW32__",
      "#include <winsock2.h>",
      "#define gettimeofday(p1,p2",
      "#define snprintf _snprintf",
      "#endif",
      "#else",
      "#if defined(HAVE_SYS_TIME_H",
      "#include <sys/time.h>",
      "#elif defined(HAVE_TIME_H",
      "#include <time.h>",
      "#endif",
      "#endif",
      "#ifdef HAVE_SYS_TIMEB_H",
      "#include <sys/timeb.h>",
      "#endif",
      "static int debug = 0",
      "static int repeat = 0",
      "static int timing = 0",
      "static int dumpextensions = 0",
      "static int novalid = 0",
      "static int nodtdattr = 0",
      "static int noout = 0",
      "static int nodict = 0",
      "#ifdef LIBXML_HTML_ENABLED",
      "static int html = 0",
      "#endif",
      "static char *encoding = NULL",
      "static int load_trace = 0",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "static int xinclude = 0",
      "static int xincludestyle = 0",
      "#endif",
      "static int profile = 0",
      "#define MAX_PARAMETERS 64",
      "#define MAX_PATHS 64",
      "static int options = XSLT_PARSE_OPTIONS",
      "static const char *params[MAX_PARAMETERS + 1]",
      "static int nbparams = 0",
      "static xmlChar *strparams[MAX_PARAMETERS + 1]",
      "static int nbstrparams = 0",
      "static xmlChar *paths[MAX_PATHS + 1]",
      "static int nbpaths = 0",
      "static char *output = NULL",
      "static int errorno = 0",
      "static const char *writesubtree = NULL",
      "static",
      "void parsePath(const xmlChar *path)",
      "const xmlChar *cur",
      "if (path == NULL",
      "return",
      "while (*path != 0)",
      "if (nbpaths >= MAX_PATHS)",
      "fprintf(stderr, \"MAX_PATHS reached: too many paths\\n\"",
      "return",
      "cur = path",
      "while ((*cur == ' ') || (*cur == ':'",
      "cur++",
      "path = cur",
      "while ((*cur != 0) && (*cur != ' ') && (*cur != ':'",
      "cur++",
      "if (cur != path)",
      "paths[nbpaths] = xmlStrndup(path, cur - path",
      "if (paths[nbpaths] != NULL",
      "nbpaths++",
      "path = cur",
      "xmlExternalEntityLoader defaultEntityLoader = NULL",
      "static xmlParserInputPtr",
      "xsltprocExternalEntityLoader(const char *URL, const char *ID,",
      "xmlParserCtxtPtr ctxt)",
      "xmlParserInputPtr ret",
      "warningSAXFunc warning = NULL",
      "int i",
      "const char *lastsegment = URL",
      "const char *iter = URL",
      "if (nbpaths > 0)",
      "while (*iter != 0)",
      "if (*iter == '/'",
      "lastsegment = iter + 1",
      "iter++",
      "if ((ctxt != NULL) && (ctxt->sax != NULL))",
      "warning = ctxt->sax->warning",
      "ctxt->sax->warning = NULL",
      "if (defaultEntityLoader != NULL)",
      "ret = defaultEntityLoader(URL, ID, ctxt",
      "if (ret != NULL)",
      "if (warning != NULL",
      "ctxt->sax->warning = warning",
      "if (load_trace)",
      "fprintf \\",
      "(stderr,",
      "\"Loaded URL=\\\"%s\\\" ID=\\\"%s\\\"\\n\",",
      "URL ? URL : \"(null)\",",
      "ID ? ID : \"(null)\"",
      "return(ret",
      "for (i = 0;i < nbpaths;i++)",
      "xmlChar *newURL",
      "newURL = xmlStrdup((const xmlChar *) paths[i]",
      "newURL = xmlStrcat(newURL, (const xmlChar *) \"/\"",
      "newURL = xmlStrcat(newURL, (const xmlChar *) lastsegment",
      "if (newURL != NULL)",
      "ret = defaultEntityLoader((const char *)newURL, ID, ctxt",
      "if (ret != NULL)",
      "if (warning != NULL",
      "ctxt->sax->warning = warning",
      "if (load_trace)",
      "fprintf \\",
      "(stderr,",
      "\"Loaded URL=\\\"%s\\\" ID=\\\"%s\\\"\\n\",",
      "newURL,",
      "ID ? ID : \"(null)\"",
      "xmlFree(newURL",
      "return(ret",
      "xmlFree(newURL",
      "if (warning != NULL)",
      "ctxt->sax->warning = warning",
      "if (URL != NULL",
      "warning(ctxt, \"failed to load external entity \\\"%s\\\"\\n\", URL",
      "else if (ID != NULL",
      "warning(ctxt, \"failed to load external entity \\\"%s\\\"\\n\", ID",
      "return(NULL",
      "#ifndef HAVE_GETTIMEOFDAY",
      "#ifdef HAVE_SYS_TIMEB_H",
      "#ifdef HAVE_SYS_TIME_H",
      "#ifdef HAVE_FTIME",
      "int",
      "my_gettimeofday(struct timeval *tvp, void *tzp",
      "struct timeb timebuffer",
      "ftime(&timebuffer",
      "if (tvp)",
      "tvp->tv_sec = timebuffer.time",
      "tvp->tv_usec = timebuffer.millitm * 1000L",
      "return (0",
      "#define HAVE_GETTIMEOFDAY 1",
      "#define gettimeofday my_gettimeofday",
      "#endif",
      "#endif",
      "#endif",
      "#endif",
      "#if defined(HAVE_GETTIMEOFDAY",
      "static struct timeval begin, endtime",
      "static void startTimer(void",
      "gettimeofday(&begin,NULL",
      "static void endTimer(const char *format, ...",
      "long msec",
      "va_list ap",
      "gettimeofday(&endtime, NULL",
      "msec = endtime.tv_sec - begin.tv_sec",
      "msec *= 1000",
      "msec += (endtime.tv_usec - begin.tv_usec) / 1000",
      "#ifndef HAVE_STDARG_H",
      "#error \"endTimer required stdarg functions\"",
      "#endif",
      "va_start(ap, format",
      "vfprintf(stderr,format,ap",
      "va_end(ap",
      "fprintf(stderr, \" took %ld ms\\n\", msec",
      "#elif defined(HAVE_TIME_H",
      "#ifndef CLOCKS_PER_SEC",
      "#define CLOCKS_PER_SEC 100",
      "#endif",
      "clock_t begin, endtime",
      "static void startTimer(void",
      "begin=clock",
      "static void endTimer(char *format, ...",
      "long msec",
      "va_list ap",
      "endtime=clock",
      "msec = ((endtime-begin) * 1000) / CLOCKS_PER_SEC",
      "#ifndef HAVE_STDARG_H",
      "#error \"endTimer required stdarg functions\"",
      "#endif",
      "va_start(ap, format",
      "vfprintf(stderr,format,ap",
      "va_end(ap",
      "fprintf(stderr, \" took %ld ms\\n\", msec",
      "#else",
      "static void startTimer(void",
      "static void endTimer(char *format, ...",
      "#ifdef HAVE_STDARG_H",
      "va_start(ap, format",
      "vfprintf(stderr,format,ap",
      "va_end(ap",
      "fprintf(stderr, \" was not timed\\n\", msec",
      "#else",
      "#endif",
      "#endif",
      "static int",
      "xsltSubtreeCheck(xsltSecurityPrefsPtr sec ATTRIBUTE_UNUSED,",
      "xsltTransformContextPtr ctxt ATTRIBUTE_UNUSED,",
      "const char *value ATTRIBUTE_UNUSED)",
      "int len, ret",
      "if (writesubtree == NULL",
      "return(0",
      "if (value == NULL",
      "return(-1",
      "len = xmlStrlen(BAD_CAST writesubtree",
      "ret = xmlStrncmp(BAD_CAST writesubtree, BAD_CAST value, len",
      "if (ret == 0",
      "return(1",
      "return(0",
      "static void",
      "xsltProcess(xmlDocPtr doc, xsltStylesheetPtr cur, const char *filename)",
      "xmlDocPtr res",
      "xsltTransformContextPtr ctxt",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "if (xinclude)",
      "int ret",
      "if (timing",
      "startTimer",
      "#if LIBXML_VERSION >= 20603",
      "ret = xmlXIncludeProcessFlags(doc, XSLT_PARSE_OPTIONS",
      "#else",
      "ret = xmlXIncludeProcess(doc",
      "#endif",
      "if (timing)",
      "endTimer(\"XInclude processing %s\", filename",
      "if (ret < 0)",
      "errorno = 6",
      "return",
      "#endif",
      "if (timing",
      "startTimer",
      "if (output == NULL)",
      "if (repeat)",
      "int j",
      "for (j = 1; j < repeat; j++)",
      "res = xsltApplyStylesheet(cur, doc, params",
      "xmlFreeDoc(res",
      "xmlFreeDoc(doc",
      "#ifdef LIBXML_HTML_ENABLED",
      "if (html",
      "doc = htmlReadFile(filename, encoding, options",
      "else",
      "#endif",
      "doc = xmlReadFile(filename, encoding, options",
      "ctxt = xsltNewTransformContext(cur, doc",
      "if (ctxt == NULL",
      "return",
      "xsltSetCtxtParseOptions(ctxt, options",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "if (xinclude",
      "ctxt->xinclude = 1",
      "#endif",
      "if (profile)",
      "res = xsltApplyStylesheetUser(cur, doc, params, NULL,",
      "stderr, ctxt",
      "} else",
      "res = xsltApplyStylesheetUser(cur, doc, params, NULL,",
      "NULL, ctxt",
      "if (ctxt->state == XSLT_STATE_ERROR",
      "errorno = 9",
      "else if (ctxt->state == XSLT_STATE_STOPPED",
      "errorno = 10",
      "xsltFreeTransformContext(ctxt",
      "if (timing)",
      "if (repeat",
      "endTimer(\"Applying stylesheet %d times\", repeat",
      "else",
      "endTimer(\"Applying stylesheet\"",
      "xmlFreeDoc(doc",
      "if (res == NULL)",
      "fprintf(stderr, \"no result for %s\\n\", filename",
      "return",
      "if (noout)",
      "xmlFreeDoc(res",
      "return",
      "#ifdef LIBXML_DEBUG_ENABLED",
      "if (debug",
      "xmlDebugDumpDocument(stdout, res",
      "else",
      "#endif",
      "if (cur->methodURI == NULL)",
      "if (timing",
      "startTimer",
      "xsltSaveResultToFile(stdout, res, cur",
      "if (timing",
      "endTimer(\"Saving result\"",
      "} else",
      "if (xmlStrEqual",
      "(cur->method, (const xmlChar *) \"xhtml\"))",
      "fprintf(stderr, \"non standard output xhtml\\n\"",
      "if (timing",
      "startTimer",
      "xsltSaveResultToFile(stdout, res, cur",
      "if (timing",
      "endTimer(\"Saving result\"",
      "} else",
      "fprintf(stderr,",
      "\"Unsupported non standard output %s\\n\",",
      "cur->method",
      "errorno = 7",
      "#ifdef LIBXML_DEBUG_ENABLED",
      "#endif",
      "xmlFreeDoc(res",
      "} else",
      "int ret",
      "ctxt = xsltNewTransformContext(cur, doc",
      "if (ctxt == NULL",
      "return",
      "xsltSetCtxtParseOptions(ctxt, options",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "if (xinclude",
      "ctxt->xinclude = 1",
      "#endif",
      "ctxt->maxTemplateDepth = xsltMaxDepth",
      "ctxt->maxTemplateVars = xsltMaxVars",
      "if (profile)",
      "ret = xsltRunStylesheetUser(cur, doc, params, output,",
      "NULL, NULL, stderr, ctxt",
      "} else",
      "ret = xsltRunStylesheetUser(cur, doc, params, output,",
      "NULL, NULL, NULL, ctxt",
      "if (ret == -1",
      "errorno = 11",
      "else if (ctxt->state == XSLT_STATE_ERROR",
      "errorno = 9",
      "else if (ctxt->state == XSLT_STATE_STOPPED",
      "errorno = 10",
      "xsltFreeTransformContext(ctxt",
      "if (timing",
      "endTimer(\"Running stylesheet and saving result\"",
      "xmlFreeDoc(doc",
      "static void usage(const char *name)",
      "printf(\"Usage: %s [options] stylesheet file [file ...]\\n\", name",
      "printf(\"   Options:\\n\"",
      "printf(\"\\t--version or -V: show the version of libxml and libxslt used\\n\"",
      "printf(\"\\t--verbose or -v: show logs of what's happening\\n\"",
      "printf(\"\\t--output file or -o file: save to a given file\\n\"",
      "printf(\"\\t--timing: display the time used\\n\"",
      "printf(\"\\t--repeat: run the transformation 20 times\\n\"",
      "#ifdef LIBXML_DEBUG_ENABLED",
      "printf(\"\\t--debug: dump the tree of the result instead\\n\"",
      "#endif",
      "printf(\"\\t--dumpextensions: dump the registered extension elements and functions to stdout\\n\"",
      "printf(\"\\t--novalid skip the DTD loading phase\\n\"",
      "printf(\"\\t--nodtdattr do not default attributes from the DTD\\n\"",
      "printf(\"\\t--noout: do not dump the result\\n\"",
      "printf(\"\\t--maxdepth val : increase the maximum depth (default %d)\\n\", xsltMaxDepth",
      "printf(\"\\t--maxvars val : increase the maximum variables (default %d)\\n\", xsltMaxVars",
      "printf(\"\\t--maxparserdepth val : increase the maximum parser depth\\n\"",
      "#ifdef LIBXML_HTML_ENABLED",
      "printf(\"\\t--html: the input document is(are) an HTML file(s)\\n\"",
      "#endif",
      "printf(\"\\t--encoding: the input document character encoding\\n\"",
      "printf(\"\\t--param name value : pass a (parameter,value) pair\\n\"",
      "printf(\"\\t       value is an UTF8 XPath expression.\\n\"",
      "printf(\"\\t       string values must be quoted like \\\"'string'\\\"\\n or\"",
      "printf(\"\\t       use stringparam to avoid it\\n\"",
      "printf(\"\\t--stringparam name value : pass a (parameter, UTF8 string value) pair\\n\"",
      "printf(\"\\t--path 'paths': provide a set of paths for resources\\n\"",
      "printf(\"\\t--nonet : refuse to fetch DTDs or entities over network\\n\"",
      "printf(\"\\t--nowrite : refuse to write to any file or resource\\n\"",
      "printf(\"\\t--nomkdir : refuse to create directories\\n\"",
      "printf(\"\\t--writesubtree path : allow file write only with the path subtree\\n\"",
      "#ifdef LIBXML_CATALOG_ENABLED",
      "printf(\"\\t--catalogs : use SGML catalogs from $SGML_CATALOG_FILES\\n\"",
      "printf(\"\\t             otherwise XML Catalogs starting from \\n\"",
      "printf(\"\\t         file:///etc/xml/catalog are activated by default\\n\"",
      "#endif",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "printf(\"\\t--xinclude : do XInclude processing on document input\\n\"",
      "printf(\"\\t--xincludestyle : do XInclude processing on stylesheets\\n\"",
      "#endif",
      "printf(\"\\t--load-trace : print trace of all external entites loaded\\n\"",
      "printf(\"\\t--profile or --norman : dump profiling informations \\n\"",
      "printf(\"\\nProject libxslt home page: http://xmlsoft.org/XSLT/\\n\"",
      "printf(\"To report bugs and get help: http://xmlsoft.org/XSLT/bugs.html\\n\"",
      "int",
      "main(int argc, char **argv",
      "int i",
      "xsltStylesheetPtr cur = NULL",
      "xmlDocPtr doc, style",
      "xsltSecurityPrefsPtr sec = NULL",
      "if (argc <= 1)",
      "usage(argv[0]",
      "return (1",
      "xmlInitMemory",
      "LIBXML_TEST_VERSION",
      "sec = xsltNewSecurityPrefs",
      "xsltSetDefaultSecurityPrefs(sec",
      "defaultEntityLoader = xmlGetExternalEntityLoader",
      "xmlSetExternalEntityLoader(xsltprocExternalEntityLoader",
      "for (i = 1; i < argc; i++)",
      "if (!strcmp(argv[i], \"-\"",
      "break",
      "if (argv[i][0] != '-'",
      "continue",
      "#ifdef LIBXML_DEBUG_ENABLED",
      "if ((!strcmp(argv[i], \"-debug\")) || (!strcmp(argv[i], \"--debug\")))",
      "debug++",
      "} else",
      "#endif",
      "if ((!strcmp(argv[i], \"-v\")) ||",
      "(!strcmp(argv[i], \"-verbose\")) ||",
      "(!strcmp(argv[i], \"--verbose\")))",
      "xsltSetGenericDebugFunc(stderr, NULL",
      "} else if ((!strcmp(argv[i], \"-o\")) ||",
      "(!strcmp(argv[i], \"-output\")) ||",
      "(!strcmp(argv[i], \"--output\")))",
      "i++",
      "#if defined(WIN32) || defined (__CYGWIN__",
      "output = xmlCanonicPath(argv[i]",
      "if (output == NULL",
      "#endif",
      "output = (char *) xmlStrdup((xmlChar *) argv[i]",
      "} else if ((!strcmp(argv[i], \"-V\")) ||",
      "(!strcmp(argv[i], \"-version\")) ||",
      "(!strcmp(argv[i], \"--version\")))",
      "printf(\"Using libxml %s, libxslt %s and libexslt %s\\n\",",
      "xmlParserVersion, xsltEngineVersion, exsltLibraryVersion",
      "printf",
      "(\"xsltproc was compiled against libxml %d, libxslt %d and libexslt %d\\n\",",
      "LIBXML_VERSION, LIBXSLT_VERSION, LIBEXSLT_VERSION",
      "printf(\"libxslt %d was compiled against libxml %d\\n\",",
      "xsltLibxsltVersion, xsltLibxmlVersion",
      "printf(\"libexslt %d was compiled against libxml %d\\n\",",
      "exsltLibexsltVersion, exsltLibxmlVersion",
      "} else if ((!strcmp(argv[i], \"-repeat\"",
      "|| (!strcmp(argv[i], \"--repeat\")))",
      "if (repeat == 0",
      "repeat = 20",
      "else",
      "repeat = 100",
      "} else if ((!strcmp(argv[i], \"-novalid\")) ||",
      "(!strcmp(argv[i], \"--novalid\")))",
      "novalid++",
      "} else if ((!strcmp(argv[i], \"-nodtdattr\")) ||",
      "(!strcmp(argv[i], \"--nodtdattr\")))",
      "nodtdattr++",
      "} else if ((!strcmp(argv[i], \"-noout\")) ||",
      "(!strcmp(argv[i], \"--noout\")))",
      "noout++",
      "#ifdef LIBXML_HTML_ENABLED",
      "} else if ((!strcmp(argv[i], \"-html\")) ||",
      "(!strcmp(argv[i], \"--html\")))",
      "html++",
      "#endif",
      "} else if ((!strcmp(argv[i], \"-encoding\")) ||",
      "(!strcmp(argv[i], \"--encoding\")))",
      "encoding = argv[++i]",
      "} else if ((!strcmp(argv[i], \"-timing\")) ||",
      "(!strcmp(argv[i], \"--timing\")))",
      "timing++",
      "} else if ((!strcmp(argv[i], \"-profile\")) ||",
      "(!strcmp(argv[i], \"--profile\")))",
      "profile++",
      "} else if ((!strcmp(argv[i], \"-nodict\")) ||",
      "(!strcmp(argv[i], \"--nodict\")))",
      "nodict++",
      "} else if ((!strcmp(argv[i], \"-norman\")) ||",
      "(!strcmp(argv[i], \"--norman\")))",
      "profile++",
      "} else if ((!strcmp(argv[i], \"-nonet\")) ||",
      "(!strcmp(argv[i], \"--nonet\")))",
      "defaultEntityLoader = xmlNoNetExternalEntityLoader",
      "} else if ((!strcmp(argv[i], \"-nowrite\")) ||",
      "(!strcmp(argv[i], \"--nowrite\")))",
      "xsltSetSecurityPrefs(sec, XSLT_SECPREF_WRITE_FILE,",
      "xsltSecurityForbid",
      "xsltSetSecurityPrefs(sec, XSLT_SECPREF_CREATE_DIRECTORY,",
      "xsltSecurityForbid",
      "xsltSetSecurityPrefs(sec, XSLT_SECPREF_WRITE_NETWORK,",
      "xsltSecurityForbid",
      "} else if ((!strcmp(argv[i], \"-nomkdir\")) ||",
      "(!strcmp(argv[i], \"--nomkdir\")))",
      "xsltSetSecurityPrefs(sec, XSLT_SECPREF_CREATE_DIRECTORY,",
      "xsltSecurityForbid",
      "} else if ((!strcmp(argv[i], \"-writesubtree\")) ||",
      "(!strcmp(argv[i], \"--writesubtree\")))",
      "i++",
      "writesubtree = argv[i]",
      "xsltSetSecurityPrefs(sec, XSLT_SECPREF_WRITE_FILE,",
      "xsltSubtreeCheck",
      "} else if ((!strcmp(argv[i], \"-path\")) ||",
      "(!strcmp(argv[i], \"--path\")))",
      "i++",
      "parsePath(BAD_CAST argv[i]",
      "#ifdef LIBXML_CATALOG_ENABLED",
      "} else if ((!strcmp(argv[i], \"-catalogs\")) ||",
      "(!strcmp(argv[i], \"--catalogs\")))",
      "const char *catalogs",
      "catalogs = getenv(\"SGML_CATALOG_FILES\"",
      "if (catalogs == NULL)",
      "fprintf(stderr, \"Variable $SGML_CATALOG_FILES not set\\n\"",
      "} else",
      "xmlLoadCatalogs(catalogs",
      "#endif",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "} else if ((!strcmp(argv[i], \"-xinclude\")) ||",
      "(!strcmp(argv[i], \"--xinclude\")))",
      "xinclude++",
      "} else if ((!strcmp(argv[i], \"-xincludestyle\")) ||",
      "(!strcmp(argv[i], \"--xincludestyle\")))",
      "xincludestyle++",
      "xsltSetXIncludeDefault(1",
      "#endif",
      "} else if ((!strcmp(argv[i], \"-load-trace\")) ||",
      "(!strcmp(argv[i], \"--load-trace\")))",
      "load_trace++",
      "} else if ((!strcmp(argv[i], \"-param\")) ||",
      "(!strcmp(argv[i], \"--param\")))",
      "i++",
      "params[nbparams++] = argv[i++]",
      "params[nbparams++] = argv[i]",
      "if (nbparams >= MAX_PARAMETERS)",
      "fprintf(stderr, \"too many params increase MAX_PARAMETERS \\n\"",
      "return (2",
      "} else if ((!strcmp(argv[i], \"-stringparam\")) ||",
      "(!strcmp(argv[i], \"--stringparam\")))",
      "const xmlChar *string",
      "xmlChar *value",
      "i++",
      "params[nbparams++] = argv[i++]",
      "string = (const xmlChar *) argv[i]",
      "if (xmlStrchr(string, '\"'))",
      "if (xmlStrchr(string, '\\''))",
      "fprintf(stderr,",
      "\"stringparam contains both quote and double-quotes !\\n\"",
      "return(8",
      "value = xmlStrdup((const xmlChar *)\"'\"",
      "value = xmlStrcat(value, string",
      "value = xmlStrcat(value, (const xmlChar *)\"'\"",
      "} else",
      "value = xmlStrdup((const xmlChar *)\"\\\"\"",
      "value = xmlStrcat(value, string",
      "value = xmlStrcat(value, (const xmlChar *)\"\\\"\"",
      "params[nbparams++] = (const char *) value",
      "strparams[nbstrparams++] = value",
      "if (nbparams >= MAX_PARAMETERS)",
      "fprintf(stderr, \"too many params increase MAX_PARAMETERS \\n\"",
      "return (2",
      "} else if ((!strcmp(argv[i], \"-maxdepth\")) ||",
      "(!strcmp(argv[i], \"--maxdepth\")))",
      "int value",
      "i++",
      "if (sscanf(argv[i], \"%d\", &value) == 1)",
      "if (value > 0",
      "xsltMaxDepth = value",
      "} else if ((!strcmp(argv[i], \"-maxvars\")) ||",
      "(!strcmp(argv[i], \"--maxvars\")))",
      "int value",
      "i++",
      "if (sscanf(argv[i], \"%d\", &value) == 1)",
      "if (value > 0",
      "xsltMaxVars = value",
      "} else if ((!strcmp(argv[i], \"-maxparserdepth\")) ||",
      "(!strcmp(argv[i], \"--maxparserdepth\")))",
      "int value",
      "i++",
      "if (sscanf(argv[i], \"%d\", &value) == 1)",
      "if (value > 0",
      "xmlParserMaxDepth = value",
      "} else if ((!strcmp(argv[i],\"-dumpextensions\"))||",
      "(!strcmp(argv[i],\"--dumpextensions\")))",
      "dumpextensions++",
      "} else",
      "fprintf(stderr, \"Unknown option %s\\n\", argv[i]",
      "usage(argv[0]",
      "return (3",
      "params[nbparams] = NULL",
      "if (novalid != 0",
      "options = XML_PARSE_NOENT | XML_PARSE_NOCDATA",
      "else if (nodtdattr",
      "options = XML_PARSE_NOENT | XML_PARSE_DTDLOAD | XML_PARSE_NOCDATA",
      "if (nodict != 0",
      "options |= XML_PARSE_NODICT",
      "exsltRegisterAll",
      "xsltRegisterTestModule",
      "if (dumpextensions",
      "xsltDebugDumpExtensions(NULL",
      "for (i = 1; i < argc; i++)",
      "if ((!strcmp(argv[i], \"-maxdepth\")) ||",
      "(!strcmp(argv[i], \"--maxdepth\")))",
      "i++",
      "continue",
      "} else if ((!strcmp(argv[i], \"-maxparserdepth\")) ||",
      "(!strcmp(argv[i], \"--maxparserdepth\")))",
      "i++",
      "continue",
      "} else if ((!strcmp(argv[i], \"-o\")) ||",
      "(!strcmp(argv[i], \"-output\")) ||",
      "(!strcmp(argv[i], \"--output\")))",
      "i++",
      "continue",
      "} else if ((!strcmp(argv[i], \"-encoding\")) ||",
      "(!strcmp(argv[i], \"--encoding\")))",
      "i++",
      "continue",
      "} else if ((!strcmp(argv[i], \"-writesubtree\")) ||",
      "(!strcmp(argv[i], \"--writesubtree\")))",
      "i++",
      "continue",
      "} else if ((!strcmp(argv[i], \"-path\")) ||",
      "(!strcmp(argv[i], \"--path\")))",
      "i++",
      "continue",
      "if ((!strcmp(argv[i], \"-param\")) || (!strcmp(argv[i], \"--param\")))",
      "i += 2",
      "continue",
      "if ((!strcmp(argv[i], \"-stringparam\")) ||",
      "(!strcmp(argv[i], \"--stringparam\")))",
      "i += 2",
      "continue",
      "if ((argv[i][0] != '-') || (strcmp(argv[i], \"-\") == 0))",
      "if (timing",
      "startTimer",
      "style = xmlReadFile((const char *) argv[i], NULL, options",
      "if (timing",
      "endTimer(\"Parsing stylesheet %s\", argv[i]",
      "#ifdef LIBXML_XINCLUDE_ENABLED",
      "if (xincludestyle)",
      "if (style != NULL)",
      "if (timing",
      "startTimer",
      "#if LIBXML_VERSION >= 20603",
      "xmlXIncludeProcessFlags(style, XSLT_PARSE_OPTIONS",
      "#else",
      "xmlXIncludeProcess(style",
      "#endif",
      "if (timing)",
      "endTimer(\"XInclude processing %s\", argv[i]",
      "#endif",
      "if (style == NULL)",
      "fprintf(stderr,  \"cannot parse %s\\n\", argv[i]",
      "cur = NULL",
      "errorno = 4",
      "} else",
      "cur = xsltLoadStylesheetPI(style",
      "if (cur != NULL)",
      "xsltProcess(style, cur, argv[i]",
      "xsltFreeStylesheet(cur",
      "cur = NULL",
      "goto done",
      "cur = xsltParseStylesheetDoc(style",
      "if (cur != NULL)",
      "if (cur->errors != 0)",
      "errorno = 5",
      "goto done",
      "i++",
      "} else",
      "xmlFreeDoc(style",
      "errorno = 5",
      "goto done",
      "break",
      "if ((cur != NULL) && (cur->errors == 0))",
      "for (; i < argc; i++)",
      "doc = NULL",
      "if (timing",
      "startTimer",
      "#ifdef LIBXML_HTML_ENABLED",
      "if (html",
      "doc = htmlReadFile(argv[i], encoding, options",
      "else",
      "#endif",
      "doc = xmlReadFile(argv[i], encoding, options",
      "if (doc == NULL)",
      "fprintf(stderr, \"unable to parse %s\\n\", argv[i]",
      "errorno = 6",
      "continue",
      "if (timing",
      "endTimer(\"Parsing document %s\", argv[i]",
      "xsltProcess(doc, cur, argv[i]",
      "done:",
      "if (cur != NULL",
      "xsltFreeStylesheet(cur",
      "for (i = 0;i < nbstrparams;i++",
      "xmlFree(strparams[i]",
      "if (output != NULL",
      "xmlFree(output",
      "xsltFreeSecurityPrefs(sec",
      "xsltCleanupGlobals",
      "xmlCleanupParser",
      "xmlMemoryDump",
      "return(errorno"
    ],
    "cause": [
      "Uncategorized Cluster 3"
    ],
    "effect": "DoS ",
    "score": 5.1,
    "safe_features": [],
    "unsafe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "MEM_COPY",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "POINTER_OP",
      "CONDITIONAL",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "RETURN",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "RETURN",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "RETURN",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "RETURN",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "INC_DEC",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "ARITH_OP",
      "INC_DEC",
      "POINTER_OP",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARITH_OP",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONDITIONAL",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "ARITH_OP",
      "INC_DEC",
      "ARRAY_ACCESS",
      "CONTROL_FLOW",
      "RETURN"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "integer overflow"
    ]
  },
  {
    "index": 4420,
    "id": "CVE-2016-1685",
    "commit_id": "0cec9dcb0f83536a041d4db4bd741ccd43100fa8",
    "added_lines": [
      "'pdfium_revision': 'a6b07058f9525c42b021f6f01d5e0da3215f46ed',"
    ],
    "removed_lines": [
      "'pdfium_revision': 'aea4bca2621bf6c614b9c4c606c4c06e5a968d03',"
    ],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [
      "NO_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 4421,
    "id": "CVE-2016-1686",
    "commit_id": "e3e16497d0d5639fb3257305ea369ba4ab8ba210",
    "added_lines": [
      "composing_text_.clear"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "NO_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 4423,
    "id": "CVE-2016-1688",
    "commit_id": "d2dd2a041859ff586a8a3407c74dfc929ed4008a",
    "added_lines": [
      "crbug.com/901317 [ Mac10.10 Mac10.13 ] virtual/outofblink-cors/external/wpt/service-workers/service-worker/update-registration-with-type.https.html [ Failure Pass ]",
      "crbug.com/901317 [ Mac10.10 Mac10.11 ] virtual/service-worker-servicification/external/wpt/service-workers/service-worker/update-registration-with-type.https.html [ Failure Pass ]",
      "crbug.com/901317 [ Mac10.11 Mac10.13 Win10 ] virtual/outofblink-cors-ns/external/wpt/service-workers/service-worker/update-registration-with-type.https.html [ Failure Pass ]"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management",
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "out-of-bounds",
      "out-of-bounds read"
    ]
  },
  {
    "index": 4424,
    "id": "CVE-2016-1689",
    "commit_id": "bc8967075ab8cf77627863845dc4a3af22b47f88",
    "added_lines": [
      "ASH_EXPORT constexpr int kShelfTranslucentMaximizedWindow = 254;       // ~100%"
    ],
    "removed_lines": [
      "ASH_EXPORT constexpr int kShelfTranslucentMaximizedWindow = 255;       // 100%"
    ],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 4.3,
    "safe_features": [
      "ARITH_OP"
    ],
    "unsafe_features": [
      "ARITH_OP"
    ],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  },
  {
    "index": 4427,
    "id": "CVE-2016-1691",
    "commit_id": "e3aa8a56706c4abe208934d5c294f7b594b8b693",
    "added_lines": [
      "#include \"base/json/json_reader.h\"",
      "#include \"components/content_settings/core/common/pref_names.h\"",
      "#include \"components/prefs/pref_service.h\"",
      "namespace",
      "constexpr char kPolicySetting[] = R\"",
      "[",
      "\"devices\": [{ \"vendor_id\": 1234, \"product_id\": 5678 }],",
      "\"url_patterns\": [\"https://product.vendor.com\"]",
      "},",
      "\"devices\": [{ \"vendor_id\": 1234 }],",
      "\"url_patterns\": [\"https://vendor.com\"]",
      "},",
      "\"devices\": [{}],",
      "\"url_patterns\": [\"https://[*.]anydevice.com\"]",
      "},",
      "\"devices\": [{ \"vendor_id\": 2468, \"product_id\": 1357 }],",
      "\"url_patterns\": [\"https://gadget.com,https://cool.com\"]",
      "])\"",
      "const GURL kPolicyOrigins[] =",
      "GURL(\"https://product.vendor.com\"), GURL(\"https://vendor.com\"),",
      "GURL(\"https://anydevice.com\"),      GURL(\"https://sub.anydevice.com\"),",
      "GURL(\"https://gadget.com\"),         GURL(\"https://cool.com\"",
      "void ExpectNoPermissions(UsbChooserContext* store,",
      "const device::mojom::UsbDeviceInfo& device_info)",
      "for (const auto& kRequestingOrigin : kPolicyOrigins)",
      "for (const auto& kEmbeddingOrigin : kPolicyOrigins)",
      "EXPECT_FALSE(store->HasDevicePermission(kRequestingOrigin,",
      "kEmbeddingOrigin, device_info",
      "void ExpectCorrectPermissions",
      "UsbChooserContext* store,",
      "const std::vector<GURL>& kValidRequestingOrigins,",
      "const std::vector<GURL>& kInvalidRequestingOrigins,",
      "const device::mojom::UsbDeviceInfo& device_info)",
      "for (const auto& kEmbeddingOrigin : kPolicyOrigins)",
      "for (const auto& kValidRequestingOrigin : kValidRequestingOrigins)",
      "EXPECT_TRUE(store->HasDevicePermission(kValidRequestingOrigin,",
      "kEmbeddingOrigin, device_info",
      "for (const auto& kInvalidRequestingOrigin : kInvalidRequestingOrigins)",
      "EXPECT_FALSE(store->HasDevicePermission(kInvalidRequestingOrigin,",
      "kEmbeddingOrigin, device_info",
      "}  // namespace",
      "TEST_F(UsbChooserContextTest,",
      "UsbAllowDevicesForUrlsPermissionForSpecificDevice)",
      "const std::vector<GURL> kValidRequestingOrigins =",
      "GURL(\"https://product.vendor.com\"), GURL(\"https://vendor.com\"),",
      "GURL(\"https://sub.anydevice.com\"), GURL(\"https://anydevice.com\"",
      "const std::vector<GURL> kInvalidRequestingOrigins =",
      "GURL(\"https://gadget.com\"), GURL(\"https://cool.com\"",
      "auto* store = UsbChooserContextFactory::GetForProfile(profile",
      "scoped_refptr<UsbDevice> specific_device =",
      "base::MakeRefCounted<MockUsbDevice>(1234, 5678, \"Google\", \"Gizmo\",",
      "\"ABC123\"",
      "auto specific_device_info =",
      "device::mojom::UsbDeviceInfo::From(*specific_device",
      "DCHECK(specific_device_info",
      "ExpectNoPermissions(store, *specific_device_info",
      "profile()->GetPrefs()->Set(prefs::kManagedWebUsbAllowDevicesForUrls,",
      "ExpectCorrectPermissions(store, kValidRequestingOrigins,",
      "kInvalidRequestingOrigins, *specific_device_info",
      "TEST_F(UsbChooserContextTest,",
      "UsbAllowDevicesForUrlsPermissionForVendorRelatedDevice)",
      "const std::vector<GURL> kValidRequestingOrigins =",
      "GURL(\"https://vendor.com\"), GURL(\"https://sub.anydevice.com\"),",
      "GURL(\"https://anydevice.com\"",
      "const std::vector<GURL> kInvalidRequestingOrigins =",
      "GURL(\"https://product.vendor.com\"), GURL(\"https://gadget.com\"),",
      "GURL(\"https://cool.com\"",
      "auto* store = UsbChooserContextFactory::GetForProfile(profile",
      "scoped_refptr<UsbDevice> vendor_related_device =",
      "base::MakeRefCounted<MockUsbDevice>(1234, 8765, \"Google\", \"Widget\",",
      "\"XYZ987\"",
      "auto vendor_related_device_info =",
      "device::mojom::UsbDeviceInfo::From(*vendor_related_device",
      "DCHECK(vendor_related_device_info",
      "ExpectNoPermissions(store, *vendor_related_device_info",
      "profile()->GetPrefs()->Set(prefs::kManagedWebUsbAllowDevicesForUrls,",
      "ExpectCorrectPermissions(store, kValidRequestingOrigins,",
      "kInvalidRequestingOrigins,",
      "TEST_F(UsbChooserContextTest,",
      "UsbAllowDevicesForUrlsPermissionForUnrelatedDevice)",
      "const std::vector<GURL> kValidRequestingOrigins =",
      "GURL(\"https://sub.anydevice.com\"), GURL(\"https://anydevice.com\"",
      "const std::vector<GURL> kInvalidRequestingOrigins =",
      "GURL(\"https://product.vendor.com\"), GURL(\"https://vendor.com\"),",
      "GURL(\"https://cool.com\"",
      "const GURL kGadgetOrigin(\"https://gadget.com\"",
      "const GURL& kCoolOrigin = kInvalidRequestingOrigins[2]",
      "auto* store = UsbChooserContextFactory::GetForProfile(profile",
      "scoped_refptr<UsbDevice> unrelated_device =",
      "base::MakeRefCounted<MockUsbDevice>(2468, 1357, \"Cool\", \"Gadget\",",
      "\"4W350M3\"",
      "auto unrelated_device_info =",
      "device::mojom::UsbDeviceInfo::From(*unrelated_device",
      "DCHECK(unrelated_device_info",
      "ExpectNoPermissions(store, *unrelated_device_info",
      "profile()->GetPrefs()->Set(prefs::kManagedWebUsbAllowDevicesForUrls,",
      "EXPECT_TRUE(store->HasDevicePermission(kGadgetOrigin, kCoolOrigin,",
      "for (const auto& kEmbeddingOrigin : kPolicyOrigins)",
      "if (kEmbeddingOrigin != kCoolOrigin)",
      "EXPECT_FALSE(store->HasDevicePermission(kGadgetOrigin, kEmbeddingOrigin,",
      "ExpectCorrectPermissions(store, kValidRequestingOrigins,",
      "kInvalidRequestingOrigins, *unrelated_device_info",
      "TEST_F(UsbChooserContextTest,",
      "UsbAllowDevicesForUrlsPermissionOverrulesUsbGuardPermission)",
      "const GURL kProductVendorOrigin(\"https://product.vendor.com\"",
      "const GURL kGadgetOrigin(\"https://gadget.com\"",
      "const GURL kCoolOrigin(\"https://cool.com\"",
      "auto* store = UsbChooserContextFactory::GetForProfile(profile",
      "scoped_refptr<UsbDevice> specific_device =",
      "base::MakeRefCounted<MockUsbDevice>(1234, 5678, \"Google\", \"Gizmo\",",
      "\"ABC123\"",
      "scoped_refptr<UsbDevice> unrelated_device =",
      "base::MakeRefCounted<MockUsbDevice>(2468, 1357, \"Cool\", \"Gadget\",",
      "\"4W350M3\"",
      "auto specific_device_info =",
      "device::mojom::UsbDeviceInfo::From(*specific_device",
      "auto unrelated_device_info =",
      "device::mojom::UsbDeviceInfo::From(*unrelated_device",
      "DCHECK(specific_device_info",
      "DCHECK(unrelated_device_info",
      "ExpectNoPermissions(store, *specific_device_info",
      "ExpectNoPermissions(store, *unrelated_device_info",
      "auto* map = HostContentSettingsMapFactory::GetForProfile(profile",
      "map->SetContentSettingDefaultScope(kProductVendorOrigin, kProductVendorOrigin,",
      "CONTENT_SETTINGS_TYPE_USB_GUARD,",
      "std::string(), CONTENT_SETTING_BLOCK",
      "map->SetContentSettingDefaultScope(kGadgetOrigin, kCoolOrigin,",
      "CONTENT_SETTINGS_TYPE_USB_GUARD,",
      "std::string(), CONTENT_SETTING_BLOCK",
      "EXPECT_FALSE(store->HasDevicePermission",
      "kProductVendorOrigin, kProductVendorOrigin, *specific_device_info",
      "EXPECT_FALSE(store->HasDevicePermission",
      "kProductVendorOrigin, kProductVendorOrigin, *unrelated_device_info",
      "EXPECT_FALSE(store->HasDevicePermission(kGadgetOrigin, kCoolOrigin,",
      "EXPECT_FALSE(store->HasDevicePermission(kGadgetOrigin, kCoolOrigin,",
      "profile()->GetPrefs()->Set(prefs::kManagedWebUsbAllowDevicesForUrls,",
      "EXPECT_TRUE(store->HasDevicePermission",
      "kProductVendorOrigin, kProductVendorOrigin, *specific_device_info",
      "EXPECT_FALSE(store->HasDevicePermission",
      "kProductVendorOrigin, kProductVendorOrigin, *unrelated_device_info",
      "EXPECT_FALSE(store->HasDevicePermission(kGadgetOrigin, kCoolOrigin,",
      "EXPECT_TRUE(store->HasDevicePermission(kGadgetOrigin, kCoolOrigin,"
    ],
    "removed_lines": [],
    "cause": [
      "Memory Management"
    ],
    "effect": "DoS ",
    "score": 5.1,
    "safe_features": [
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARRAY_ACCESS",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "CONTROL_FLOW",
      "CONTROL_FLOW",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "CONDITIONAL",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "DEREF",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP",
      "POINTER_OP",
      "ARITH_OP"
    ],
    "unsafe_features": [],
    "vuln": "DoS Overflow ",
    "summary": [
      "buffer overflow"
    ]
  }
]